
Tesis_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08009db0  08009db0  00019db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f4  0800a3f4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3fc  0800a3fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000134  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff6f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c0  00000000  00000000  00030183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00033788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d05  00000000  00000000  000343c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136bb  00000000  00000000  000590c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc14f  00000000  00000000  0006c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001488cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a74  00000000  00000000  00148920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d94 	.word	0x08009d94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08009d94 	.word	0x08009d94

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <DS1307_Init+0x1c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f806 	bl	8001038 <DS1307_SetClockHalt>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000200 	.word	0x20000200

08001038 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <DS1307_SetClockHalt+0x14>
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	e000      	b.n	800104e <DS1307_SetClockHalt+0x16>
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f831 	bl	80010b8 <DS1307_GetRegByte>
 8001056:	4603      	mov	r3, r0
 8001058:	b25b      	sxtb	r3, r3
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b25a      	sxtb	r2, r3
 8001060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001064:	4313      	orrs	r3, r2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f805 	bl	800107c <DS1307_SetRegByte>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	733b      	strb	r3, [r7, #12]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <DS1307_SetRegByte+0x38>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	f107 020c 	add.w	r2, r7, #12
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2302      	movs	r3, #2
 80010a4:	21d0      	movs	r1, #208	; 0xd0
 80010a6:	f001 faab 	bl	8002600 <HAL_I2C_Master_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000200 	.word	0x20000200

080010b8 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <DS1307_GetRegByte+0x40>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	1dfa      	adds	r2, r7, #7
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	f001 fa95 	bl	8002600 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <DS1307_GetRegByte+0x40>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f107 020f 	add.w	r2, r7, #15
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	21d0      	movs	r1, #208	; 0xd0
 80010e8:	f001 fb88 	bl	80027fc <HAL_I2C_Master_Receive>
	return val;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000200 	.word	0x20000200

080010fc <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001100:	2003      	movs	r0, #3
 8001102:	f7ff ffd9 	bl	80010b8 <DS1307_GetRegByte>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f878 	bl	80011fe <DS1307_DecodeBCD>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}

08001114 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001118:	2004      	movs	r0, #4
 800111a:	f7ff ffcd 	bl	80010b8 <DS1307_GetRegByte>
 800111e:	4603      	mov	r3, r0
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f86c 	bl	80011fe <DS1307_DecodeBCD>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}

0800112c <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001130:	2005      	movs	r0, #5
 8001132:	f7ff ffc1 	bl	80010b8 <DS1307_GetRegByte>
 8001136:	4603      	mov	r3, r0
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f860 	bl	80011fe <DS1307_DecodeBCD>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	bd80      	pop	{r7, pc}

08001144 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800114a:	2010      	movs	r0, #16
 800114c:	f7ff ffb4 	bl	80010b8 <DS1307_GetRegByte>
 8001150:	4603      	mov	r3, r0
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4413      	add	r3, r2
 800115a:	461a      	mov	r2, r3
 800115c:	0091      	lsls	r1, r2, #2
 800115e:	461a      	mov	r2, r3
 8001160:	460b      	mov	r3, r1
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001168:	2006      	movs	r0, #6
 800116a:	f7ff ffa5 	bl	80010b8 <DS1307_GetRegByte>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f844 	bl	80011fe <DS1307_DecodeBCD>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4413      	add	r3, r2
 800117e:	b29b      	uxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff ff93 	bl	80010b8 <DS1307_GetRegByte>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f82f 	bl	80011fe <DS1307_DecodeBCD>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff84 	bl	80010b8 <DS1307_GetRegByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f823 	bl	80011fe <DS1307_DecodeBCD>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}

080011be <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ff78 	bl	80010b8 <DS1307_GetRegByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f814 	bl	80011fe <DS1307_DecodeBCD>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}

080011dc <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 80011e0:	2008      	movs	r0, #8
 80011e2:	f7ff ff69 	bl	80010b8 <DS1307_GetRegByte>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b25b      	sxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}

080011ee <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 80011f2:	2009      	movs	r0, #9
 80011f4:	f7ff ff60 	bl	80010b8 <DS1307_GetRegByte>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}

080011fe <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b2db      	uxtb	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <uart_print>:

/**
 * @brief Envía un mensaje a través de UART3.
 * @param message Mensaje a enviar.
 */
void uart_print(const char * message) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7fe ffd9 	bl	80001f0 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <uart_print+0x28>)
 800124a:	f003 f93f 	bl	80044cc <HAL_UART_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002c0 	.word	0x200002c0

0800125c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_GPIO_Init+0x68>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <MX_GPIO_Init+0x68>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_GPIO_Init+0x68>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_GPIO_Init+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <MX_GPIO_Init+0x68>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_GPIO_Init+0x68>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_GPIO_Init+0x68>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <MX_GPIO_Init+0x68>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_GPIO_Init+0x68>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_I2C2_Init+0x74>)
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_I2C2_Init+0x78>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_I2C2_Init+0x74>)
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <MX_I2C2_Init+0x7c>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_I2C2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_I2C2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_I2C2_Init+0x74>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_I2C2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_I2C2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_I2C2_Init+0x74>)
 8001306:	f001 f837 	bl	8002378 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 f96a 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <MX_I2C2_Init+0x74>)
 8001318:	f001 ffc3 	bl	80032a2 <HAL_I2CEx_ConfigAnalogFilter>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001322:	f000 f961 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C2_Init+0x74>)
 800132a:	f001 fff6 	bl	800331a <HAL_I2CEx_ConfigDigitalFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 f958 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000204 	.word	0x20000204
 8001340:	40005800 	.word	0x40005800
 8001344:	000186a0 	.word	0x000186a0

08001348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_I2C_MspInit+0x84>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001386:	2303      	movs	r3, #3
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138a:	2312      	movs	r3, #18
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <HAL_I2C_MspInit+0x8c>)
 80013a2:	f000 fe3d 	bl	8002020 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_I2C_MspInit+0x88>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40005800 	.word	0x40005800
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021400 	.word	0x40021400

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013dc:	b0ac      	sub	sp, #176	; 0xb0
 80013de:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f000 fbe4 	bl	8001bac <HAL_Init>
    // SPS30_Init(&huart5);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f89e 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f7ff ff38 	bl	800125c <MX_GPIO_Init>
  MX_RTC_Init();
 80013ec:	f000 f902 	bl	80015f4 <MX_RTC_Init>
  MX_UART5_Init();
 80013f0:	f000 fab8 	bl	8001964 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80013f4:	f000 fae0 	bl	80019b8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80013f8:	f7ff ff66 	bl	80012c8 <MX_I2C2_Init>
        (uint8_t *)"\n\n"
                   "-----------------------------------------------------------\n"
                   "*** UART port initialization successful !!! ***\n"
                   "-----------------------------------------------------------\n";

    HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen((char *)message), HAL_MAX_DELAY);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <main+0x134>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <main+0x134>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe fef3 	bl	80001f0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	4621      	mov	r1, r4
 8001414:	483e      	ldr	r0, [pc, #248]	; (8001510 <main+0x138>)
 8001416:	f003 f859 	bl	80044cc <HAL_UART_Transmit>

    uart_print("\n*********************************************\n");
 800141a:	483e      	ldr	r0, [pc, #248]	; (8001514 <main+0x13c>)
 800141c:	f7ff ff08 	bl	8001230 <uart_print>


    /* Lookup table for the days of week. */
    	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 8001420:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <main+0x140>)
 8001422:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001426:	461d      	mov	r5, r3
 8001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
    	DS1307_Init(&hi2c2);
 8001434:	4839      	ldr	r0, [pc, #228]	; (800151c <main+0x144>)
 8001436:	f7ff fdef 	bl	8001018 <DS1307_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {

		uint8_t date = DS1307_GetDate();
 800143a:	f7ff fe6b 	bl	8001114 <DS1307_GetDate>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t month = DS1307_GetMonth();
 8001444:	f7ff fe72 	bl	800112c <DS1307_GetMonth>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		uint16_t year = DS1307_GetYear();
 800144e:	f7ff fe79 	bl	8001144 <DS1307_GetYear>
 8001452:	4603      	mov	r3, r0
 8001454:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		uint8_t dow = DS1307_GetDayOfWeek();
 8001458:	f7ff fe50 	bl	80010fc <DS1307_GetDayOfWeek>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		uint8_t hour = DS1307_GetHour();
 8001462:	f7ff fe91 	bl	8001188 <DS1307_GetHour>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		uint8_t minute = DS1307_GetMinute();
 800146c:	f7ff fe9b 	bl	80011a6 <DS1307_GetMinute>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		uint8_t second = DS1307_GetSecond();
 8001476:	f7ff fea2 	bl	80011be <DS1307_GetSecond>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		int8_t zone_hr = DS1307_GetTimeZoneHour();
 8001480:	f7ff feac 	bl	80011dc <DS1307_GetTimeZoneHour>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		uint8_t zone_min = DS1307_GetTimeZoneMin();
 800148a:	f7ff feb0 	bl	80011ee <DS1307_GetTimeZoneMin>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		char buffer[100] = { 0 };
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2260      	movs	r2, #96	; 0x60
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 f811 	bl	80054c8 <memset>
		sprintf(buffer, "ISO8601 FORMAT: %04d-%02d-%02dT%02d:%02d:%02d%+03d:%02d  %s\n",
 80014a6:	f8b7 e08c 	ldrh.w	lr, [r7, #140]	; 0x8c
 80014aa:	f897 808e 	ldrb.w	r8, [r7, #142]	; 0x8e
 80014ae:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80014b2:	f897 108a 	ldrb.w	r1, [r7, #138]	; 0x8a
 80014b6:	f897 0089 	ldrb.w	r0, [r7, #137]	; 0x89
 80014ba:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 80014be:	f997 5087 	ldrsb.w	r5, [r7, #135]	; 0x87
 80014c2:	f897 6086 	ldrb.w	r6, [r7, #134]	; 0x86
 80014c6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3390      	adds	r3, #144	; 0x90
 80014ce:	443b      	add	r3, r7
 80014d0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80014d4:	f107 0c04 	add.w	ip, r7, #4
 80014d8:	9306      	str	r3, [sp, #24]
 80014da:	9605      	str	r6, [sp, #20]
 80014dc:	9504      	str	r5, [sp, #16]
 80014de:	9403      	str	r4, [sp, #12]
 80014e0:	9002      	str	r0, [sp, #8]
 80014e2:	9101      	str	r1, [sp, #4]
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	4643      	mov	r3, r8
 80014e8:	4672      	mov	r2, lr
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <main+0x148>)
 80014ec:	4660      	mov	r0, ip
 80014ee:	f004 fe73 	bl	80061d8 <siprintf>
				year, month, date, hour, minute, second, zone_hr, zone_min, DAYS_OF_WEEK[dow]);
		/* May show warning below. Ignore and proceed. */
		uart_print(buffer);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe9b 	bl	8001230 <uart_print>
		HAL_Delay(5000);
 80014fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80014fe:	f000 fbc7 	bl	8001c90 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        // Enviar mensaje a través de UART
        // uart_print(buffer);
        uart_print("\n*********************************************\n");
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <main+0x13c>)
 8001504:	f7ff fe94 	bl	8001230 <uart_print>
    while (1) {
 8001508:	e797      	b.n	800143a <main+0x62>
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000
 8001510:	200002c0 	.word	0x200002c0
 8001514:	08009df4 	.word	0x08009df4
 8001518:	08009e64 	.word	0x08009e64
 800151c:	20000204 	.word	0x20000204
 8001520:	08009e24 	.word	0x08009e24

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	; 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	; 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f003 ffc8 	bl	80054c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <SystemClock_Config+0xbc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <SystemClock_Config+0xbc>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <SystemClock_Config+0xbc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <SystemClock_Config+0xc0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <SystemClock_Config+0xc0>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <SystemClock_Config+0xc0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001584:	230a      	movs	r3, #10
 8001586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158c:	2310      	movs	r3, #16
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fefb 	bl	8003398 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80015a8:	f000 f81e 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f95e 	bl	8003888 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015d2:	f000 f809 	bl	80015e8 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <MX_RTC_Init+0xac>)
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <MX_RTC_Init+0xb0>)
 8001610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_RTC_Init+0xac>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_RTC_Init+0xac>)
 800161a:	227f      	movs	r2, #127	; 0x7f
 800161c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_RTC_Init+0xac>)
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_RTC_Init+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_RTC_Init+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_RTC_Init+0xac>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001636:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_RTC_Init+0xac>)
 8001638:	f002 fcc6 	bl	8003fc8 <HAL_RTC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001642:	f7ff ffd1 	bl	80015e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001646:	2300      	movs	r3, #0
 8001648:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800164a:	2300      	movs	r3, #0
 800164c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2201      	movs	r2, #1
 800165e:	4619      	mov	r1, r3
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <MX_RTC_Init+0xac>)
 8001662:	f002 fd27 	bl	80040b4 <HAL_RTC_SetTime>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800166c:	f7ff ffbc 	bl	80015e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001670:	2301      	movs	r3, #1
 8001672:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001674:	2301      	movs	r3, #1
 8001676:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001678:	2301      	movs	r3, #1
 800167a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800167c:	2300      	movs	r3, #0
 800167e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_RTC_Init+0xac>)
 8001688:	f002 fdae 	bl	80041e8 <HAL_RTC_SetDate>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001692:	f7ff ffa9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000258 	.word	0x20000258
 80016a4:	40002800 	.word	0x40002800

080016a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2230      	movs	r2, #48	; 0x30
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 ff05 	bl	80054c8 <memset>
  if(rtcHandle->Instance==RTC)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RTC_MspInit+0x4c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d111      	bne.n	80016ec <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c8:	2320      	movs	r3, #32
 80016ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fab6 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016e2:	f7ff ff81 	bl	80015e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_RTC_MspInit+0x50>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40002800 	.word	0x40002800
 80016f8:	42470e3c 	.word	0x42470e3c

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_MspInit+0x4c>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_MspInit+0x4c>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001798:	f000 fa5a 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <UART5_IRQHandler+0x10>)
 80017a6:	f002 ff23 	bl	80045f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000027c 	.word	0x2000027c

080017b4 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
    return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_kill>:

int _kill(int pid, int sig) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 80017ce:	f003 fe43 	bl	8005458 <__errno>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2216      	movs	r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
    return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_exit>:

void _exit(int status) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffe7 	bl	80017c4 <_kill>
    while (1) {
 80017f6:	e7fe      	b.n	80017f6 <_exit+0x12>

080017f8 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char * ptr, int len) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
        *ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
    }

    return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char * ptr, int len) {
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
        __io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
    }
    return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file) {
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:

int _fstat(int file, struct stat * st) {
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	605a      	str	r2, [r3, #4]
    return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file) {
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void * _sbrk(ptrdiff_t incr) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
    const uint8_t * max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
    uint8_t * prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end) {
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap) {
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
        errno = ENOMEM;
 8001904:	f003 fda8 	bl	8005458 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20030000 	.word	0x20030000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000278 	.word	0x20000278
 800193c:	20000318 	.word	0x20000318

08001940 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_UART5_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_UART5_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_UART5_Init+0x4c>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_UART5_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_UART5_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_UART5_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_UART5_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_UART5_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_UART5_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_UART5_Init+0x4c>)
 800199c:	f002 fd49 	bl	8004432 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80019a6:	f7ff fe1f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000027c 	.word	0x2000027c
 80019b4:	40005000 	.word	0x40005000

080019b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_USART3_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019f0:	f002 fd1f 	bl	8004432 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f7ff fdf5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002c0 	.word	0x200002c0
 8001a08:	40004800 	.word	0x40004800

08001a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a46      	ldr	r2, [pc, #280]	; (8001b44 <HAL_UART_MspInit+0x138>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d153      	bne.n	8001ad6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a36      	ldr	r2, [pc, #216]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a94:	2308      	movs	r3, #8
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	482b      	ldr	r0, [pc, #172]	; (8001b4c <HAL_UART_MspInit+0x140>)
 8001aa0:	f000 fabe 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <HAL_UART_MspInit+0x144>)
 8001ac0:	f000 faae 	bl	8002020 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2035      	movs	r0, #53	; 0x35
 8001aca:	f000 f9e0 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ace:	2035      	movs	r0, #53	; 0x35
 8001ad0:	f000 f9f9 	bl	8001ec6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ad4:	e031      	b.n	8001b3a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_UART_MspInit+0x148>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d12c      	bne.n	8001b3a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_UART_MspInit+0x13c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <HAL_UART_MspInit+0x144>)
 8001b36:	f000 fa73 	bl	8002020 <HAL_GPIO_Init>
}
 8001b3a:	bf00      	nop
 8001b3c:	3730      	adds	r7, #48	; 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40005000 	.word	0x40005000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40004800 	.word	0x40004800

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b82:	f7ff fedd 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f003 fc6d 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fc25 	bl	80013d8 <main>
  bx  lr
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b9c:	0800a404 	.word	0x0800a404
  ldr r2, =_sbss
 8001ba0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ba4:	20000318 	.word	0x20000318

08001ba8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f94f 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f000 f808 	bl	8001bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fd8c 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x54>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x58>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f967 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2c:	f000 f92f 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x5c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000004 	.word	0x20000004
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000000c 	.word	0x2000000c
 8001c74:	20000304 	.word	0x20000304

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000304 	.word	0x20000304

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000000c 	.word	0x2000000c

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff3e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff31 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	60fb      	str	r3, [r7, #12]

  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff feb6 	bl	8001c78 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d008      	beq.n	8001f2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e052      	b.n	8001fd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0216 	bic.w	r2, r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4a:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <HAL_DMA_Abort+0x62>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0208 	bic.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7c:	e013      	b.n	8001fa6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f7e:	f7ff fe7b 	bl	8001c78 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d90c      	bls.n	8001fa6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e015      	b.n	8001fd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e4      	bne.n	8001f7e <HAL_DMA_Abort+0x84>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e00c      	b.n	8002012 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e177      	b.n	800232c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8166 	bne.w	8002326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80c0 	beq.w	8002326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_GPIO_Init+0x324>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a65      	ldr	r2, [pc, #404]	; (8002344 <HAL_GPIO_Init+0x324>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_GPIO_Init+0x324>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c2:	4a61      	ldr	r2, [pc, #388]	; (8002348 <HAL_GPIO_Init+0x328>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_GPIO_Init+0x32c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d037      	beq.n	800225e <HAL_GPIO_Init+0x23e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a57      	ldr	r2, [pc, #348]	; (8002350 <HAL_GPIO_Init+0x330>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d031      	beq.n	800225a <HAL_GPIO_Init+0x23a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a56      	ldr	r2, [pc, #344]	; (8002354 <HAL_GPIO_Init+0x334>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <HAL_GPIO_Init+0x236>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a55      	ldr	r2, [pc, #340]	; (8002358 <HAL_GPIO_Init+0x338>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x232>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_GPIO_Init+0x33c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x22e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a53      	ldr	r2, [pc, #332]	; (8002360 <HAL_GPIO_Init+0x340>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x22a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_GPIO_Init+0x344>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_GPIO_Init+0x348>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_GPIO_Init+0x34c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	; (8002370 <HAL_GPIO_Init+0x350>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x21a>
 8002236:	2309      	movs	r3, #9
 8002238:	e012      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800223a:	230a      	movs	r3, #10
 800223c:	e010      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800223e:	2308      	movs	r3, #8
 8002240:	e00e      	b.n	8002260 <HAL_GPIO_Init+0x240>
 8002242:	2307      	movs	r3, #7
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x240>
 8002246:	2306      	movs	r3, #6
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x240>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x240>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x240>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_GPIO_Init+0x328>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_GPIO_Init+0x354>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_GPIO_Init+0x354>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002320:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_GPIO_Init+0x354>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae84 	bls.w	800203c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40021400 	.word	0x40021400
 8002364:	40021800 	.word	0x40021800
 8002368:	40021c00 	.word	0x40021c00
 800236c:	40022000 	.word	0x40022000
 8002370:	40022400 	.word	0x40022400
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e12b      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe ffd2 	bl	8001348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023dc:	f001 fc0c 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_I2C_Init+0x274>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d807      	bhi.n	80023fc <HAL_I2C_Init+0x84>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a80      	ldr	r2, [pc, #512]	; (80025f0 <HAL_I2C_Init+0x278>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e006      	b.n	800240a <HAL_I2C_Init+0x92>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a7d      	ldr	r2, [pc, #500]	; (80025f4 <HAL_I2C_Init+0x27c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	bf94      	ite	ls
 8002404:	2301      	movls	r3, #1
 8002406:	2300      	movhi	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0e7      	b.n	80025e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a78      	ldr	r2, [pc, #480]	; (80025f8 <HAL_I2C_Init+0x280>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a6a      	ldr	r2, [pc, #424]	; (80025ec <HAL_I2C_Init+0x274>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d802      	bhi.n	800244c <HAL_I2C_Init+0xd4>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3301      	adds	r3, #1
 800244a:	e009      	b.n	8002460 <HAL_I2C_Init+0xe8>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_I2C_Init+0x284>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	495c      	ldr	r1, [pc, #368]	; (80025ec <HAL_I2C_Init+0x274>)
 800247c:	428b      	cmp	r3, r1
 800247e:	d819      	bhi.n	80024b4 <HAL_I2C_Init+0x13c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e59      	subs	r1, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fbb1 f3f3 	udiv	r3, r1, r3
 800248e:	1c59      	adds	r1, r3, #1
 8002490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002494:	400b      	ands	r3, r1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_I2C_Init+0x138>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e59      	subs	r1, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a8:	3301      	adds	r3, #1
 80024aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ae:	e051      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e04f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d111      	bne.n	80024e0 <HAL_I2C_Init+0x168>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e012      	b.n	8002506 <HAL_I2C_Init+0x18e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x196>
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10e      	bne.n	8002534 <HAL_I2C_Init+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e58      	subs	r0, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	440b      	add	r3, r1
 8002524:	fbb0 f3f3 	udiv	r3, r0, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002532:	e00f      	b.n	8002554 <HAL_I2C_Init+0x1dc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	6809      	ldr	r1, [r1, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6911      	ldr	r1, [r2, #16]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	000186a0 	.word	0x000186a0
 80025f0:	001e847f 	.word	0x001e847f
 80025f4:	003d08ff 	.word	0x003d08ff
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fb30 	bl	8001c78 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80e0 	bne.w	80027e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	4970      	ldr	r1, [pc, #448]	; (80027f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fc58 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0d3      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e0cc      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2221      	movs	r2, #33	; 0x21
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fac2 	bl	8002c48 <I2C_MasterRequestWrite>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e4:	e066      	b.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fcd2 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11b      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x188>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d017      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	6a39      	ldr	r1, [r7, #32]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fcc2 	bl	8003116 <I2C_WaitOnBTFFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2b04      	cmp	r3, #4
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01a      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d194      	bne.n	80026e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000

080027fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fa32 	bl	8001c78 <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 820b 	bne.w	8002c3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	497c      	ldr	r1, [pc, #496]	; (8002a20 <HAL_I2C_Master_Receive+0x224>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fb5a 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e1fe      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Receive+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e1f7      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2222      	movs	r2, #34	; 0x22
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_I2C_Master_Receive+0x228>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa46 	bl	8002d4c <I2C_MasterRequestRead>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e1b8      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d113      	bne.n	80028fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e18c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d11b      	bne.n	800293a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e16c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b02      	cmp	r3, #2
 8002940:	d11b      	bne.n	800297a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	e14c      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a0:	e138      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	f200 80f1 	bhi.w	8002b8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d123      	bne.n	80029fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fbed 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e139      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fa:	e10b      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d14e      	bne.n	8002aa2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_I2C_Master_Receive+0x22c>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fa6a 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e10e      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa0:	e0b8      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4966      	ldr	r1, [pc, #408]	; (8002c44 <HAL_I2C_Master_Receive+0x448>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fa1b 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0bf      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	494f      	ldr	r1, [pc, #316]	; (8002c44 <HAL_I2C_Master_Receive+0x448>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f9ed 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e091      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8c:	e042      	b.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fb00 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e04c      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d118      	bne.n	8002c14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f aec2 	bne.w	80029a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	00010004 	.word	0x00010004

08002c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	460b      	mov	r3, r1
 8002c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d006      	beq.n	8002c72 <I2C_MasterRequestWrite+0x2a>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d003      	beq.n	8002c72 <I2C_MasterRequestWrite+0x2a>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c70:	d108      	bne.n	8002c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e00b      	b.n	8002c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d107      	bne.n	8002c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f91d 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d103      	bne.n	8002ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e035      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd8:	d108      	bne.n	8002cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	e01b      	b.n	8002d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	11db      	asrs	r3, r3, #7
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0306 	and.w	r3, r3, #6
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f063 030f 	orn	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <I2C_MasterRequestWrite+0xfc>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f943 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e010      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <I2C_MasterRequestWrite+0x100>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f933 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	00010008 	.word	0x00010008
 8002d48:	00010002 	.word	0x00010002

08002d4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d006      	beq.n	8002d86 <I2C_MasterRequestRead+0x3a>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d003      	beq.n	8002d86 <I2C_MasterRequestRead+0x3a>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e00b      	b.n	8002db0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	2b11      	cmp	r3, #17
 8002d9e:	d107      	bne.n	8002db0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f893 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd6:	d103      	bne.n	8002de0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e079      	b.n	8002ed8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e05f      	b.n	8002ec0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	11db      	asrs	r3, r3, #7
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0306 	and.w	r3, r3, #6
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f063 030f 	orn	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4930      	ldr	r1, [pc, #192]	; (8002ee0 <I2C_MasterRequestRead+0x194>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8b9 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e054      	b.n	8002ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4929      	ldr	r1, [pc, #164]	; (8002ee4 <I2C_MasterRequestRead+0x198>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f8a9 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e044      	b.n	8002ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f831 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d103      	bne.n	8002ea4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e017      	b.n	8002ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ea8:	897b      	ldrh	r3, [r7, #10]
 8002eaa:	11db      	asrs	r3, r3, #7
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f003 0306 	and.w	r3, r3, #6
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f063 030e 	orn	r3, r3, #14
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4907      	ldr	r1, [pc, #28]	; (8002ee4 <I2C_MasterRequestRead+0x198>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f865 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	00010008 	.word	0x00010008
 8002ee4:	00010002 	.word	0x00010002

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e025      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe feb9 	bl	8001c78 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e023      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10d      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	e00c      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d0b6      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa4:	e051      	b.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d123      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d021      	beq.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe fe37 	bl	8001c78 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e00b      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d18d      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	e02d      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8ce 	bl	8003244 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b8:	d021      	beq.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe fddd 	bl	8001c78 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d1ca      	bne.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003122:	e02d      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f88d 	bl	8003244 <I2C_IsAcknowledgeFailed>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e02d      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313a:	d021      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe fd9c 	bl	8001c78 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1ca      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a4:	e042      	b.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d119      	bne.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e029      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fe fd46 	bl	8001c78 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d1b5      	bne.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d11b      	bne.n	8003294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d129      	bne.n	800330c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d12a      	bne.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	f023 030f 	bic.w	r3, r3, #15
 800335a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b29a      	uxth	r2, r3
 8003360:	89fb      	ldrh	r3, [r7, #14]
 8003362:	4313      	orrs	r3, r2
 8003364:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	89fa      	ldrh	r2, [r7, #14]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e267      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d075      	beq.n	80034a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d00c      	beq.n	80033dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b7e      	ldr	r3, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x108>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d157      	bne.n	80034a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e242      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x74>
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6f      	ldr	r2, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 8003430:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a68      	ldr	r2, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a65      	ldr	r2, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fc12 	bl	8001c78 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fc0e 	bl	8001c78 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e207      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xc0>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fbfe 	bl	8001c78 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe fbfa 	bl	8001c78 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1f3      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0xe8>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d063      	beq.n	8003576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1c7      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4937      	ldr	r1, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe fbb3 	bl	8001c78 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe fbaf 	bl	8001c78 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1a8      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fb92 	bl	8001c78 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe fb8e 	bl	8001c78 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e187      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d036      	beq.n	80035f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe fb72 	bl	8001c78 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe fb6e 	bl	8001c78 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e167      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x200>
 80035b6:	e01b      	b.n	80035f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7fe fb5b 	bl	8001c78 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	e00e      	b.n	80035e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe fb57 	bl	8001c78 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d907      	bls.n	80035e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e150      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	42470000 	.word	0x42470000
 80035e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ea      	bne.n	80035c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8097 	beq.w	800372c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	4b7d      	ldr	r3, [pc, #500]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x474>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fe fb17 	bl	8001c78 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fe fb13 	bl	8001c78 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e10c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x2ea>
 8003674:	4b64      	ldr	r3, [pc, #400]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a63      	ldr	r2, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x30c>
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5e      	ldr	r2, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a5b      	ldr	r2, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 80036a4:	4b58      	ldr	r3, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a57      	ldr	r2, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
 80036b0:	4b55      	ldr	r3, [pc, #340]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a54      	ldr	r2, [pc, #336]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 0304 	bic.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fad8 	bl	8001c78 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fad4 	bl	8001c78 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0cb      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ee      	beq.n	80036cc <HAL_RCC_OscConfig+0x334>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7fe fac2 	bl	8001c78 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe fabe 	bl	8001c78 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0b5      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a1 	beq.w	8003878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b08      	cmp	r3, #8
 8003740:	d05c      	beq.n	80037fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d141      	bne.n	80037ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fa92 	bl	8001c78 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe fa8e 	bl	8001c78 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e087      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe fa67 	bl	8001c78 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fa63 	bl	8001c78 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e05c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x416>
 80037cc:	e054      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fa50 	bl	8001c78 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fa4c 	bl	8001c78 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e045      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x444>
 80037fa:	e03d      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e038      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4ec>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d028      	beq.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d121      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d11a      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0cc      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90c      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b8      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f4:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	494d      	ldr	r1, [pc, #308]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d044      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e067      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4934      	ldr	r1, [pc, #208]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe f97e 	bl	8001c78 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe f97a 	bl	8001c78 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e04f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20c      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e032      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4916      	ldr	r1, [pc, #88]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	490e      	ldr	r1, [pc, #56]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0e:	f000 f821 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	490a      	ldr	r1, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe f8de 	bl	8001bf0 <HAL_InitTick>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00
 8003a44:	40023800 	.word	0x40023800
 8003a48:	08009f2c 	.word	0x08009f2c
 8003a4c:	20000004 	.word	0x20000004
 8003a50:	20000008 	.word	0x20000008

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b090      	sub	sp, #64	; 0x40
 8003a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a60:	2300      	movs	r3, #0
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	2300      	movs	r3, #0
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6c:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d00d      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x40>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	f200 80a1 	bhi.w	8003bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x34>
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a86:	e09b      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a8c:	e09b      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8e:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003a90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a92:	e098      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a94:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d028      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003abc:	2100      	movs	r1, #0
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac0:	fb03 f201 	mul.w	r2, r3, r1
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	fb00 f303 	mul.w	r3, r0, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	4a43      	ldr	r2, [pc, #268]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ace:	fba0 1202 	umull	r1, r2, r0, r2
 8003ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ada:	4413      	add	r3, r2
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aee:	f7fd f8db 	bl	8000ca8 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4613      	mov	r3, r2
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afa:	e053      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	2200      	movs	r2, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	617a      	str	r2, [r7, #20]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b0e:	f04f 0b00 	mov.w	fp, #0
 8003b12:	4652      	mov	r2, sl
 8003b14:	465b      	mov	r3, fp
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b46:	ebb2 0408 	subs.w	r4, r2, r8
 8003b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	00eb      	lsls	r3, r5, #3
 8003b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5c:	00e2      	lsls	r2, r4, #3
 8003b5e:	4614      	mov	r4, r2
 8003b60:	461d      	mov	r5, r3
 8003b62:	eb14 030a 	adds.w	r3, r4, sl
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	eb45 030b 	adc.w	r3, r5, fp
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	028b      	lsls	r3, r1, #10
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b84:	4621      	mov	r1, r4
 8003b86:	028a      	lsls	r2, r1, #10
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	60fa      	str	r2, [r7, #12]
 8003b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b98:	f7fd f886 	bl	8000ca8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3740      	adds	r7, #64	; 0x40
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	017d7840 	.word	0x017d7840

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000004 	.word	0x20000004

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08009f3c 	.word	0x08009f3c

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c24:	f7ff ffdc 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0b5b      	lsrs	r3, r3, #13
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08009f3c 	.word	0x08009f3c

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d075      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c7c:	4b91      	ldr	r3, [pc, #580]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fff9 	bl	8001c78 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c8a:	f7fd fff5 	bl	8001c78 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e189      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c9c:	4b8a      	ldr	r3, [pc, #552]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	019a      	lsls	r2, r3, #6
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	071b      	lsls	r3, r3, #28
 8003cc0:	4981      	ldr	r1, [pc, #516]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cd4:	4b7c      	ldr	r3, [pc, #496]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cda:	0f1b      	lsrs	r3, r3, #28
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	019a      	lsls	r2, r3, #6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	071b      	lsls	r3, r3, #28
 8003cf4:	4974      	ldr	r1, [pc, #464]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cfc:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d02:	f023 021f 	bic.w	r2, r3, #31
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	496e      	ldr	r1, [pc, #440]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	019a      	lsls	r2, r3, #6
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	071b      	lsls	r3, r3, #28
 8003d34:	4964      	ldr	r1, [pc, #400]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d3c:	4b61      	ldr	r3, [pc, #388]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d42:	f7fd ff99 	bl	8001c78 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d4a:	f7fd ff95 	bl	8001c78 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e129      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d5c:	4b5a      	ldr	r3, [pc, #360]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d079      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d80:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fd ff77 	bl	8001c78 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d8e:	f7fd ff73 	bl	8001c78 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e107      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da0:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dac:	d0ef      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dba:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	0f1b      	lsrs	r3, r3, #28
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	019a      	lsls	r2, r3, #6
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	071b      	lsls	r3, r3, #28
 8003dda:	493b      	ldr	r1, [pc, #236]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003de2:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	4934      	ldr	r1, [pc, #208]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01e      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	0e1b      	lsrs	r3, r3, #24
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	019a      	lsls	r2, r3, #6
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	071b      	lsls	r3, r3, #28
 8003e28:	4927      	ldr	r1, [pc, #156]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	4922      	ldr	r1, [pc, #136]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4c:	f7fd ff14 	bl	8001c78 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e54:	f7fd ff10 	bl	8001c78 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0a4      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e72:	d1ef      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 808b 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fee5 	bl	8001c78 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eb0:	e010      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd fee1 	bl	8001c78 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d909      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e075      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003ec4:	42470068 	.word	0x42470068
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470070 	.word	0x42470070
 8003ed0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0e8      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02f      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d028      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efe:	4b2f      	ldr	r3, [pc, #188]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0e:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f1a:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d114      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fd fea7 	bl	8001c78 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fd fea3 	bl	8001c78 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e035      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ee      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5c:	d10d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	4912      	ldr	r1, [pc, #72]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]
 8003f78:	e005      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f84:	6093      	str	r3, [r2, #8]
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f92:	490a      	ldr	r1, [pc, #40]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003fac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470e40 	.word	0x42470e40
 8003fc4:	424711e0 	.word	0x424711e0

08003fc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e066      	b.n	80040ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7f5b      	ldrb	r3, [r3, #29]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fb5a 	bl	80016a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	22ca      	movs	r2, #202	; 0xca
 8004000:	625a      	str	r2, [r3, #36]	; 0x24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2253      	movs	r2, #83	; 0x53
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f998 	bl	8004340 <RTC_EnterInitMode>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d12c      	bne.n	8004074 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68d2      	ldr	r2, [r2, #12]
 8004054:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6919      	ldr	r1, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	041a      	lsls	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f99f 	bl	80043ae <RTC_ExitInitMode>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	22ff      	movs	r2, #255	; 0xff
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	7f1b      	ldrb	r3, [r3, #28]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_RTC_SetTime+0x1c>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e087      	b.n	80041e0 <HAL_RTC_SetTime+0x12c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2202      	movs	r2, #2
 80040da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d126      	bne.n	8004130 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f97c 	bl	80043f8 <RTC_ByteToBcd2>
 8004100:	4603      	mov	r3, r0
 8004102:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f975 	bl	80043f8 <RTC_ByteToBcd2>
 800410e:	4603      	mov	r3, r0
 8004110:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004112:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	789b      	ldrb	r3, [r3, #2]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f96d 	bl	80043f8 <RTC_ByteToBcd2>
 800411e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004120:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e018      	b.n	8004162 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004150:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004156:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	78db      	ldrb	r3, [r3, #3]
 800415c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	22ca      	movs	r2, #202	; 0xca
 8004168:	625a      	str	r2, [r3, #36]	; 0x24
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2253      	movs	r2, #83	; 0x53
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f8e4 	bl	8004340 <RTC_EnterInitMode>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d120      	bne.n	80041c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800418c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004190:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f8f7 	bl	80043ae <RTC_ExitInitMode>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	771a      	strb	r2, [r3, #28]

  return status;
 80041de:	7cfb      	ldrb	r3, [r7, #19]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	7f1b      	ldrb	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_RTC_SetDate+0x1c>
 8004200:	2302      	movs	r3, #2
 8004202:	e071      	b.n	80042e8 <HAL_RTC_SetDate+0x100>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2202      	movs	r2, #2
 800420e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10e      	bne.n	8004234 <HAL_RTC_SetDate+0x4c>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	f023 0310 	bic.w	r3, r3, #16
 800422a:	b2db      	uxtb	r3, r3
 800422c:	330a      	adds	r3, #10
 800422e:	b2da      	uxtb	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11c      	bne.n	8004274 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	78db      	ldrb	r3, [r3, #3]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f8da 	bl	80043f8 <RTC_ByteToBcd2>
 8004244:	4603      	mov	r3, r0
 8004246:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f8d3 	bl	80043f8 <RTC_ByteToBcd2>
 8004252:	4603      	mov	r3, r0
 8004254:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004256:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f8cb 	bl	80043f8 <RTC_ByteToBcd2>
 8004262:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004264:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e00e      	b.n	8004292 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	78db      	ldrb	r3, [r3, #3]
 8004278:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	785b      	ldrb	r3, [r3, #1]
 800427e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004280:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004286:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	22ca      	movs	r2, #202	; 0xca
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2253      	movs	r2, #83	; 0x53
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f84c 	bl	8004340 <RTC_EnterInitMode>
 80042a8:	4603      	mov	r3, r0
 80042aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f873 	bl	80043ae <RTC_ExitInitMode>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	771a      	strb	r2, [r3, #28]

  return status;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800430a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430c:	f7fd fcb4 	bl	8001c78 <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004312:	e009      	b.n	8004328 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004314:	f7fd fcb0 	bl	8001c78 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004322:	d901      	bls.n	8004328 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e007      	b.n	8004338 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ee      	beq.n	8004314 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d122      	bne.n	80043a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800436c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800436e:	f7fd fc83 	bl	8001c78 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004374:	e00c      	b.n	8004390 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004376:	f7fd fc7f 	bl	8001c78 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004384:	d904      	bls.n	8004390 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <RTC_EnterInitMode+0x64>
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d1e8      	bne.n	8004376 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff89 	bl	80042f0 <HAL_RTC_WaitForSynchro>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2204      	movs	r2, #4
 80043e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004406:	e005      	b.n	8004414 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	3301      	adds	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	3b0a      	subs	r3, #10
 8004412:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b09      	cmp	r3, #9
 8004418:	d8f6      	bhi.n	8004408 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	b2da      	uxtb	r2, r3
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	4313      	orrs	r3, r2
 8004424:	b2db      	uxtb	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e03f      	b.n	80044c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fad7 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2224      	movs	r2, #36	; 0x24
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004474:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd7a 	bl	8004f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d17c      	bne.n	80045e6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Transmit+0x2c>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e075      	b.n	80045e8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x3e>
 8004506:	2302      	movs	r3, #2
 8004508:	e06e      	b.n	80045e8 <HAL_UART_Transmit+0x11c>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2221      	movs	r2, #33	; 0x21
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004520:	f7fd fbaa 	bl	8001c78 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453a:	d108      	bne.n	800454e <HAL_UART_Transmit+0x82>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e003      	b.n	8004556 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800455e:	e02a      	b.n	80045b6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 faf8 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e036      	b.n	80045e8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e007      	b.n	80045a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1cf      	bne.n	8004560 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2140      	movs	r1, #64	; 0x40
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fac8 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e006      	b.n	80045e8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b0ba      	sub	sp, #232	; 0xe8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800462e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_UART_IRQHandler+0x66>
 8004642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fbd3 	bl	8004dfa <UART_Receive_IT>
      return;
 8004654:	e256      	b.n	8004b04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80de 	beq.w	800481c <HAL_UART_IRQHandler+0x22c>
 8004660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80d1 	beq.w	800481c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0xae>
 8004686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_UART_IRQHandler+0xd2>
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f043 0202 	orr.w	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0xf6>
 80046ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <HAL_UART_IRQHandler+0x126>
 80046f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0208 	orr.w	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 81ed 	beq.w	8004afa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x14e>
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb5e 	bl	8004dfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_UART_IRQHandler+0x17a>
 8004762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04f      	beq.n	800480a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa66 	bl	8004c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d141      	bne.n	8004802 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1d9      	bne.n	800477e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	4a7d      	ldr	r2, [pc, #500]	; (80049cc <HAL_UART_IRQHandler+0x3dc>)
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fd fbfb 	bl	8001fda <HAL_DMA_Abort_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00e      	b.n	8004818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f99a 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e00a      	b.n	8004818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f996 	bl	8004b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	e006      	b.n	8004818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f992 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004816:	e170      	b.n	8004afa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	bf00      	nop
    return;
 800481a:	e16e      	b.n	8004afa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2b01      	cmp	r3, #1
 8004822:	f040 814a 	bne.w	8004aba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8143 	beq.w	8004aba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 813c 	beq.w	8004aba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	f040 80b4 	bne.w	80049d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004874:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8140 	beq.w	8004afe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004886:	429a      	cmp	r2, r3
 8004888:	f080 8139 	bcs.w	8004afe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004892:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	f000 8088 	beq.w	80049b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1d9      	bne.n	80048a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3314      	adds	r3, #20
 800490e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004912:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004916:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800491a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e1      	bne.n	80048ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800494e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004950:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004954:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800495c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e3      	bne.n	800492a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004994:	65ba      	str	r2, [r7, #88]	; 0x58
 8004996:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800499a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd faa4 	bl	8001efa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8c0 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049c8:	e099      	b.n	8004afe <HAL_UART_IRQHandler+0x50e>
 80049ca:	bf00      	nop
 80049cc:	08004d03 	.word	0x08004d03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 808b 	beq.w	8004b02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8086 	beq.w	8004b02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3314      	adds	r3, #20
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a52:	633a      	str	r2, [r7, #48]	; 0x30
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e3      	bne.n	8004a2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0310 	bic.w	r3, r3, #16
 8004a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	69b9      	ldr	r1, [r7, #24]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e3      	bne.n	8004a74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f848 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ab8:	e023      	b.n	8004b02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_UART_IRQHandler+0x4ea>
 8004ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f929 	bl	8004d2a <UART_Transmit_IT>
    return;
 8004ad8:	e014      	b.n	8004b04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00e      	beq.n	8004b04 <HAL_UART_IRQHandler+0x514>
 8004ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f969 	bl	8004dca <UART_EndTransmit_IT>
    return;
 8004af8:	e004      	b.n	8004b04 <HAL_UART_IRQHandler+0x514>
    return;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_UART_IRQHandler+0x514>
      return;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_UART_IRQHandler+0x514>
      return;
 8004b02:	bf00      	nop
  }
}
 8004b04:	37e8      	adds	r7, #232	; 0xe8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop

08004b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b090      	sub	sp, #64	; 0x40
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b70:	e050      	b.n	8004c14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b78:	d04c      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b80:	f7fd f87a 	bl	8001c78 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d241      	bcs.n	8004c14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be4:	623a      	str	r2, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e00f      	b.n	8004c34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d09f      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3740      	adds	r7, #64	; 0x40
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b095      	sub	sp, #84	; 0x54
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c64:	643a      	str	r2, [r7, #64]	; 0x40
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d119      	bne.n	8004ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd4:	61ba      	str	r2, [r7, #24]
 8004cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cf6:	bf00      	nop
 8004cf8:	3754      	adds	r7, #84	; 0x54
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff ff09 	bl	8004b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b21      	cmp	r3, #33	; 0x21
 8004d3c:	d13e      	bne.n	8004dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	d114      	bne.n	8004d72 <UART_Transmit_IT+0x48>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d110      	bne.n	8004d72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e008      	b.n	8004d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6211      	str	r1, [r2, #32]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4619      	mov	r1, r3
 8004d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fe8e 	bl	8004b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08c      	sub	sp, #48	; 0x30
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b22      	cmp	r3, #34	; 0x22
 8004e0c:	f040 80ab 	bne.w	8004f66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d117      	bne.n	8004e4a <UART_Receive_IT+0x50>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d113      	bne.n	8004e4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
 8004e48:	e026      	b.n	8004e98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d007      	beq.n	8004e6e <UART_Receive_IT+0x74>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <UART_Receive_IT+0x82>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e008      	b.n	8004e8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d15a      	bne.n	8004f62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0220 	bic.w	r2, r2, #32
 8004eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d135      	bne.n	8004f58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	613b      	str	r3, [r7, #16]
   return(result);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f023 0310 	bic.w	r3, r3, #16
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f12:	623a      	str	r2, [r7, #32]
 8004f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	69f9      	ldr	r1, [r7, #28]
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d10a      	bne.n	8004f4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff fdf9 	bl	8004b48 <HAL_UARTEx_RxEventCallback>
 8004f56:	e002      	b.n	8004f5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fde1 	bl	8004b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e002      	b.n	8004f68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	; 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b0c0      	sub	sp, #256	; 0x100
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	68d9      	ldr	r1, [r3, #12]
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	ea40 0301 	orr.w	r3, r0, r1
 8004f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fc8:	f021 010c 	bic.w	r1, r1, #12
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	6999      	ldr	r1, [r3, #24]
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	ea40 0301 	orr.w	r3, r0, r1
 8004ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b8f      	ldr	r3, [pc, #572]	; (800523c <UART_SetConfig+0x2cc>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d005      	beq.n	8005010 <UART_SetConfig+0xa0>
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b8d      	ldr	r3, [pc, #564]	; (8005240 <UART_SetConfig+0x2d0>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d104      	bne.n	800501a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe fe06 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8005014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005018:	e003      	b.n	8005022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7fe fded 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 800501e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502c:	f040 810c 	bne.w	8005248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800503a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800503e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	1891      	adds	r1, r2, r2
 8005048:	65b9      	str	r1, [r7, #88]	; 0x58
 800504a:	415b      	adcs	r3, r3
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800504e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005052:	4621      	mov	r1, r4
 8005054:	eb12 0801 	adds.w	r8, r2, r1
 8005058:	4629      	mov	r1, r5
 800505a:	eb43 0901 	adc.w	r9, r3, r1
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800506a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800506e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005072:	4690      	mov	r8, r2
 8005074:	4699      	mov	r9, r3
 8005076:	4623      	mov	r3, r4
 8005078:	eb18 0303 	adds.w	r3, r8, r3
 800507c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005080:	462b      	mov	r3, r5
 8005082:	eb49 0303 	adc.w	r3, r9, r3
 8005086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800509a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800509e:	460b      	mov	r3, r1
 80050a0:	18db      	adds	r3, r3, r3
 80050a2:	653b      	str	r3, [r7, #80]	; 0x50
 80050a4:	4613      	mov	r3, r2
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
 80050ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050b4:	f7fb fdf8 	bl	8000ca8 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b61      	ldr	r3, [pc, #388]	; (8005244 <UART_SetConfig+0x2d4>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	011c      	lsls	r4, r3, #4
 80050c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	64b9      	str	r1, [r7, #72]	; 0x48
 80050e0:	415b      	adcs	r3, r3
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050e8:	4641      	mov	r1, r8
 80050ea:	eb12 0a01 	adds.w	sl, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb43 0b01 	adc.w	fp, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005108:	4692      	mov	sl, r2
 800510a:	469b      	mov	fp, r3
 800510c:	4643      	mov	r3, r8
 800510e:	eb1a 0303 	adds.w	r3, sl, r3
 8005112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005116:	464b      	mov	r3, r9
 8005118:	eb4b 0303 	adc.w	r3, fp, r3
 800511c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005134:	460b      	mov	r3, r1
 8005136:	18db      	adds	r3, r3, r3
 8005138:	643b      	str	r3, [r7, #64]	; 0x40
 800513a:	4613      	mov	r3, r2
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
 8005142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800514a:	f7fb fdad 	bl	8000ca8 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4611      	mov	r1, r2
 8005154:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <UART_SetConfig+0x2d4>)
 8005156:	fba3 2301 	umull	r2, r3, r3, r1
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2264      	movs	r2, #100	; 0x64
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800516a:	4b36      	ldr	r3, [pc, #216]	; (8005244 <UART_SetConfig+0x2d4>)
 800516c:	fba3 2302 	umull	r2, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	1891      	adds	r1, r2, r2
 8005192:	63b9      	str	r1, [r7, #56]	; 0x38
 8005194:	415b      	adcs	r3, r3
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800519c:	4641      	mov	r1, r8
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	6339      	str	r1, [r7, #48]	; 0x30
 80051a2:	4649      	mov	r1, r9
 80051a4:	414b      	adcs	r3, r1
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051b4:	4659      	mov	r1, fp
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4651      	mov	r1, sl
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4642      	mov	r2, r8
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d0:	464b      	mov	r3, r9
 80051d2:	460a      	mov	r2, r1
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f0:	460b      	mov	r3, r1
 80051f2:	18db      	adds	r3, r3, r3
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	4613      	mov	r3, r2
 80051f8:	eb42 0303 	adc.w	r3, r2, r3
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005206:	f7fb fd4f 	bl	8000ca8 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <UART_SetConfig+0x2d4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	3332      	adds	r3, #50	; 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <UART_SetConfig+0x2d4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 0207 	and.w	r2, r3, #7
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005238:	e105      	b.n	8005446 <UART_SetConfig+0x4d6>
 800523a:	bf00      	nop
 800523c:	40011000 	.word	0x40011000
 8005240:	40011400 	.word	0x40011400
 8005244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800525a:	4642      	mov	r2, r8
 800525c:	464b      	mov	r3, r9
 800525e:	1891      	adds	r1, r2, r2
 8005260:	6239      	str	r1, [r7, #32]
 8005262:	415b      	adcs	r3, r3
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800526a:	4641      	mov	r1, r8
 800526c:	1854      	adds	r4, r2, r1
 800526e:	4649      	mov	r1, r9
 8005270:	eb43 0501 	adc.w	r5, r3, r1
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	00eb      	lsls	r3, r5, #3
 800527e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005282:	00e2      	lsls	r2, r4, #3
 8005284:	4614      	mov	r4, r2
 8005286:	461d      	mov	r5, r3
 8005288:	4643      	mov	r3, r8
 800528a:	18e3      	adds	r3, r4, r3
 800528c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005290:	464b      	mov	r3, r9
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052b6:	4629      	mov	r1, r5
 80052b8:	008b      	lsls	r3, r1, #2
 80052ba:	4621      	mov	r1, r4
 80052bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c0:	4621      	mov	r1, r4
 80052c2:	008a      	lsls	r2, r1, #2
 80052c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052c8:	f7fb fcee 	bl	8000ca8 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4b60      	ldr	r3, [pc, #384]	; (8005454 <UART_SetConfig+0x4e4>)
 80052d2:	fba3 2302 	umull	r2, r3, r3, r2
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	011c      	lsls	r4, r3, #4
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	61b9      	str	r1, [r7, #24]
 80052f4:	415b      	adcs	r3, r3
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6139      	str	r1, [r7, #16]
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005330:	464b      	mov	r3, r9
 8005332:	460a      	mov	r2, r1
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	67bb      	str	r3, [r7, #120]	; 0x78
 8005346:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005354:	4649      	mov	r1, r9
 8005356:	008b      	lsls	r3, r1, #2
 8005358:	4641      	mov	r1, r8
 800535a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535e:	4641      	mov	r1, r8
 8005360:	008a      	lsls	r2, r1, #2
 8005362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005366:	f7fb fc9f 	bl	8000ca8 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b39      	ldr	r3, [pc, #228]	; (8005454 <UART_SetConfig+0x4e4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a34      	ldr	r2, [pc, #208]	; (8005454 <UART_SetConfig+0x4e4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	441c      	add	r4, r3
 8005390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005394:	2200      	movs	r2, #0
 8005396:	673b      	str	r3, [r7, #112]	; 0x70
 8005398:	677a      	str	r2, [r7, #116]	; 0x74
 800539a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800539e:	4642      	mov	r2, r8
 80053a0:	464b      	mov	r3, r9
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ae:	4641      	mov	r1, r8
 80053b0:	1851      	adds	r1, r2, r1
 80053b2:	6039      	str	r1, [r7, #0]
 80053b4:	4649      	mov	r1, r9
 80053b6:	414b      	adcs	r3, r1
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053c6:	4659      	mov	r1, fp
 80053c8:	00cb      	lsls	r3, r1, #3
 80053ca:	4651      	mov	r1, sl
 80053cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d0:	4651      	mov	r1, sl
 80053d2:	00ca      	lsls	r2, r1, #3
 80053d4:	4610      	mov	r0, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	4603      	mov	r3, r0
 80053da:	4642      	mov	r2, r8
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	663b      	str	r3, [r7, #96]	; 0x60
 80053f4:	667a      	str	r2, [r7, #100]	; 0x64
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005402:	4649      	mov	r1, r9
 8005404:	008b      	lsls	r3, r1, #2
 8005406:	4641      	mov	r1, r8
 8005408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540c:	4641      	mov	r1, r8
 800540e:	008a      	lsls	r2, r1, #2
 8005410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005414:	f7fb fc48 	bl	8000ca8 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <UART_SetConfig+0x4e4>)
 800541e:	fba3 1302 	umull	r1, r3, r3, r2
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2164      	movs	r1, #100	; 0x64
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	3332      	adds	r3, #50	; 0x32
 8005430:	4a08      	ldr	r2, [pc, #32]	; (8005454 <UART_SetConfig+0x4e4>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4422      	add	r2, r4
 8005444:	609a      	str	r2, [r3, #8]
}
 8005446:	bf00      	nop
 8005448:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005452:	bf00      	nop
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000010 	.word	0x20000010

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f004 fc8c 	bl	8009d94 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	0800a3fc 	.word	0x0800a3fc
 80054a0:	0800a3fc 	.word	0x0800a3fc
 80054a4:	0800a3fc 	.word	0x0800a3fc
 80054a8:	0800a400 	.word	0x0800a400

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c2:	4291      	cmp	r1, r2
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <memset>:
 80054c8:	4402      	add	r2, r0
 80054ca:	4603      	mov	r3, r0
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d100      	bne.n	80054d2 <memset+0xa>
 80054d0:	4770      	bx	lr
 80054d2:	f803 1b01 	strb.w	r1, [r3], #1
 80054d6:	e7f9      	b.n	80054cc <memset+0x4>

080054d8 <__cvt>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	ec55 4b10 	vmov	r4, r5, d0
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	460e      	mov	r6, r1
 80054e4:	4619      	mov	r1, r3
 80054e6:	462b      	mov	r3, r5
 80054e8:	bfbb      	ittet	lt
 80054ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054ee:	461d      	movlt	r5, r3
 80054f0:	2300      	movge	r3, #0
 80054f2:	232d      	movlt	r3, #45	; 0x2d
 80054f4:	700b      	strb	r3, [r1, #0]
 80054f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054fc:	4691      	mov	r9, r2
 80054fe:	f023 0820 	bic.w	r8, r3, #32
 8005502:	bfbc      	itt	lt
 8005504:	4622      	movlt	r2, r4
 8005506:	4614      	movlt	r4, r2
 8005508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800550c:	d005      	beq.n	800551a <__cvt+0x42>
 800550e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005512:	d100      	bne.n	8005516 <__cvt+0x3e>
 8005514:	3601      	adds	r6, #1
 8005516:	2102      	movs	r1, #2
 8005518:	e000      	b.n	800551c <__cvt+0x44>
 800551a:	2103      	movs	r1, #3
 800551c:	ab03      	add	r3, sp, #12
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	ab02      	add	r3, sp, #8
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	ec45 4b10 	vmov	d0, r4, r5
 8005528:	4653      	mov	r3, sl
 800552a:	4632      	mov	r2, r6
 800552c:	f001 fe6c 	bl	8007208 <_dtoa_r>
 8005530:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005534:	4607      	mov	r7, r0
 8005536:	d102      	bne.n	800553e <__cvt+0x66>
 8005538:	f019 0f01 	tst.w	r9, #1
 800553c:	d022      	beq.n	8005584 <__cvt+0xac>
 800553e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005542:	eb07 0906 	add.w	r9, r7, r6
 8005546:	d110      	bne.n	800556a <__cvt+0x92>
 8005548:	783b      	ldrb	r3, [r7, #0]
 800554a:	2b30      	cmp	r3, #48	; 0x30
 800554c:	d10a      	bne.n	8005564 <__cvt+0x8c>
 800554e:	2200      	movs	r2, #0
 8005550:	2300      	movs	r3, #0
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f7fb fac7 	bl	8000ae8 <__aeabi_dcmpeq>
 800555a:	b918      	cbnz	r0, 8005564 <__cvt+0x8c>
 800555c:	f1c6 0601 	rsb	r6, r6, #1
 8005560:	f8ca 6000 	str.w	r6, [sl]
 8005564:	f8da 3000 	ldr.w	r3, [sl]
 8005568:	4499      	add	r9, r3
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fb fab9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005576:	b108      	cbz	r0, 800557c <__cvt+0xa4>
 8005578:	f8cd 900c 	str.w	r9, [sp, #12]
 800557c:	2230      	movs	r2, #48	; 0x30
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	454b      	cmp	r3, r9
 8005582:	d307      	bcc.n	8005594 <__cvt+0xbc>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005588:	1bdb      	subs	r3, r3, r7
 800558a:	4638      	mov	r0, r7
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	b004      	add	sp, #16
 8005590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	9103      	str	r1, [sp, #12]
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e7f0      	b.n	800557e <__cvt+0xa6>

0800559c <__exponent>:
 800559c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559e:	4603      	mov	r3, r0
 80055a0:	2900      	cmp	r1, #0
 80055a2:	bfb8      	it	lt
 80055a4:	4249      	neglt	r1, r1
 80055a6:	f803 2b02 	strb.w	r2, [r3], #2
 80055aa:	bfb4      	ite	lt
 80055ac:	222d      	movlt	r2, #45	; 0x2d
 80055ae:	222b      	movge	r2, #43	; 0x2b
 80055b0:	2909      	cmp	r1, #9
 80055b2:	7042      	strb	r2, [r0, #1]
 80055b4:	dd2a      	ble.n	800560c <__exponent+0x70>
 80055b6:	f10d 0407 	add.w	r4, sp, #7
 80055ba:	46a4      	mov	ip, r4
 80055bc:	270a      	movs	r7, #10
 80055be:	46a6      	mov	lr, r4
 80055c0:	460a      	mov	r2, r1
 80055c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80055c6:	fb07 1516 	mls	r5, r7, r6, r1
 80055ca:	3530      	adds	r5, #48	; 0x30
 80055cc:	2a63      	cmp	r2, #99	; 0x63
 80055ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80055d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055d6:	4631      	mov	r1, r6
 80055d8:	dcf1      	bgt.n	80055be <__exponent+0x22>
 80055da:	3130      	adds	r1, #48	; 0x30
 80055dc:	f1ae 0502 	sub.w	r5, lr, #2
 80055e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055e4:	1c44      	adds	r4, r0, #1
 80055e6:	4629      	mov	r1, r5
 80055e8:	4561      	cmp	r1, ip
 80055ea:	d30a      	bcc.n	8005602 <__exponent+0x66>
 80055ec:	f10d 0209 	add.w	r2, sp, #9
 80055f0:	eba2 020e 	sub.w	r2, r2, lr
 80055f4:	4565      	cmp	r5, ip
 80055f6:	bf88      	it	hi
 80055f8:	2200      	movhi	r2, #0
 80055fa:	4413      	add	r3, r2
 80055fc:	1a18      	subs	r0, r3, r0
 80055fe:	b003      	add	sp, #12
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005606:	f804 2f01 	strb.w	r2, [r4, #1]!
 800560a:	e7ed      	b.n	80055e8 <__exponent+0x4c>
 800560c:	2330      	movs	r3, #48	; 0x30
 800560e:	3130      	adds	r1, #48	; 0x30
 8005610:	7083      	strb	r3, [r0, #2]
 8005612:	70c1      	strb	r1, [r0, #3]
 8005614:	1d03      	adds	r3, r0, #4
 8005616:	e7f1      	b.n	80055fc <__exponent+0x60>

08005618 <_printf_float>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	ed2d 8b02 	vpush	{d8}
 8005620:	b08d      	sub	sp, #52	; 0x34
 8005622:	460c      	mov	r4, r1
 8005624:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005628:	4616      	mov	r6, r2
 800562a:	461f      	mov	r7, r3
 800562c:	4605      	mov	r5, r0
 800562e:	f003 f8ff 	bl	8008830 <_localeconv_r>
 8005632:	f8d0 a000 	ldr.w	sl, [r0]
 8005636:	4650      	mov	r0, sl
 8005638:	f7fa fdda 	bl	80001f0 <strlen>
 800563c:	2300      	movs	r3, #0
 800563e:	930a      	str	r3, [sp, #40]	; 0x28
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	9305      	str	r3, [sp, #20]
 8005644:	f8d8 3000 	ldr.w	r3, [r8]
 8005648:	f894 b018 	ldrb.w	fp, [r4, #24]
 800564c:	3307      	adds	r3, #7
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	f103 0208 	add.w	r2, r3, #8
 8005656:	f8c8 2000 	str.w	r2, [r8]
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005662:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800566a:	9307      	str	r3, [sp, #28]
 800566c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005670:	ee08 0a10 	vmov	s16, r0
 8005674:	4b9f      	ldr	r3, [pc, #636]	; (80058f4 <_printf_float+0x2dc>)
 8005676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800567a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567e:	f7fb fa65 	bl	8000b4c <__aeabi_dcmpun>
 8005682:	bb88      	cbnz	r0, 80056e8 <_printf_float+0xd0>
 8005684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005688:	4b9a      	ldr	r3, [pc, #616]	; (80058f4 <_printf_float+0x2dc>)
 800568a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568e:	f7fb fa3f 	bl	8000b10 <__aeabi_dcmple>
 8005692:	bb48      	cbnz	r0, 80056e8 <_printf_float+0xd0>
 8005694:	2200      	movs	r2, #0
 8005696:	2300      	movs	r3, #0
 8005698:	4640      	mov	r0, r8
 800569a:	4649      	mov	r1, r9
 800569c:	f7fb fa2e 	bl	8000afc <__aeabi_dcmplt>
 80056a0:	b110      	cbz	r0, 80056a8 <_printf_float+0x90>
 80056a2:	232d      	movs	r3, #45	; 0x2d
 80056a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a8:	4b93      	ldr	r3, [pc, #588]	; (80058f8 <_printf_float+0x2e0>)
 80056aa:	4894      	ldr	r0, [pc, #592]	; (80058fc <_printf_float+0x2e4>)
 80056ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056b0:	bf94      	ite	ls
 80056b2:	4698      	movls	r8, r3
 80056b4:	4680      	movhi	r8, r0
 80056b6:	2303      	movs	r3, #3
 80056b8:	6123      	str	r3, [r4, #16]
 80056ba:	9b05      	ldr	r3, [sp, #20]
 80056bc:	f023 0204 	bic.w	r2, r3, #4
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	f04f 0900 	mov.w	r9, #0
 80056c6:	9700      	str	r7, [sp, #0]
 80056c8:	4633      	mov	r3, r6
 80056ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f9d8 	bl	8005a84 <_printf_common>
 80056d4:	3001      	adds	r0, #1
 80056d6:	f040 8090 	bne.w	80057fa <_printf_float+0x1e2>
 80056da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056de:	b00d      	add	sp, #52	; 0x34
 80056e0:	ecbd 8b02 	vpop	{d8}
 80056e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fb fa2c 	bl	8000b4c <__aeabi_dcmpun>
 80056f4:	b140      	cbz	r0, 8005708 <_printf_float+0xf0>
 80056f6:	464b      	mov	r3, r9
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bfbc      	itt	lt
 80056fc:	232d      	movlt	r3, #45	; 0x2d
 80056fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005702:	487f      	ldr	r0, [pc, #508]	; (8005900 <_printf_float+0x2e8>)
 8005704:	4b7f      	ldr	r3, [pc, #508]	; (8005904 <_printf_float+0x2ec>)
 8005706:	e7d1      	b.n	80056ac <_printf_float+0x94>
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800570e:	9206      	str	r2, [sp, #24]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	d13f      	bne.n	8005794 <_printf_float+0x17c>
 8005714:	2306      	movs	r3, #6
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	9b05      	ldr	r3, [sp, #20]
 800571a:	6861      	ldr	r1, [r4, #4]
 800571c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005720:	2300      	movs	r3, #0
 8005722:	9303      	str	r3, [sp, #12]
 8005724:	ab0a      	add	r3, sp, #40	; 0x28
 8005726:	e9cd b301 	strd	fp, r3, [sp, #4]
 800572a:	ab09      	add	r3, sp, #36	; 0x24
 800572c:	ec49 8b10 	vmov	d0, r8, r9
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005738:	4628      	mov	r0, r5
 800573a:	f7ff fecd 	bl	80054d8 <__cvt>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005742:	2b47      	cmp	r3, #71	; 0x47
 8005744:	4680      	mov	r8, r0
 8005746:	d108      	bne.n	800575a <_printf_float+0x142>
 8005748:	1cc8      	adds	r0, r1, #3
 800574a:	db02      	blt.n	8005752 <_printf_float+0x13a>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	4299      	cmp	r1, r3
 8005750:	dd41      	ble.n	80057d6 <_printf_float+0x1be>
 8005752:	f1ab 0b02 	sub.w	fp, fp, #2
 8005756:	fa5f fb8b 	uxtb.w	fp, fp
 800575a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800575e:	d820      	bhi.n	80057a2 <_printf_float+0x18a>
 8005760:	3901      	subs	r1, #1
 8005762:	465a      	mov	r2, fp
 8005764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005768:	9109      	str	r1, [sp, #36]	; 0x24
 800576a:	f7ff ff17 	bl	800559c <__exponent>
 800576e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005770:	1813      	adds	r3, r2, r0
 8005772:	2a01      	cmp	r2, #1
 8005774:	4681      	mov	r9, r0
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	dc02      	bgt.n	8005780 <_printf_float+0x168>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	07d2      	lsls	r2, r2, #31
 800577e:	d501      	bpl.n	8005784 <_printf_float+0x16c>
 8005780:	3301      	adds	r3, #1
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005788:	2b00      	cmp	r3, #0
 800578a:	d09c      	beq.n	80056c6 <_printf_float+0xae>
 800578c:	232d      	movs	r3, #45	; 0x2d
 800578e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005792:	e798      	b.n	80056c6 <_printf_float+0xae>
 8005794:	9a06      	ldr	r2, [sp, #24]
 8005796:	2a47      	cmp	r2, #71	; 0x47
 8005798:	d1be      	bne.n	8005718 <_printf_float+0x100>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1bc      	bne.n	8005718 <_printf_float+0x100>
 800579e:	2301      	movs	r3, #1
 80057a0:	e7b9      	b.n	8005716 <_printf_float+0xfe>
 80057a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057a6:	d118      	bne.n	80057da <_printf_float+0x1c2>
 80057a8:	2900      	cmp	r1, #0
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	dd0b      	ble.n	80057c6 <_printf_float+0x1ae>
 80057ae:	6121      	str	r1, [r4, #16]
 80057b0:	b913      	cbnz	r3, 80057b8 <_printf_float+0x1a0>
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	07d0      	lsls	r0, r2, #31
 80057b6:	d502      	bpl.n	80057be <_printf_float+0x1a6>
 80057b8:	3301      	adds	r3, #1
 80057ba:	440b      	add	r3, r1
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	65a1      	str	r1, [r4, #88]	; 0x58
 80057c0:	f04f 0900 	mov.w	r9, #0
 80057c4:	e7de      	b.n	8005784 <_printf_float+0x16c>
 80057c6:	b913      	cbnz	r3, 80057ce <_printf_float+0x1b6>
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	07d2      	lsls	r2, r2, #31
 80057cc:	d501      	bpl.n	80057d2 <_printf_float+0x1ba>
 80057ce:	3302      	adds	r3, #2
 80057d0:	e7f4      	b.n	80057bc <_printf_float+0x1a4>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e7f2      	b.n	80057bc <_printf_float+0x1a4>
 80057d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057dc:	4299      	cmp	r1, r3
 80057de:	db05      	blt.n	80057ec <_printf_float+0x1d4>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	6121      	str	r1, [r4, #16]
 80057e4:	07d8      	lsls	r0, r3, #31
 80057e6:	d5ea      	bpl.n	80057be <_printf_float+0x1a6>
 80057e8:	1c4b      	adds	r3, r1, #1
 80057ea:	e7e7      	b.n	80057bc <_printf_float+0x1a4>
 80057ec:	2900      	cmp	r1, #0
 80057ee:	bfd4      	ite	le
 80057f0:	f1c1 0202 	rsble	r2, r1, #2
 80057f4:	2201      	movgt	r2, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	e7e0      	b.n	80057bc <_printf_float+0x1a4>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	055a      	lsls	r2, r3, #21
 80057fe:	d407      	bmi.n	8005810 <_printf_float+0x1f8>
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	4642      	mov	r2, r8
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	d12c      	bne.n	8005868 <_printf_float+0x250>
 800580e:	e764      	b.n	80056da <_printf_float+0xc2>
 8005810:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005814:	f240 80e0 	bls.w	80059d8 <_printf_float+0x3c0>
 8005818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800581c:	2200      	movs	r2, #0
 800581e:	2300      	movs	r3, #0
 8005820:	f7fb f962 	bl	8000ae8 <__aeabi_dcmpeq>
 8005824:	2800      	cmp	r0, #0
 8005826:	d034      	beq.n	8005892 <_printf_float+0x27a>
 8005828:	4a37      	ldr	r2, [pc, #220]	; (8005908 <_printf_float+0x2f0>)
 800582a:	2301      	movs	r3, #1
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f af51 	beq.w	80056da <_printf_float+0xc2>
 8005838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800583c:	429a      	cmp	r2, r3
 800583e:	db02      	blt.n	8005846 <_printf_float+0x22e>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	07d8      	lsls	r0, r3, #31
 8005844:	d510      	bpl.n	8005868 <_printf_float+0x250>
 8005846:	ee18 3a10 	vmov	r3, s16
 800584a:	4652      	mov	r2, sl
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f af41 	beq.w	80056da <_printf_float+0xc2>
 8005858:	f04f 0800 	mov.w	r8, #0
 800585c:	f104 091a 	add.w	r9, r4, #26
 8005860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	4543      	cmp	r3, r8
 8005866:	dc09      	bgt.n	800587c <_printf_float+0x264>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	079b      	lsls	r3, r3, #30
 800586c:	f100 8105 	bmi.w	8005a7a <_printf_float+0x462>
 8005870:	68e0      	ldr	r0, [r4, #12]
 8005872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005874:	4298      	cmp	r0, r3
 8005876:	bfb8      	it	lt
 8005878:	4618      	movlt	r0, r3
 800587a:	e730      	b.n	80056de <_printf_float+0xc6>
 800587c:	2301      	movs	r3, #1
 800587e:	464a      	mov	r2, r9
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	47b8      	blx	r7
 8005886:	3001      	adds	r0, #1
 8005888:	f43f af27 	beq.w	80056da <_printf_float+0xc2>
 800588c:	f108 0801 	add.w	r8, r8, #1
 8005890:	e7e6      	b.n	8005860 <_printf_float+0x248>
 8005892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	dc39      	bgt.n	800590c <_printf_float+0x2f4>
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <_printf_float+0x2f0>)
 800589a:	2301      	movs	r3, #1
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f af19 	beq.w	80056da <_printf_float+0xc2>
 80058a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d102      	bne.n	80058b6 <_printf_float+0x29e>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	07d9      	lsls	r1, r3, #31
 80058b4:	d5d8      	bpl.n	8005868 <_printf_float+0x250>
 80058b6:	ee18 3a10 	vmov	r3, s16
 80058ba:	4652      	mov	r2, sl
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	f43f af09 	beq.w	80056da <_printf_float+0xc2>
 80058c8:	f04f 0900 	mov.w	r9, #0
 80058cc:	f104 0a1a 	add.w	sl, r4, #26
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	425b      	negs	r3, r3
 80058d4:	454b      	cmp	r3, r9
 80058d6:	dc01      	bgt.n	80058dc <_printf_float+0x2c4>
 80058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058da:	e792      	b.n	8005802 <_printf_float+0x1ea>
 80058dc:	2301      	movs	r3, #1
 80058de:	4652      	mov	r2, sl
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f aef7 	beq.w	80056da <_printf_float+0xc2>
 80058ec:	f109 0901 	add.w	r9, r9, #1
 80058f0:	e7ee      	b.n	80058d0 <_printf_float+0x2b8>
 80058f2:	bf00      	nop
 80058f4:	7fefffff 	.word	0x7fefffff
 80058f8:	08009f48 	.word	0x08009f48
 80058fc:	08009f4c 	.word	0x08009f4c
 8005900:	08009f54 	.word	0x08009f54
 8005904:	08009f50 	.word	0x08009f50
 8005908:	08009f58 	.word	0x08009f58
 800590c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800590e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005910:	429a      	cmp	r2, r3
 8005912:	bfa8      	it	ge
 8005914:	461a      	movge	r2, r3
 8005916:	2a00      	cmp	r2, #0
 8005918:	4691      	mov	r9, r2
 800591a:	dc37      	bgt.n	800598c <_printf_float+0x374>
 800591c:	f04f 0b00 	mov.w	fp, #0
 8005920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005924:	f104 021a 	add.w	r2, r4, #26
 8005928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	eba3 0309 	sub.w	r3, r3, r9
 8005930:	455b      	cmp	r3, fp
 8005932:	dc33      	bgt.n	800599c <_printf_float+0x384>
 8005934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005938:	429a      	cmp	r2, r3
 800593a:	db3b      	blt.n	80059b4 <_printf_float+0x39c>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07da      	lsls	r2, r3, #31
 8005940:	d438      	bmi.n	80059b4 <_printf_float+0x39c>
 8005942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005944:	9a05      	ldr	r2, [sp, #20]
 8005946:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005948:	1a9a      	subs	r2, r3, r2
 800594a:	eba3 0901 	sub.w	r9, r3, r1
 800594e:	4591      	cmp	r9, r2
 8005950:	bfa8      	it	ge
 8005952:	4691      	movge	r9, r2
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	dc35      	bgt.n	80059c6 <_printf_float+0x3ae>
 800595a:	f04f 0800 	mov.w	r8, #0
 800595e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005962:	f104 0a1a 	add.w	sl, r4, #26
 8005966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	eba3 0309 	sub.w	r3, r3, r9
 8005970:	4543      	cmp	r3, r8
 8005972:	f77f af79 	ble.w	8005868 <_printf_float+0x250>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	f43f aeaa 	beq.w	80056da <_printf_float+0xc2>
 8005986:	f108 0801 	add.w	r8, r8, #1
 800598a:	e7ec      	b.n	8005966 <_printf_float+0x34e>
 800598c:	4613      	mov	r3, r2
 800598e:	4631      	mov	r1, r6
 8005990:	4642      	mov	r2, r8
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	d1c0      	bne.n	800591c <_printf_float+0x304>
 800599a:	e69e      	b.n	80056da <_printf_float+0xc2>
 800599c:	2301      	movs	r3, #1
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	9205      	str	r2, [sp, #20]
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f ae97 	beq.w	80056da <_printf_float+0xc2>
 80059ac:	9a05      	ldr	r2, [sp, #20]
 80059ae:	f10b 0b01 	add.w	fp, fp, #1
 80059b2:	e7b9      	b.n	8005928 <_printf_float+0x310>
 80059b4:	ee18 3a10 	vmov	r3, s16
 80059b8:	4652      	mov	r2, sl
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	d1be      	bne.n	8005942 <_printf_float+0x32a>
 80059c4:	e689      	b.n	80056da <_printf_float+0xc2>
 80059c6:	9a05      	ldr	r2, [sp, #20]
 80059c8:	464b      	mov	r3, r9
 80059ca:	4442      	add	r2, r8
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	d1c1      	bne.n	800595a <_printf_float+0x342>
 80059d6:	e680      	b.n	80056da <_printf_float+0xc2>
 80059d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059da:	2a01      	cmp	r2, #1
 80059dc:	dc01      	bgt.n	80059e2 <_printf_float+0x3ca>
 80059de:	07db      	lsls	r3, r3, #31
 80059e0:	d538      	bpl.n	8005a54 <_printf_float+0x43c>
 80059e2:	2301      	movs	r3, #1
 80059e4:	4642      	mov	r2, r8
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f ae74 	beq.w	80056da <_printf_float+0xc2>
 80059f2:	ee18 3a10 	vmov	r3, s16
 80059f6:	4652      	mov	r2, sl
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f ae6b 	beq.w	80056da <_printf_float+0xc2>
 8005a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f7fb f86c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a10:	b9d8      	cbnz	r0, 8005a4a <_printf_float+0x432>
 8005a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a14:	f108 0201 	add.w	r2, r8, #1
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	d10e      	bne.n	8005a42 <_printf_float+0x42a>
 8005a24:	e659      	b.n	80056da <_printf_float+0xc2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4652      	mov	r2, sl
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f ae52 	beq.w	80056da <_printf_float+0xc2>
 8005a36:	f108 0801 	add.w	r8, r8, #1
 8005a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	4543      	cmp	r3, r8
 8005a40:	dcf1      	bgt.n	8005a26 <_printf_float+0x40e>
 8005a42:	464b      	mov	r3, r9
 8005a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a48:	e6dc      	b.n	8005804 <_printf_float+0x1ec>
 8005a4a:	f04f 0800 	mov.w	r8, #0
 8005a4e:	f104 0a1a 	add.w	sl, r4, #26
 8005a52:	e7f2      	b.n	8005a3a <_printf_float+0x422>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4642      	mov	r2, r8
 8005a58:	e7df      	b.n	8005a1a <_printf_float+0x402>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	464a      	mov	r2, r9
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b8      	blx	r7
 8005a64:	3001      	adds	r0, #1
 8005a66:	f43f ae38 	beq.w	80056da <_printf_float+0xc2>
 8005a6a:	f108 0801 	add.w	r8, r8, #1
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a72:	1a5b      	subs	r3, r3, r1
 8005a74:	4543      	cmp	r3, r8
 8005a76:	dcf0      	bgt.n	8005a5a <_printf_float+0x442>
 8005a78:	e6fa      	b.n	8005870 <_printf_float+0x258>
 8005a7a:	f04f 0800 	mov.w	r8, #0
 8005a7e:	f104 0919 	add.w	r9, r4, #25
 8005a82:	e7f4      	b.n	8005a6e <_printf_float+0x456>

08005a84 <_printf_common>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	4616      	mov	r6, r2
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	688a      	ldr	r2, [r1, #8]
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_printf_common+0x26>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	0699      	lsls	r1, r3, #26
 8005aae:	bf42      	ittt	mi
 8005ab0:	6833      	ldrmi	r3, [r6, #0]
 8005ab2:	3302      	addmi	r3, #2
 8005ab4:	6033      	strmi	r3, [r6, #0]
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	f015 0506 	ands.w	r5, r5, #6
 8005abc:	d106      	bne.n	8005acc <_printf_common+0x48>
 8005abe:	f104 0a19 	add.w	sl, r4, #25
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	6832      	ldr	r2, [r6, #0]
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dc26      	bgt.n	8005b1a <_printf_common+0x96>
 8005acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad0:	1e13      	subs	r3, r2, #0
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	bf18      	it	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	0692      	lsls	r2, r2, #26
 8005ada:	d42b      	bmi.n	8005b34 <_printf_common+0xb0>
 8005adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d01e      	beq.n	8005b28 <_printf_common+0xa4>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	68e5      	ldr	r5, [r4, #12]
 8005aee:	6832      	ldr	r2, [r6, #0]
 8005af0:	f003 0306 	and.w	r3, r3, #6
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	bf08      	it	eq
 8005af8:	1aad      	subeq	r5, r5, r2
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	bf0c      	ite	eq
 8005b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b04:	2500      	movne	r5, #0
 8005b06:	4293      	cmp	r3, r2
 8005b08:	bfc4      	itt	gt
 8005b0a:	1a9b      	subgt	r3, r3, r2
 8005b0c:	18ed      	addgt	r5, r5, r3
 8005b0e:	2600      	movs	r6, #0
 8005b10:	341a      	adds	r4, #26
 8005b12:	42b5      	cmp	r5, r6
 8005b14:	d11a      	bne.n	8005b4c <_printf_common+0xc8>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e008      	b.n	8005b2c <_printf_common+0xa8>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4638      	mov	r0, r7
 8005b22:	47c0      	blx	r8
 8005b24:	3001      	adds	r0, #1
 8005b26:	d103      	bne.n	8005b30 <_printf_common+0xac>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b30:	3501      	adds	r5, #1
 8005b32:	e7c6      	b.n	8005ac2 <_printf_common+0x3e>
 8005b34:	18e1      	adds	r1, r4, r3
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	2030      	movs	r0, #48	; 0x30
 8005b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b3e:	4422      	add	r2, r4
 8005b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b48:	3302      	adds	r3, #2
 8005b4a:	e7c7      	b.n	8005adc <_printf_common+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d0e6      	beq.n	8005b28 <_printf_common+0xa4>
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7d9      	b.n	8005b12 <_printf_common+0x8e>
	...

08005b60 <_printf_i>:
 8005b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	7e0f      	ldrb	r7, [r1, #24]
 8005b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b68:	2f78      	cmp	r7, #120	; 0x78
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	469a      	mov	sl, r3
 8005b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b76:	d807      	bhi.n	8005b88 <_printf_i+0x28>
 8005b78:	2f62      	cmp	r7, #98	; 0x62
 8005b7a:	d80a      	bhi.n	8005b92 <_printf_i+0x32>
 8005b7c:	2f00      	cmp	r7, #0
 8005b7e:	f000 80d8 	beq.w	8005d32 <_printf_i+0x1d2>
 8005b82:	2f58      	cmp	r7, #88	; 0x58
 8005b84:	f000 80a3 	beq.w	8005cce <_printf_i+0x16e>
 8005b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b90:	e03a      	b.n	8005c08 <_printf_i+0xa8>
 8005b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b96:	2b15      	cmp	r3, #21
 8005b98:	d8f6      	bhi.n	8005b88 <_printf_i+0x28>
 8005b9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ba0 <_printf_i+0x40>)
 8005b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005b89 	.word	0x08005b89
 8005bac:	08005b89 	.word	0x08005b89
 8005bb0:	08005b89 	.word	0x08005b89
 8005bb4:	08005b89 	.word	0x08005b89
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005b89 	.word	0x08005b89
 8005bc0:	08005b89 	.word	0x08005b89
 8005bc4:	08005b89 	.word	0x08005b89
 8005bc8:	08005b89 	.word	0x08005b89
 8005bcc:	08005d19 	.word	0x08005d19
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005cfb 	.word	0x08005cfb
 8005bd8:	08005b89 	.word	0x08005b89
 8005bdc:	08005b89 	.word	0x08005b89
 8005be0:	08005d3b 	.word	0x08005d3b
 8005be4:	08005b89 	.word	0x08005b89
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005b89 	.word	0x08005b89
 8005bf0:	08005b89 	.word	0x08005b89
 8005bf4:	08005d03 	.word	0x08005d03
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	602a      	str	r2, [r5, #0]
 8005c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a3      	b.n	8005d54 <_printf_i+0x1f4>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	6829      	ldr	r1, [r5, #0]
 8005c10:	0606      	lsls	r6, r0, #24
 8005c12:	f101 0304 	add.w	r3, r1, #4
 8005c16:	d50a      	bpl.n	8005c2e <_printf_i+0xce>
 8005c18:	680e      	ldr	r6, [r1, #0]
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	2e00      	cmp	r6, #0
 8005c1e:	da03      	bge.n	8005c28 <_printf_i+0xc8>
 8005c20:	232d      	movs	r3, #45	; 0x2d
 8005c22:	4276      	negs	r6, r6
 8005c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c28:	485e      	ldr	r0, [pc, #376]	; (8005da4 <_printf_i+0x244>)
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	e019      	b.n	8005c62 <_printf_i+0x102>
 8005c2e:	680e      	ldr	r6, [r1, #0]
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c36:	bf18      	it	ne
 8005c38:	b236      	sxthne	r6, r6
 8005c3a:	e7ef      	b.n	8005c1c <_printf_i+0xbc>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	0601      	lsls	r1, r0, #24
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0xec>
 8005c48:	681e      	ldr	r6, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0xf2>
 8005c4c:	0646      	lsls	r6, r0, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0xe8>
 8005c50:	881e      	ldrh	r6, [r3, #0]
 8005c52:	4854      	ldr	r0, [pc, #336]	; (8005da4 <_printf_i+0x244>)
 8005c54:	2f6f      	cmp	r7, #111	; 0x6f
 8005c56:	bf0c      	ite	eq
 8005c58:	2308      	moveq	r3, #8
 8005c5a:	230a      	movne	r3, #10
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c62:	6865      	ldr	r5, [r4, #4]
 8005c64:	60a5      	str	r5, [r4, #8]
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	bfa2      	ittt	ge
 8005c6a:	6821      	ldrge	r1, [r4, #0]
 8005c6c:	f021 0104 	bicge.w	r1, r1, #4
 8005c70:	6021      	strge	r1, [r4, #0]
 8005c72:	b90e      	cbnz	r6, 8005c78 <_printf_i+0x118>
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	d04d      	beq.n	8005d14 <_printf_i+0x1b4>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c82:	5dc7      	ldrb	r7, [r0, r7]
 8005c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c88:	4637      	mov	r7, r6
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	d9f4      	bls.n	8005c7a <_printf_i+0x11a>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <_printf_i+0x14c>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07de      	lsls	r6, r3, #31
 8005c98:	d508      	bpl.n	8005cac <_printf_i+0x14c>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	bfde      	ittt	le
 8005ca2:	2330      	movle	r3, #48	; 0x30
 8005ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ca8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cac:	1b52      	subs	r2, r2, r5
 8005cae:	6122      	str	r2, [r4, #16]
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	aa03      	add	r2, sp, #12
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fee2 	bl	8005a84 <_printf_common>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d14c      	bne.n	8005d5e <_printf_i+0x1fe>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc8:	b004      	add	sp, #16
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	4835      	ldr	r0, [pc, #212]	; (8005da4 <_printf_i+0x244>)
 8005cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cd4:	6829      	ldr	r1, [r5, #0]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cdc:	6029      	str	r1, [r5, #0]
 8005cde:	061d      	lsls	r5, r3, #24
 8005ce0:	d514      	bpl.n	8005d0c <_printf_i+0x1ac>
 8005ce2:	07df      	lsls	r7, r3, #31
 8005ce4:	bf44      	itt	mi
 8005ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cea:	6023      	strmi	r3, [r4, #0]
 8005cec:	b91e      	cbnz	r6, 8005cf6 <_printf_i+0x196>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f023 0320 	bic.w	r3, r3, #32
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	2310      	movs	r3, #16
 8005cf8:	e7b0      	b.n	8005c5c <_printf_i+0xfc>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	f043 0320 	orr.w	r3, r3, #32
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	2378      	movs	r3, #120	; 0x78
 8005d04:	4828      	ldr	r0, [pc, #160]	; (8005da8 <_printf_i+0x248>)
 8005d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d0a:	e7e3      	b.n	8005cd4 <_printf_i+0x174>
 8005d0c:	0659      	lsls	r1, r3, #25
 8005d0e:	bf48      	it	mi
 8005d10:	b2b6      	uxthmi	r6, r6
 8005d12:	e7e6      	b.n	8005ce2 <_printf_i+0x182>
 8005d14:	4615      	mov	r5, r2
 8005d16:	e7bb      	b.n	8005c90 <_printf_i+0x130>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	6826      	ldr	r6, [r4, #0]
 8005d1c:	6961      	ldr	r1, [r4, #20]
 8005d1e:	1d18      	adds	r0, r3, #4
 8005d20:	6028      	str	r0, [r5, #0]
 8005d22:	0635      	lsls	r5, r6, #24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0x1cc>
 8005d28:	6019      	str	r1, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0x1d2>
 8005d2c:	0670      	lsls	r0, r6, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0x1c8>
 8005d30:	8019      	strh	r1, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	4615      	mov	r5, r2
 8005d38:	e7ba      	b.n	8005cb0 <_printf_i+0x150>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	602a      	str	r2, [r5, #0]
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4628      	mov	r0, r5
 8005d48:	f7fa fa5a 	bl	8000200 <memchr>
 8005d4c:	b108      	cbz	r0, 8005d52 <_printf_i+0x1f2>
 8005d4e:	1b40      	subs	r0, r0, r5
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	e7a8      	b.n	8005cb0 <_printf_i+0x150>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	462a      	mov	r2, r5
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0ab      	beq.n	8005cc4 <_printf_i+0x164>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d413      	bmi.n	8005d9a <_printf_i+0x23a>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e7a4      	b.n	8005cc8 <_printf_i+0x168>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d09b      	beq.n	8005cc4 <_printf_i+0x164>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	9903      	ldr	r1, [sp, #12]
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dcf2      	bgt.n	8005d7e <_printf_i+0x21e>
 8005d98:	e7eb      	b.n	8005d72 <_printf_i+0x212>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	f104 0619 	add.w	r6, r4, #25
 8005da0:	e7f5      	b.n	8005d8e <_printf_i+0x22e>
 8005da2:	bf00      	nop
 8005da4:	08009f5a 	.word	0x08009f5a
 8005da8:	08009f6b 	.word	0x08009f6b

08005dac <_scanf_float>:
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	b087      	sub	sp, #28
 8005db2:	4617      	mov	r7, r2
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	688b      	ldr	r3, [r1, #8]
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005dbe:	bf83      	ittte	hi
 8005dc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005dc4:	195b      	addhi	r3, r3, r5
 8005dc6:	9302      	strhi	r3, [sp, #8]
 8005dc8:	2300      	movls	r3, #0
 8005dca:	bf86      	itte	hi
 8005dcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005dd0:	608b      	strhi	r3, [r1, #8]
 8005dd2:	9302      	strls	r3, [sp, #8]
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	2500      	movs	r5, #0
 8005dda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005dde:	f84b 3b1c 	str.w	r3, [fp], #28
 8005de2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005de6:	4680      	mov	r8, r0
 8005de8:	460c      	mov	r4, r1
 8005dea:	465e      	mov	r6, fp
 8005dec:	46aa      	mov	sl, r5
 8005dee:	46a9      	mov	r9, r5
 8005df0:	9501      	str	r5, [sp, #4]
 8005df2:	68a2      	ldr	r2, [r4, #8]
 8005df4:	b152      	cbz	r2, 8005e0c <_scanf_float+0x60>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8005dfc:	d864      	bhi.n	8005ec8 <_scanf_float+0x11c>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d83c      	bhi.n	8005e7c <_scanf_float+0xd0>
 8005e02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005e06:	b2c8      	uxtb	r0, r1
 8005e08:	280e      	cmp	r0, #14
 8005e0a:	d93a      	bls.n	8005e82 <_scanf_float+0xd6>
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	d003      	beq.n	8005e1a <_scanf_float+0x6e>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e1e:	f1ba 0f01 	cmp.w	sl, #1
 8005e22:	f200 8113 	bhi.w	800604c <_scanf_float+0x2a0>
 8005e26:	455e      	cmp	r6, fp
 8005e28:	f200 8105 	bhi.w	8006036 <_scanf_float+0x28a>
 8005e2c:	2501      	movs	r5, #1
 8005e2e:	4628      	mov	r0, r5
 8005e30:	b007      	add	sp, #28
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e3a:	2a0d      	cmp	r2, #13
 8005e3c:	d8e6      	bhi.n	8005e0c <_scanf_float+0x60>
 8005e3e:	a101      	add	r1, pc, #4	; (adr r1, 8005e44 <_scanf_float+0x98>)
 8005e40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e44:	08005f83 	.word	0x08005f83
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005e0d 	.word	0x08005e0d
 8005e54:	08005fe3 	.word	0x08005fe3
 8005e58:	08005fbb 	.word	0x08005fbb
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005f91 	.word	0x08005f91
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005e0d 	.word	0x08005e0d
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f49 	.word	0x08005f49
 8005e7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e80:	e7db      	b.n	8005e3a <_scanf_float+0x8e>
 8005e82:	290e      	cmp	r1, #14
 8005e84:	d8c2      	bhi.n	8005e0c <_scanf_float+0x60>
 8005e86:	a001      	add	r0, pc, #4	; (adr r0, 8005e8c <_scanf_float+0xe0>)
 8005e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e8c:	08005f3b 	.word	0x08005f3b
 8005e90:	08005e0d 	.word	0x08005e0d
 8005e94:	08005f3b 	.word	0x08005f3b
 8005e98:	08005fcf 	.word	0x08005fcf
 8005e9c:	08005e0d 	.word	0x08005e0d
 8005ea0:	08005ee9 	.word	0x08005ee9
 8005ea4:	08005f25 	.word	0x08005f25
 8005ea8:	08005f25 	.word	0x08005f25
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f25 	.word	0x08005f25
 8005eb4:	08005f25 	.word	0x08005f25
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8005eca:	d809      	bhi.n	8005ee0 <_scanf_float+0x134>
 8005ecc:	2b60      	cmp	r3, #96	; 0x60
 8005ece:	d8b2      	bhi.n	8005e36 <_scanf_float+0x8a>
 8005ed0:	2b54      	cmp	r3, #84	; 0x54
 8005ed2:	d077      	beq.n	8005fc4 <_scanf_float+0x218>
 8005ed4:	2b59      	cmp	r3, #89	; 0x59
 8005ed6:	d199      	bne.n	8005e0c <_scanf_float+0x60>
 8005ed8:	2d07      	cmp	r5, #7
 8005eda:	d197      	bne.n	8005e0c <_scanf_float+0x60>
 8005edc:	2508      	movs	r5, #8
 8005ede:	e029      	b.n	8005f34 <_scanf_float+0x188>
 8005ee0:	2b74      	cmp	r3, #116	; 0x74
 8005ee2:	d06f      	beq.n	8005fc4 <_scanf_float+0x218>
 8005ee4:	2b79      	cmp	r3, #121	; 0x79
 8005ee6:	e7f6      	b.n	8005ed6 <_scanf_float+0x12a>
 8005ee8:	6821      	ldr	r1, [r4, #0]
 8005eea:	05c8      	lsls	r0, r1, #23
 8005eec:	d51a      	bpl.n	8005f24 <_scanf_float+0x178>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ef4:	6021      	str	r1, [r4, #0]
 8005ef6:	f109 0901 	add.w	r9, r9, #1
 8005efa:	b11b      	cbz	r3, 8005f04 <_scanf_float+0x158>
 8005efc:	3b01      	subs	r3, #1
 8005efe:	3201      	adds	r2, #1
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	60a2      	str	r2, [r4, #8]
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	f340 8084 	ble.w	8006024 <_scanf_float+0x278>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	e766      	b.n	8005df2 <_scanf_float+0x46>
 8005f24:	eb1a 0f05 	cmn.w	sl, r5
 8005f28:	f47f af70 	bne.w	8005e0c <_scanf_float+0x60>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	f806 3b01 	strb.w	r3, [r6], #1
 8005f38:	e7e4      	b.n	8005f04 <_scanf_float+0x158>
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	0610      	lsls	r0, r2, #24
 8005f3e:	f57f af65 	bpl.w	8005e0c <_scanf_float+0x60>
 8005f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f46:	e7f4      	b.n	8005f32 <_scanf_float+0x186>
 8005f48:	f1ba 0f00 	cmp.w	sl, #0
 8005f4c:	d10e      	bne.n	8005f6c <_scanf_float+0x1c0>
 8005f4e:	f1b9 0f00 	cmp.w	r9, #0
 8005f52:	d10e      	bne.n	8005f72 <_scanf_float+0x1c6>
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f5e:	d108      	bne.n	8005f72 <_scanf_float+0x1c6>
 8005f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	f04f 0a01 	mov.w	sl, #1
 8005f6a:	e7e3      	b.n	8005f34 <_scanf_float+0x188>
 8005f6c:	f1ba 0f02 	cmp.w	sl, #2
 8005f70:	d055      	beq.n	800601e <_scanf_float+0x272>
 8005f72:	2d01      	cmp	r5, #1
 8005f74:	d002      	beq.n	8005f7c <_scanf_float+0x1d0>
 8005f76:	2d04      	cmp	r5, #4
 8005f78:	f47f af48 	bne.w	8005e0c <_scanf_float+0x60>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	b2ed      	uxtb	r5, r5
 8005f80:	e7d8      	b.n	8005f34 <_scanf_float+0x188>
 8005f82:	f1ba 0f01 	cmp.w	sl, #1
 8005f86:	f47f af41 	bne.w	8005e0c <_scanf_float+0x60>
 8005f8a:	f04f 0a02 	mov.w	sl, #2
 8005f8e:	e7d1      	b.n	8005f34 <_scanf_float+0x188>
 8005f90:	b97d      	cbnz	r5, 8005fb2 <_scanf_float+0x206>
 8005f92:	f1b9 0f00 	cmp.w	r9, #0
 8005f96:	f47f af3c 	bne.w	8005e12 <_scanf_float+0x66>
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fa4:	f47f af39 	bne.w	8005e1a <_scanf_float+0x6e>
 8005fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	2501      	movs	r5, #1
 8005fb0:	e7c0      	b.n	8005f34 <_scanf_float+0x188>
 8005fb2:	2d03      	cmp	r5, #3
 8005fb4:	d0e2      	beq.n	8005f7c <_scanf_float+0x1d0>
 8005fb6:	2d05      	cmp	r5, #5
 8005fb8:	e7de      	b.n	8005f78 <_scanf_float+0x1cc>
 8005fba:	2d02      	cmp	r5, #2
 8005fbc:	f47f af26 	bne.w	8005e0c <_scanf_float+0x60>
 8005fc0:	2503      	movs	r5, #3
 8005fc2:	e7b7      	b.n	8005f34 <_scanf_float+0x188>
 8005fc4:	2d06      	cmp	r5, #6
 8005fc6:	f47f af21 	bne.w	8005e0c <_scanf_float+0x60>
 8005fca:	2507      	movs	r5, #7
 8005fcc:	e7b2      	b.n	8005f34 <_scanf_float+0x188>
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	0591      	lsls	r1, r2, #22
 8005fd2:	f57f af1b 	bpl.w	8005e0c <_scanf_float+0x60>
 8005fd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005fda:	6022      	str	r2, [r4, #0]
 8005fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fe0:	e7a8      	b.n	8005f34 <_scanf_float+0x188>
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005fe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005fec:	d006      	beq.n	8005ffc <_scanf_float+0x250>
 8005fee:	0550      	lsls	r0, r2, #21
 8005ff0:	f57f af0c 	bpl.w	8005e0c <_scanf_float+0x60>
 8005ff4:	f1b9 0f00 	cmp.w	r9, #0
 8005ff8:	f43f af0f 	beq.w	8005e1a <_scanf_float+0x6e>
 8005ffc:	0591      	lsls	r1, r2, #22
 8005ffe:	bf58      	it	pl
 8006000:	9901      	ldrpl	r1, [sp, #4]
 8006002:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006006:	bf58      	it	pl
 8006008:	eba9 0101 	subpl.w	r1, r9, r1
 800600c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006010:	bf58      	it	pl
 8006012:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006016:	6022      	str	r2, [r4, #0]
 8006018:	f04f 0900 	mov.w	r9, #0
 800601c:	e78a      	b.n	8005f34 <_scanf_float+0x188>
 800601e:	f04f 0a03 	mov.w	sl, #3
 8006022:	e787      	b.n	8005f34 <_scanf_float+0x188>
 8006024:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006028:	4639      	mov	r1, r7
 800602a:	4640      	mov	r0, r8
 800602c:	4798      	blx	r3
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f aedf 	beq.w	8005df2 <_scanf_float+0x46>
 8006034:	e6ea      	b.n	8005e0c <_scanf_float+0x60>
 8006036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800603a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800603e:	463a      	mov	r2, r7
 8006040:	4640      	mov	r0, r8
 8006042:	4798      	blx	r3
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	3b01      	subs	r3, #1
 8006048:	6123      	str	r3, [r4, #16]
 800604a:	e6ec      	b.n	8005e26 <_scanf_float+0x7a>
 800604c:	1e6b      	subs	r3, r5, #1
 800604e:	2b06      	cmp	r3, #6
 8006050:	d825      	bhi.n	800609e <_scanf_float+0x2f2>
 8006052:	2d02      	cmp	r5, #2
 8006054:	d836      	bhi.n	80060c4 <_scanf_float+0x318>
 8006056:	455e      	cmp	r6, fp
 8006058:	f67f aee8 	bls.w	8005e2c <_scanf_float+0x80>
 800605c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006060:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006064:	463a      	mov	r2, r7
 8006066:	4640      	mov	r0, r8
 8006068:	4798      	blx	r3
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	3b01      	subs	r3, #1
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	e7f1      	b.n	8006056 <_scanf_float+0x2aa>
 8006072:	9802      	ldr	r0, [sp, #8]
 8006074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006078:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800607c:	9002      	str	r0, [sp, #8]
 800607e:	463a      	mov	r2, r7
 8006080:	4640      	mov	r0, r8
 8006082:	4798      	blx	r3
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	3b01      	subs	r3, #1
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800608e:	fa5f fa8a 	uxtb.w	sl, sl
 8006092:	f1ba 0f02 	cmp.w	sl, #2
 8006096:	d1ec      	bne.n	8006072 <_scanf_float+0x2c6>
 8006098:	3d03      	subs	r5, #3
 800609a:	b2ed      	uxtb	r5, r5
 800609c:	1b76      	subs	r6, r6, r5
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	05da      	lsls	r2, r3, #23
 80060a2:	d52f      	bpl.n	8006104 <_scanf_float+0x358>
 80060a4:	055b      	lsls	r3, r3, #21
 80060a6:	d510      	bpl.n	80060ca <_scanf_float+0x31e>
 80060a8:	455e      	cmp	r6, fp
 80060aa:	f67f aebf 	bls.w	8005e2c <_scanf_float+0x80>
 80060ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060b6:	463a      	mov	r2, r7
 80060b8:	4640      	mov	r0, r8
 80060ba:	4798      	blx	r3
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	3b01      	subs	r3, #1
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	e7f1      	b.n	80060a8 <_scanf_float+0x2fc>
 80060c4:	46aa      	mov	sl, r5
 80060c6:	9602      	str	r6, [sp, #8]
 80060c8:	e7df      	b.n	800608a <_scanf_float+0x2de>
 80060ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	2965      	cmp	r1, #101	; 0x65
 80060d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80060d6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	d00c      	beq.n	80060f8 <_scanf_float+0x34c>
 80060de:	2945      	cmp	r1, #69	; 0x45
 80060e0:	d00a      	beq.n	80060f8 <_scanf_float+0x34c>
 80060e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060e6:	463a      	mov	r2, r7
 80060e8:	4640      	mov	r0, r8
 80060ea:	4798      	blx	r3
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	1eb5      	subs	r5, r6, #2
 80060f6:	6123      	str	r3, [r4, #16]
 80060f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060fc:	463a      	mov	r2, r7
 80060fe:	4640      	mov	r0, r8
 8006100:	4798      	blx	r3
 8006102:	462e      	mov	r6, r5
 8006104:	6825      	ldr	r5, [r4, #0]
 8006106:	f015 0510 	ands.w	r5, r5, #16
 800610a:	d159      	bne.n	80061c0 <_scanf_float+0x414>
 800610c:	7035      	strb	r5, [r6, #0]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006118:	d11b      	bne.n	8006152 <_scanf_float+0x3a6>
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	454b      	cmp	r3, r9
 800611e:	eba3 0209 	sub.w	r2, r3, r9
 8006122:	d123      	bne.n	800616c <_scanf_float+0x3c0>
 8006124:	2200      	movs	r2, #0
 8006126:	4659      	mov	r1, fp
 8006128:	4640      	mov	r0, r8
 800612a:	f000 fe97 	bl	8006e5c <_strtod_r>
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	f012 0f02 	tst.w	r2, #2
 8006136:	ec57 6b10 	vmov	r6, r7, d0
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	d021      	beq.n	8006182 <_scanf_float+0x3d6>
 800613e:	9903      	ldr	r1, [sp, #12]
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	600a      	str	r2, [r1, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	e9c3 6700 	strd	r6, r7, [r3]
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60e3      	str	r3, [r4, #12]
 8006150:	e66d      	b.n	8005e2e <_scanf_float+0x82>
 8006152:	9b04      	ldr	r3, [sp, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0e5      	beq.n	8006124 <_scanf_float+0x378>
 8006158:	9905      	ldr	r1, [sp, #20]
 800615a:	230a      	movs	r3, #10
 800615c:	462a      	mov	r2, r5
 800615e:	3101      	adds	r1, #1
 8006160:	4640      	mov	r0, r8
 8006162:	f000 ff03 	bl	8006f6c <_strtol_r>
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	9e05      	ldr	r6, [sp, #20]
 800616a:	1ac2      	subs	r2, r0, r3
 800616c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006170:	429e      	cmp	r6, r3
 8006172:	bf28      	it	cs
 8006174:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006178:	4912      	ldr	r1, [pc, #72]	; (80061c4 <_scanf_float+0x418>)
 800617a:	4630      	mov	r0, r6
 800617c:	f000 f82c 	bl	80061d8 <siprintf>
 8006180:	e7d0      	b.n	8006124 <_scanf_float+0x378>
 8006182:	9903      	ldr	r1, [sp, #12]
 8006184:	f012 0f04 	tst.w	r2, #4
 8006188:	f103 0204 	add.w	r2, r3, #4
 800618c:	600a      	str	r2, [r1, #0]
 800618e:	d1d9      	bne.n	8006144 <_scanf_float+0x398>
 8006190:	f8d3 8000 	ldr.w	r8, [r3]
 8006194:	ee10 2a10 	vmov	r2, s0
 8006198:	ee10 0a10 	vmov	r0, s0
 800619c:	463b      	mov	r3, r7
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa fcd4 	bl	8000b4c <__aeabi_dcmpun>
 80061a4:	b128      	cbz	r0, 80061b2 <_scanf_float+0x406>
 80061a6:	4808      	ldr	r0, [pc, #32]	; (80061c8 <_scanf_float+0x41c>)
 80061a8:	f000 f810 	bl	80061cc <nanf>
 80061ac:	ed88 0a00 	vstr	s0, [r8]
 80061b0:	e7cb      	b.n	800614a <_scanf_float+0x39e>
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	f7fa fd27 	bl	8000c08 <__aeabi_d2f>
 80061ba:	f8c8 0000 	str.w	r0, [r8]
 80061be:	e7c4      	b.n	800614a <_scanf_float+0x39e>
 80061c0:	2500      	movs	r5, #0
 80061c2:	e634      	b.n	8005e2e <_scanf_float+0x82>
 80061c4:	08009f7c 	.word	0x08009f7c
 80061c8:	0800a3f0 	.word	0x0800a3f0

080061cc <nanf>:
 80061cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061d4 <nanf+0x8>
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	7fc00000 	.word	0x7fc00000

080061d8 <siprintf>:
 80061d8:	b40e      	push	{r1, r2, r3}
 80061da:	b500      	push	{lr}
 80061dc:	b09c      	sub	sp, #112	; 0x70
 80061de:	ab1d      	add	r3, sp, #116	; 0x74
 80061e0:	9002      	str	r0, [sp, #8]
 80061e2:	9006      	str	r0, [sp, #24]
 80061e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061e8:	4809      	ldr	r0, [pc, #36]	; (8006210 <siprintf+0x38>)
 80061ea:	9107      	str	r1, [sp, #28]
 80061ec:	9104      	str	r1, [sp, #16]
 80061ee:	4909      	ldr	r1, [pc, #36]	; (8006214 <siprintf+0x3c>)
 80061f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f4:	9105      	str	r1, [sp, #20]
 80061f6:	6800      	ldr	r0, [r0, #0]
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	a902      	add	r1, sp, #8
 80061fc:	f003 f9b2 	bl	8009564 <_svfiprintf_r>
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	b01c      	add	sp, #112	; 0x70
 8006208:	f85d eb04 	ldr.w	lr, [sp], #4
 800620c:	b003      	add	sp, #12
 800620e:	4770      	bx	lr
 8006210:	20000010 	.word	0x20000010
 8006214:	ffff0208 	.word	0xffff0208

08006218 <sulp>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4604      	mov	r4, r0
 800621c:	460d      	mov	r5, r1
 800621e:	ec45 4b10 	vmov	d0, r4, r5
 8006222:	4616      	mov	r6, r2
 8006224:	f002 fefc 	bl	8009020 <__ulp>
 8006228:	ec51 0b10 	vmov	r0, r1, d0
 800622c:	b17e      	cbz	r6, 800624e <sulp+0x36>
 800622e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006236:	2b00      	cmp	r3, #0
 8006238:	dd09      	ble.n	800624e <sulp+0x36>
 800623a:	051b      	lsls	r3, r3, #20
 800623c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006240:	2400      	movs	r4, #0
 8006242:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	f7fa f9e5 	bl	8000618 <__aeabi_dmul>
 800624e:	bd70      	pop	{r4, r5, r6, pc}

08006250 <_strtod_l>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	ed2d 8b02 	vpush	{d8}
 8006258:	b09d      	sub	sp, #116	; 0x74
 800625a:	461f      	mov	r7, r3
 800625c:	2300      	movs	r3, #0
 800625e:	9318      	str	r3, [sp, #96]	; 0x60
 8006260:	4ba2      	ldr	r3, [pc, #648]	; (80064ec <_strtod_l+0x29c>)
 8006262:	9213      	str	r2, [sp, #76]	; 0x4c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	9305      	str	r3, [sp, #20]
 8006268:	4604      	mov	r4, r0
 800626a:	4618      	mov	r0, r3
 800626c:	4688      	mov	r8, r1
 800626e:	f7f9 ffbf 	bl	80001f0 <strlen>
 8006272:	f04f 0a00 	mov.w	sl, #0
 8006276:	4605      	mov	r5, r0
 8006278:	f04f 0b00 	mov.w	fp, #0
 800627c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	2a2b      	cmp	r2, #43	; 0x2b
 8006286:	d04e      	beq.n	8006326 <_strtod_l+0xd6>
 8006288:	d83b      	bhi.n	8006302 <_strtod_l+0xb2>
 800628a:	2a0d      	cmp	r2, #13
 800628c:	d834      	bhi.n	80062f8 <_strtod_l+0xa8>
 800628e:	2a08      	cmp	r2, #8
 8006290:	d834      	bhi.n	80062fc <_strtod_l+0xac>
 8006292:	2a00      	cmp	r2, #0
 8006294:	d03e      	beq.n	8006314 <_strtod_l+0xc4>
 8006296:	2300      	movs	r3, #0
 8006298:	930a      	str	r3, [sp, #40]	; 0x28
 800629a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800629c:	7833      	ldrb	r3, [r6, #0]
 800629e:	2b30      	cmp	r3, #48	; 0x30
 80062a0:	f040 80b0 	bne.w	8006404 <_strtod_l+0x1b4>
 80062a4:	7873      	ldrb	r3, [r6, #1]
 80062a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062aa:	2b58      	cmp	r3, #88	; 0x58
 80062ac:	d168      	bne.n	8006380 <_strtod_l+0x130>
 80062ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	ab18      	add	r3, sp, #96	; 0x60
 80062b4:	9702      	str	r7, [sp, #8]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4a8d      	ldr	r2, [pc, #564]	; (80064f0 <_strtod_l+0x2a0>)
 80062ba:	ab19      	add	r3, sp, #100	; 0x64
 80062bc:	a917      	add	r1, sp, #92	; 0x5c
 80062be:	4620      	mov	r0, r4
 80062c0:	f001 ffae 	bl	8008220 <__gethex>
 80062c4:	f010 0707 	ands.w	r7, r0, #7
 80062c8:	4605      	mov	r5, r0
 80062ca:	d005      	beq.n	80062d8 <_strtod_l+0x88>
 80062cc:	2f06      	cmp	r7, #6
 80062ce:	d12c      	bne.n	800632a <_strtod_l+0xda>
 80062d0:	3601      	adds	r6, #1
 80062d2:	2300      	movs	r3, #0
 80062d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8590 	bne.w	8006e00 <_strtod_l+0xbb0>
 80062e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e2:	b1eb      	cbz	r3, 8006320 <_strtod_l+0xd0>
 80062e4:	4652      	mov	r2, sl
 80062e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062ea:	ec43 2b10 	vmov	d0, r2, r3
 80062ee:	b01d      	add	sp, #116	; 0x74
 80062f0:	ecbd 8b02 	vpop	{d8}
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	2a20      	cmp	r2, #32
 80062fa:	d1cc      	bne.n	8006296 <_strtod_l+0x46>
 80062fc:	3301      	adds	r3, #1
 80062fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006300:	e7be      	b.n	8006280 <_strtod_l+0x30>
 8006302:	2a2d      	cmp	r2, #45	; 0x2d
 8006304:	d1c7      	bne.n	8006296 <_strtod_l+0x46>
 8006306:	2201      	movs	r2, #1
 8006308:	920a      	str	r2, [sp, #40]	; 0x28
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	9217      	str	r2, [sp, #92]	; 0x5c
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1c2      	bne.n	800629a <_strtod_l+0x4a>
 8006314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006316:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 856e 	bne.w	8006dfc <_strtod_l+0xbac>
 8006320:	4652      	mov	r2, sl
 8006322:	465b      	mov	r3, fp
 8006324:	e7e1      	b.n	80062ea <_strtod_l+0x9a>
 8006326:	2200      	movs	r2, #0
 8006328:	e7ee      	b.n	8006308 <_strtod_l+0xb8>
 800632a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800632c:	b13a      	cbz	r2, 800633e <_strtod_l+0xee>
 800632e:	2135      	movs	r1, #53	; 0x35
 8006330:	a81a      	add	r0, sp, #104	; 0x68
 8006332:	f002 ff80 	bl	8009236 <__copybits>
 8006336:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006338:	4620      	mov	r0, r4
 800633a:	f002 fb3f 	bl	80089bc <_Bfree>
 800633e:	3f01      	subs	r7, #1
 8006340:	2f04      	cmp	r7, #4
 8006342:	d806      	bhi.n	8006352 <_strtod_l+0x102>
 8006344:	e8df f007 	tbb	[pc, r7]
 8006348:	1714030a 	.word	0x1714030a
 800634c:	0a          	.byte	0x0a
 800634d:	00          	.byte	0x00
 800634e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006352:	0728      	lsls	r0, r5, #28
 8006354:	d5c0      	bpl.n	80062d8 <_strtod_l+0x88>
 8006356:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800635a:	e7bd      	b.n	80062d8 <_strtod_l+0x88>
 800635c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006366:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800636a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800636e:	e7f0      	b.n	8006352 <_strtod_l+0x102>
 8006370:	f8df b180 	ldr.w	fp, [pc, #384]	; 80064f4 <_strtod_l+0x2a4>
 8006374:	e7ed      	b.n	8006352 <_strtod_l+0x102>
 8006376:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800637a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800637e:	e7e8      	b.n	8006352 <_strtod_l+0x102>
 8006380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	9217      	str	r2, [sp, #92]	; 0x5c
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d0f9      	beq.n	8006380 <_strtod_l+0x130>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0a3      	beq.n	80062d8 <_strtod_l+0x88>
 8006390:	2301      	movs	r3, #1
 8006392:	f04f 0900 	mov.w	r9, #0
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	f8cd 901c 	str.w	r9, [sp, #28]
 80063a0:	464f      	mov	r7, r9
 80063a2:	220a      	movs	r2, #10
 80063a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80063a6:	7806      	ldrb	r6, [r0, #0]
 80063a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063ac:	b2d9      	uxtb	r1, r3
 80063ae:	2909      	cmp	r1, #9
 80063b0:	d92a      	bls.n	8006408 <_strtod_l+0x1b8>
 80063b2:	9905      	ldr	r1, [sp, #20]
 80063b4:	462a      	mov	r2, r5
 80063b6:	f003 fa32 	bl	800981e <strncmp>
 80063ba:	b398      	cbz	r0, 8006424 <_strtod_l+0x1d4>
 80063bc:	2000      	movs	r0, #0
 80063be:	4632      	mov	r2, r6
 80063c0:	463d      	mov	r5, r7
 80063c2:	9005      	str	r0, [sp, #20]
 80063c4:	4603      	mov	r3, r0
 80063c6:	2a65      	cmp	r2, #101	; 0x65
 80063c8:	d001      	beq.n	80063ce <_strtod_l+0x17e>
 80063ca:	2a45      	cmp	r2, #69	; 0x45
 80063cc:	d118      	bne.n	8006400 <_strtod_l+0x1b0>
 80063ce:	b91d      	cbnz	r5, 80063d8 <_strtod_l+0x188>
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	4302      	orrs	r2, r0
 80063d4:	d09e      	beq.n	8006314 <_strtod_l+0xc4>
 80063d6:	2500      	movs	r5, #0
 80063d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80063dc:	f108 0201 	add.w	r2, r8, #1
 80063e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80063e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80063e6:	2a2b      	cmp	r2, #43	; 0x2b
 80063e8:	d075      	beq.n	80064d6 <_strtod_l+0x286>
 80063ea:	2a2d      	cmp	r2, #45	; 0x2d
 80063ec:	d07b      	beq.n	80064e6 <_strtod_l+0x296>
 80063ee:	f04f 0c00 	mov.w	ip, #0
 80063f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80063f6:	2909      	cmp	r1, #9
 80063f8:	f240 8082 	bls.w	8006500 <_strtod_l+0x2b0>
 80063fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006400:	2600      	movs	r6, #0
 8006402:	e09d      	b.n	8006540 <_strtod_l+0x2f0>
 8006404:	2300      	movs	r3, #0
 8006406:	e7c4      	b.n	8006392 <_strtod_l+0x142>
 8006408:	2f08      	cmp	r7, #8
 800640a:	bfd8      	it	le
 800640c:	9907      	ldrle	r1, [sp, #28]
 800640e:	f100 0001 	add.w	r0, r0, #1
 8006412:	bfda      	itte	le
 8006414:	fb02 3301 	mlale	r3, r2, r1, r3
 8006418:	9307      	strle	r3, [sp, #28]
 800641a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800641e:	3701      	adds	r7, #1
 8006420:	9017      	str	r0, [sp, #92]	; 0x5c
 8006422:	e7bf      	b.n	80063a4 <_strtod_l+0x154>
 8006424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006426:	195a      	adds	r2, r3, r5
 8006428:	9217      	str	r2, [sp, #92]	; 0x5c
 800642a:	5d5a      	ldrb	r2, [r3, r5]
 800642c:	2f00      	cmp	r7, #0
 800642e:	d037      	beq.n	80064a0 <_strtod_l+0x250>
 8006430:	9005      	str	r0, [sp, #20]
 8006432:	463d      	mov	r5, r7
 8006434:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006438:	2b09      	cmp	r3, #9
 800643a:	d912      	bls.n	8006462 <_strtod_l+0x212>
 800643c:	2301      	movs	r3, #1
 800643e:	e7c2      	b.n	80063c6 <_strtod_l+0x176>
 8006440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	9217      	str	r2, [sp, #92]	; 0x5c
 8006446:	785a      	ldrb	r2, [r3, #1]
 8006448:	3001      	adds	r0, #1
 800644a:	2a30      	cmp	r2, #48	; 0x30
 800644c:	d0f8      	beq.n	8006440 <_strtod_l+0x1f0>
 800644e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006452:	2b08      	cmp	r3, #8
 8006454:	f200 84d9 	bhi.w	8006e0a <_strtod_l+0xbba>
 8006458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800645a:	9005      	str	r0, [sp, #20]
 800645c:	2000      	movs	r0, #0
 800645e:	9308      	str	r3, [sp, #32]
 8006460:	4605      	mov	r5, r0
 8006462:	3a30      	subs	r2, #48	; 0x30
 8006464:	f100 0301 	add.w	r3, r0, #1
 8006468:	d014      	beq.n	8006494 <_strtod_l+0x244>
 800646a:	9905      	ldr	r1, [sp, #20]
 800646c:	4419      	add	r1, r3
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	462b      	mov	r3, r5
 8006472:	eb00 0e05 	add.w	lr, r0, r5
 8006476:	210a      	movs	r1, #10
 8006478:	4573      	cmp	r3, lr
 800647a:	d113      	bne.n	80064a4 <_strtod_l+0x254>
 800647c:	182b      	adds	r3, r5, r0
 800647e:	2b08      	cmp	r3, #8
 8006480:	f105 0501 	add.w	r5, r5, #1
 8006484:	4405      	add	r5, r0
 8006486:	dc1c      	bgt.n	80064c2 <_strtod_l+0x272>
 8006488:	9907      	ldr	r1, [sp, #28]
 800648a:	230a      	movs	r3, #10
 800648c:	fb03 2301 	mla	r3, r3, r1, r2
 8006490:	9307      	str	r3, [sp, #28]
 8006492:	2300      	movs	r3, #0
 8006494:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006496:	1c51      	adds	r1, r2, #1
 8006498:	9117      	str	r1, [sp, #92]	; 0x5c
 800649a:	7852      	ldrb	r2, [r2, #1]
 800649c:	4618      	mov	r0, r3
 800649e:	e7c9      	b.n	8006434 <_strtod_l+0x1e4>
 80064a0:	4638      	mov	r0, r7
 80064a2:	e7d2      	b.n	800644a <_strtod_l+0x1fa>
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	dc04      	bgt.n	80064b2 <_strtod_l+0x262>
 80064a8:	9e07      	ldr	r6, [sp, #28]
 80064aa:	434e      	muls	r6, r1
 80064ac:	9607      	str	r6, [sp, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	e7e2      	b.n	8006478 <_strtod_l+0x228>
 80064b2:	f103 0c01 	add.w	ip, r3, #1
 80064b6:	f1bc 0f10 	cmp.w	ip, #16
 80064ba:	bfd8      	it	le
 80064bc:	fb01 f909 	mulle.w	r9, r1, r9
 80064c0:	e7f5      	b.n	80064ae <_strtod_l+0x25e>
 80064c2:	2d10      	cmp	r5, #16
 80064c4:	bfdc      	itt	le
 80064c6:	230a      	movle	r3, #10
 80064c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80064cc:	e7e1      	b.n	8006492 <_strtod_l+0x242>
 80064ce:	2300      	movs	r3, #0
 80064d0:	9305      	str	r3, [sp, #20]
 80064d2:	2301      	movs	r3, #1
 80064d4:	e77c      	b.n	80063d0 <_strtod_l+0x180>
 80064d6:	f04f 0c00 	mov.w	ip, #0
 80064da:	f108 0202 	add.w	r2, r8, #2
 80064de:	9217      	str	r2, [sp, #92]	; 0x5c
 80064e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80064e4:	e785      	b.n	80063f2 <_strtod_l+0x1a2>
 80064e6:	f04f 0c01 	mov.w	ip, #1
 80064ea:	e7f6      	b.n	80064da <_strtod_l+0x28a>
 80064ec:	0800a234 	.word	0x0800a234
 80064f0:	08009f84 	.word	0x08009f84
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064fa:	1c51      	adds	r1, r2, #1
 80064fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80064fe:	7852      	ldrb	r2, [r2, #1]
 8006500:	2a30      	cmp	r2, #48	; 0x30
 8006502:	d0f9      	beq.n	80064f8 <_strtod_l+0x2a8>
 8006504:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006508:	2908      	cmp	r1, #8
 800650a:	f63f af79 	bhi.w	8006400 <_strtod_l+0x1b0>
 800650e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006514:	9206      	str	r2, [sp, #24]
 8006516:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006518:	1c51      	adds	r1, r2, #1
 800651a:	9117      	str	r1, [sp, #92]	; 0x5c
 800651c:	7852      	ldrb	r2, [r2, #1]
 800651e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006522:	2e09      	cmp	r6, #9
 8006524:	d937      	bls.n	8006596 <_strtod_l+0x346>
 8006526:	9e06      	ldr	r6, [sp, #24]
 8006528:	1b89      	subs	r1, r1, r6
 800652a:	2908      	cmp	r1, #8
 800652c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006530:	dc02      	bgt.n	8006538 <_strtod_l+0x2e8>
 8006532:	4576      	cmp	r6, lr
 8006534:	bfa8      	it	ge
 8006536:	4676      	movge	r6, lr
 8006538:	f1bc 0f00 	cmp.w	ip, #0
 800653c:	d000      	beq.n	8006540 <_strtod_l+0x2f0>
 800653e:	4276      	negs	r6, r6
 8006540:	2d00      	cmp	r5, #0
 8006542:	d14d      	bne.n	80065e0 <_strtod_l+0x390>
 8006544:	9904      	ldr	r1, [sp, #16]
 8006546:	4301      	orrs	r1, r0
 8006548:	f47f aec6 	bne.w	80062d8 <_strtod_l+0x88>
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f aee1 	bne.w	8006314 <_strtod_l+0xc4>
 8006552:	2a69      	cmp	r2, #105	; 0x69
 8006554:	d027      	beq.n	80065a6 <_strtod_l+0x356>
 8006556:	dc24      	bgt.n	80065a2 <_strtod_l+0x352>
 8006558:	2a49      	cmp	r2, #73	; 0x49
 800655a:	d024      	beq.n	80065a6 <_strtod_l+0x356>
 800655c:	2a4e      	cmp	r2, #78	; 0x4e
 800655e:	f47f aed9 	bne.w	8006314 <_strtod_l+0xc4>
 8006562:	499f      	ldr	r1, [pc, #636]	; (80067e0 <_strtod_l+0x590>)
 8006564:	a817      	add	r0, sp, #92	; 0x5c
 8006566:	f002 f8b3 	bl	80086d0 <__match>
 800656a:	2800      	cmp	r0, #0
 800656c:	f43f aed2 	beq.w	8006314 <_strtod_l+0xc4>
 8006570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b28      	cmp	r3, #40	; 0x28
 8006576:	d12d      	bne.n	80065d4 <_strtod_l+0x384>
 8006578:	499a      	ldr	r1, [pc, #616]	; (80067e4 <_strtod_l+0x594>)
 800657a:	aa1a      	add	r2, sp, #104	; 0x68
 800657c:	a817      	add	r0, sp, #92	; 0x5c
 800657e:	f002 f8bb 	bl	80086f8 <__hexnan>
 8006582:	2805      	cmp	r0, #5
 8006584:	d126      	bne.n	80065d4 <_strtod_l+0x384>
 8006586:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006588:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800658c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006590:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006594:	e6a0      	b.n	80062d8 <_strtod_l+0x88>
 8006596:	210a      	movs	r1, #10
 8006598:	fb01 2e0e 	mla	lr, r1, lr, r2
 800659c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065a0:	e7b9      	b.n	8006516 <_strtod_l+0x2c6>
 80065a2:	2a6e      	cmp	r2, #110	; 0x6e
 80065a4:	e7db      	b.n	800655e <_strtod_l+0x30e>
 80065a6:	4990      	ldr	r1, [pc, #576]	; (80067e8 <_strtod_l+0x598>)
 80065a8:	a817      	add	r0, sp, #92	; 0x5c
 80065aa:	f002 f891 	bl	80086d0 <__match>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f43f aeb0 	beq.w	8006314 <_strtod_l+0xc4>
 80065b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065b6:	498d      	ldr	r1, [pc, #564]	; (80067ec <_strtod_l+0x59c>)
 80065b8:	3b01      	subs	r3, #1
 80065ba:	a817      	add	r0, sp, #92	; 0x5c
 80065bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80065be:	f002 f887 	bl	80086d0 <__match>
 80065c2:	b910      	cbnz	r0, 80065ca <_strtod_l+0x37a>
 80065c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c6:	3301      	adds	r3, #1
 80065c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80065ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80067fc <_strtod_l+0x5ac>
 80065ce:	f04f 0a00 	mov.w	sl, #0
 80065d2:	e681      	b.n	80062d8 <_strtod_l+0x88>
 80065d4:	4886      	ldr	r0, [pc, #536]	; (80067f0 <_strtod_l+0x5a0>)
 80065d6:	f003 f8c7 	bl	8009768 <nan>
 80065da:	ec5b ab10 	vmov	sl, fp, d0
 80065de:	e67b      	b.n	80062d8 <_strtod_l+0x88>
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	9807      	ldr	r0, [sp, #28]
 80065e4:	1af3      	subs	r3, r6, r3
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	bf08      	it	eq
 80065ea:	462f      	moveq	r7, r5
 80065ec:	2d10      	cmp	r5, #16
 80065ee:	9306      	str	r3, [sp, #24]
 80065f0:	46a8      	mov	r8, r5
 80065f2:	bfa8      	it	ge
 80065f4:	f04f 0810 	movge.w	r8, #16
 80065f8:	f7f9 ff94 	bl	8000524 <__aeabi_ui2d>
 80065fc:	2d09      	cmp	r5, #9
 80065fe:	4682      	mov	sl, r0
 8006600:	468b      	mov	fp, r1
 8006602:	dd13      	ble.n	800662c <_strtod_l+0x3dc>
 8006604:	4b7b      	ldr	r3, [pc, #492]	; (80067f4 <_strtod_l+0x5a4>)
 8006606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800660a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800660e:	f7fa f803 	bl	8000618 <__aeabi_dmul>
 8006612:	4682      	mov	sl, r0
 8006614:	4648      	mov	r0, r9
 8006616:	468b      	mov	fp, r1
 8006618:	f7f9 ff84 	bl	8000524 <__aeabi_ui2d>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	f7f9 fe42 	bl	80002ac <__adddf3>
 8006628:	4682      	mov	sl, r0
 800662a:	468b      	mov	fp, r1
 800662c:	2d0f      	cmp	r5, #15
 800662e:	dc38      	bgt.n	80066a2 <_strtod_l+0x452>
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f43f ae50 	beq.w	80062d8 <_strtod_l+0x88>
 8006638:	dd24      	ble.n	8006684 <_strtod_l+0x434>
 800663a:	2b16      	cmp	r3, #22
 800663c:	dc0b      	bgt.n	8006656 <_strtod_l+0x406>
 800663e:	496d      	ldr	r1, [pc, #436]	; (80067f4 <_strtod_l+0x5a4>)
 8006640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006648:	4652      	mov	r2, sl
 800664a:	465b      	mov	r3, fp
 800664c:	f7f9 ffe4 	bl	8000618 <__aeabi_dmul>
 8006650:	4682      	mov	sl, r0
 8006652:	468b      	mov	fp, r1
 8006654:	e640      	b.n	80062d8 <_strtod_l+0x88>
 8006656:	9a06      	ldr	r2, [sp, #24]
 8006658:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800665c:	4293      	cmp	r3, r2
 800665e:	db20      	blt.n	80066a2 <_strtod_l+0x452>
 8006660:	4c64      	ldr	r4, [pc, #400]	; (80067f4 <_strtod_l+0x5a4>)
 8006662:	f1c5 050f 	rsb	r5, r5, #15
 8006666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800666a:	4652      	mov	r2, sl
 800666c:	465b      	mov	r3, fp
 800666e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006672:	f7f9 ffd1 	bl	8000618 <__aeabi_dmul>
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	1b5d      	subs	r5, r3, r5
 800667a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800667e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006682:	e7e3      	b.n	800664c <_strtod_l+0x3fc>
 8006684:	9b06      	ldr	r3, [sp, #24]
 8006686:	3316      	adds	r3, #22
 8006688:	db0b      	blt.n	80066a2 <_strtod_l+0x452>
 800668a:	9b05      	ldr	r3, [sp, #20]
 800668c:	1b9e      	subs	r6, r3, r6
 800668e:	4b59      	ldr	r3, [pc, #356]	; (80067f4 <_strtod_l+0x5a4>)
 8006690:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006694:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7fa f8e6 	bl	800086c <__aeabi_ddiv>
 80066a0:	e7d6      	b.n	8006650 <_strtod_l+0x400>
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	eba5 0808 	sub.w	r8, r5, r8
 80066a8:	4498      	add	r8, r3
 80066aa:	f1b8 0f00 	cmp.w	r8, #0
 80066ae:	dd74      	ble.n	800679a <_strtod_l+0x54a>
 80066b0:	f018 030f 	ands.w	r3, r8, #15
 80066b4:	d00a      	beq.n	80066cc <_strtod_l+0x47c>
 80066b6:	494f      	ldr	r1, [pc, #316]	; (80067f4 <_strtod_l+0x5a4>)
 80066b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066bc:	4652      	mov	r2, sl
 80066be:	465b      	mov	r3, fp
 80066c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c4:	f7f9 ffa8 	bl	8000618 <__aeabi_dmul>
 80066c8:	4682      	mov	sl, r0
 80066ca:	468b      	mov	fp, r1
 80066cc:	f038 080f 	bics.w	r8, r8, #15
 80066d0:	d04f      	beq.n	8006772 <_strtod_l+0x522>
 80066d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80066d6:	dd22      	ble.n	800671e <_strtod_l+0x4ce>
 80066d8:	2500      	movs	r5, #0
 80066da:	462e      	mov	r6, r5
 80066dc:	9507      	str	r5, [sp, #28]
 80066de:	9505      	str	r5, [sp, #20]
 80066e0:	2322      	movs	r3, #34	; 0x22
 80066e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80067fc <_strtod_l+0x5ac>
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	f04f 0a00 	mov.w	sl, #0
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f43f adf2 	beq.w	80062d8 <_strtod_l+0x88>
 80066f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066f6:	4620      	mov	r0, r4
 80066f8:	f002 f960 	bl	80089bc <_Bfree>
 80066fc:	9905      	ldr	r1, [sp, #20]
 80066fe:	4620      	mov	r0, r4
 8006700:	f002 f95c 	bl	80089bc <_Bfree>
 8006704:	4631      	mov	r1, r6
 8006706:	4620      	mov	r0, r4
 8006708:	f002 f958 	bl	80089bc <_Bfree>
 800670c:	9907      	ldr	r1, [sp, #28]
 800670e:	4620      	mov	r0, r4
 8006710:	f002 f954 	bl	80089bc <_Bfree>
 8006714:	4629      	mov	r1, r5
 8006716:	4620      	mov	r0, r4
 8006718:	f002 f950 	bl	80089bc <_Bfree>
 800671c:	e5dc      	b.n	80062d8 <_strtod_l+0x88>
 800671e:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <_strtod_l+0x5a8>)
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	2300      	movs	r3, #0
 8006724:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006728:	4650      	mov	r0, sl
 800672a:	4659      	mov	r1, fp
 800672c:	4699      	mov	r9, r3
 800672e:	f1b8 0f01 	cmp.w	r8, #1
 8006732:	dc21      	bgt.n	8006778 <_strtod_l+0x528>
 8006734:	b10b      	cbz	r3, 800673a <_strtod_l+0x4ea>
 8006736:	4682      	mov	sl, r0
 8006738:	468b      	mov	fp, r1
 800673a:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <_strtod_l+0x5a8>)
 800673c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006740:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006744:	4652      	mov	r2, sl
 8006746:	465b      	mov	r3, fp
 8006748:	e9d9 0100 	ldrd	r0, r1, [r9]
 800674c:	f7f9 ff64 	bl	8000618 <__aeabi_dmul>
 8006750:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <_strtod_l+0x5ac>)
 8006752:	460a      	mov	r2, r1
 8006754:	400b      	ands	r3, r1
 8006756:	492a      	ldr	r1, [pc, #168]	; (8006800 <_strtod_l+0x5b0>)
 8006758:	428b      	cmp	r3, r1
 800675a:	4682      	mov	sl, r0
 800675c:	d8bc      	bhi.n	80066d8 <_strtod_l+0x488>
 800675e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006762:	428b      	cmp	r3, r1
 8006764:	bf86      	itte	hi
 8006766:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006804 <_strtod_l+0x5b4>
 800676a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800676e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006772:	2300      	movs	r3, #0
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	e084      	b.n	8006882 <_strtod_l+0x632>
 8006778:	f018 0f01 	tst.w	r8, #1
 800677c:	d005      	beq.n	800678a <_strtod_l+0x53a>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff48 	bl	8000618 <__aeabi_dmul>
 8006788:	2301      	movs	r3, #1
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	3208      	adds	r2, #8
 800678e:	f109 0901 	add.w	r9, r9, #1
 8006792:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006796:	9204      	str	r2, [sp, #16]
 8006798:	e7c9      	b.n	800672e <_strtod_l+0x4de>
 800679a:	d0ea      	beq.n	8006772 <_strtod_l+0x522>
 800679c:	f1c8 0800 	rsb	r8, r8, #0
 80067a0:	f018 020f 	ands.w	r2, r8, #15
 80067a4:	d00a      	beq.n	80067bc <_strtod_l+0x56c>
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <_strtod_l+0x5a4>)
 80067a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ac:	4650      	mov	r0, sl
 80067ae:	4659      	mov	r1, fp
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7fa f85a 	bl	800086c <__aeabi_ddiv>
 80067b8:	4682      	mov	sl, r0
 80067ba:	468b      	mov	fp, r1
 80067bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80067c0:	d0d7      	beq.n	8006772 <_strtod_l+0x522>
 80067c2:	f1b8 0f1f 	cmp.w	r8, #31
 80067c6:	dd1f      	ble.n	8006808 <_strtod_l+0x5b8>
 80067c8:	2500      	movs	r5, #0
 80067ca:	462e      	mov	r6, r5
 80067cc:	9507      	str	r5, [sp, #28]
 80067ce:	9505      	str	r5, [sp, #20]
 80067d0:	2322      	movs	r3, #34	; 0x22
 80067d2:	f04f 0a00 	mov.w	sl, #0
 80067d6:	f04f 0b00 	mov.w	fp, #0
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	e786      	b.n	80066ec <_strtod_l+0x49c>
 80067de:	bf00      	nop
 80067e0:	08009f55 	.word	0x08009f55
 80067e4:	08009f98 	.word	0x08009f98
 80067e8:	08009f4d 	.word	0x08009f4d
 80067ec:	0800a0dc 	.word	0x0800a0dc
 80067f0:	0800a3f0 	.word	0x0800a3f0
 80067f4:	0800a2d0 	.word	0x0800a2d0
 80067f8:	0800a2a8 	.word	0x0800a2a8
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	7ca00000 	.word	0x7ca00000
 8006804:	7fefffff 	.word	0x7fefffff
 8006808:	f018 0310 	ands.w	r3, r8, #16
 800680c:	bf18      	it	ne
 800680e:	236a      	movne	r3, #106	; 0x6a
 8006810:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006bc0 <_strtod_l+0x970>
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	4650      	mov	r0, sl
 8006818:	4659      	mov	r1, fp
 800681a:	2300      	movs	r3, #0
 800681c:	f018 0f01 	tst.w	r8, #1
 8006820:	d004      	beq.n	800682c <_strtod_l+0x5dc>
 8006822:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006826:	f7f9 fef7 	bl	8000618 <__aeabi_dmul>
 800682a:	2301      	movs	r3, #1
 800682c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006830:	f109 0908 	add.w	r9, r9, #8
 8006834:	d1f2      	bne.n	800681c <_strtod_l+0x5cc>
 8006836:	b10b      	cbz	r3, 800683c <_strtod_l+0x5ec>
 8006838:	4682      	mov	sl, r0
 800683a:	468b      	mov	fp, r1
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	b1c3      	cbz	r3, 8006872 <_strtod_l+0x622>
 8006840:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006844:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006848:	2b00      	cmp	r3, #0
 800684a:	4659      	mov	r1, fp
 800684c:	dd11      	ble.n	8006872 <_strtod_l+0x622>
 800684e:	2b1f      	cmp	r3, #31
 8006850:	f340 8124 	ble.w	8006a9c <_strtod_l+0x84c>
 8006854:	2b34      	cmp	r3, #52	; 0x34
 8006856:	bfde      	ittt	le
 8006858:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800685c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006860:	fa03 f202 	lslle.w	r2, r3, r2
 8006864:	f04f 0a00 	mov.w	sl, #0
 8006868:	bfcc      	ite	gt
 800686a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800686e:	ea02 0b01 	andle.w	fp, r2, r1
 8006872:	2200      	movs	r2, #0
 8006874:	2300      	movs	r3, #0
 8006876:	4650      	mov	r0, sl
 8006878:	4659      	mov	r1, fp
 800687a:	f7fa f935 	bl	8000ae8 <__aeabi_dcmpeq>
 800687e:	2800      	cmp	r0, #0
 8006880:	d1a2      	bne.n	80067c8 <_strtod_l+0x578>
 8006882:	9b07      	ldr	r3, [sp, #28]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	9908      	ldr	r1, [sp, #32]
 8006888:	462b      	mov	r3, r5
 800688a:	463a      	mov	r2, r7
 800688c:	4620      	mov	r0, r4
 800688e:	f002 f8fd 	bl	8008a8c <__s2b>
 8006892:	9007      	str	r0, [sp, #28]
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f af1f 	beq.w	80066d8 <_strtod_l+0x488>
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	1b9e      	subs	r6, r3, r6
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfb4      	ite	lt
 80068a4:	4633      	movlt	r3, r6
 80068a6:	2300      	movge	r3, #0
 80068a8:	930c      	str	r3, [sp, #48]	; 0x30
 80068aa:	9b06      	ldr	r3, [sp, #24]
 80068ac:	2500      	movs	r5, #0
 80068ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068b2:	9312      	str	r3, [sp, #72]	; 0x48
 80068b4:	462e      	mov	r6, r5
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	4620      	mov	r0, r4
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	f002 f83e 	bl	800893c <_Balloc>
 80068c0:	9005      	str	r0, [sp, #20]
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f43f af0c 	beq.w	80066e0 <_strtod_l+0x490>
 80068c8:	9b07      	ldr	r3, [sp, #28]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	3202      	adds	r2, #2
 80068ce:	f103 010c 	add.w	r1, r3, #12
 80068d2:	0092      	lsls	r2, r2, #2
 80068d4:	300c      	adds	r0, #12
 80068d6:	f7fe fde9 	bl	80054ac <memcpy>
 80068da:	ec4b ab10 	vmov	d0, sl, fp
 80068de:	aa1a      	add	r2, sp, #104	; 0x68
 80068e0:	a919      	add	r1, sp, #100	; 0x64
 80068e2:	4620      	mov	r0, r4
 80068e4:	f002 fc18 	bl	8009118 <__d2b>
 80068e8:	ec4b ab18 	vmov	d8, sl, fp
 80068ec:	9018      	str	r0, [sp, #96]	; 0x60
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f43f aef6 	beq.w	80066e0 <_strtod_l+0x490>
 80068f4:	2101      	movs	r1, #1
 80068f6:	4620      	mov	r0, r4
 80068f8:	f002 f962 	bl	8008bc0 <__i2b>
 80068fc:	4606      	mov	r6, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	f43f aeee 	beq.w	80066e0 <_strtod_l+0x490>
 8006904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006906:	9904      	ldr	r1, [sp, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfab      	itete	ge
 800690c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800690e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006910:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006912:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006916:	bfac      	ite	ge
 8006918:	eb03 0902 	addge.w	r9, r3, r2
 800691c:	1ad7      	sublt	r7, r2, r3
 800691e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006920:	eba3 0801 	sub.w	r8, r3, r1
 8006924:	4490      	add	r8, r2
 8006926:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <_strtod_l+0x95c>)
 8006928:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800692c:	4598      	cmp	r8, r3
 800692e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006932:	f280 80c7 	bge.w	8006ac4 <_strtod_l+0x874>
 8006936:	eba3 0308 	sub.w	r3, r3, r8
 800693a:	2b1f      	cmp	r3, #31
 800693c:	eba2 0203 	sub.w	r2, r2, r3
 8006940:	f04f 0101 	mov.w	r1, #1
 8006944:	f300 80b1 	bgt.w	8006aaa <_strtod_l+0x85a>
 8006948:	fa01 f303 	lsl.w	r3, r1, r3
 800694c:	930d      	str	r3, [sp, #52]	; 0x34
 800694e:	2300      	movs	r3, #0
 8006950:	9308      	str	r3, [sp, #32]
 8006952:	eb09 0802 	add.w	r8, r9, r2
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	45c1      	cmp	r9, r8
 800695a:	4417      	add	r7, r2
 800695c:	441f      	add	r7, r3
 800695e:	464b      	mov	r3, r9
 8006960:	bfa8      	it	ge
 8006962:	4643      	movge	r3, r8
 8006964:	42bb      	cmp	r3, r7
 8006966:	bfa8      	it	ge
 8006968:	463b      	movge	r3, r7
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfc2      	ittt	gt
 800696e:	eba8 0803 	subgt.w	r8, r8, r3
 8006972:	1aff      	subgt	r7, r7, r3
 8006974:	eba9 0903 	subgt.w	r9, r9, r3
 8006978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800697a:	2b00      	cmp	r3, #0
 800697c:	dd17      	ble.n	80069ae <_strtod_l+0x75e>
 800697e:	4631      	mov	r1, r6
 8006980:	461a      	mov	r2, r3
 8006982:	4620      	mov	r0, r4
 8006984:	f002 f9dc 	bl	8008d40 <__pow5mult>
 8006988:	4606      	mov	r6, r0
 800698a:	2800      	cmp	r0, #0
 800698c:	f43f aea8 	beq.w	80066e0 <_strtod_l+0x490>
 8006990:	4601      	mov	r1, r0
 8006992:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006994:	4620      	mov	r0, r4
 8006996:	f002 f929 	bl	8008bec <__multiply>
 800699a:	900b      	str	r0, [sp, #44]	; 0x2c
 800699c:	2800      	cmp	r0, #0
 800699e:	f43f ae9f 	beq.w	80066e0 <_strtod_l+0x490>
 80069a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069a4:	4620      	mov	r0, r4
 80069a6:	f002 f809 	bl	80089bc <_Bfree>
 80069aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ac:	9318      	str	r3, [sp, #96]	; 0x60
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	f300 808c 	bgt.w	8006ace <_strtod_l+0x87e>
 80069b6:	9b06      	ldr	r3, [sp, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd08      	ble.n	80069ce <_strtod_l+0x77e>
 80069bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069be:	9905      	ldr	r1, [sp, #20]
 80069c0:	4620      	mov	r0, r4
 80069c2:	f002 f9bd 	bl	8008d40 <__pow5mult>
 80069c6:	9005      	str	r0, [sp, #20]
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f43f ae89 	beq.w	80066e0 <_strtod_l+0x490>
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	dd08      	ble.n	80069e4 <_strtod_l+0x794>
 80069d2:	9905      	ldr	r1, [sp, #20]
 80069d4:	463a      	mov	r2, r7
 80069d6:	4620      	mov	r0, r4
 80069d8:	f002 fa0c 	bl	8008df4 <__lshift>
 80069dc:	9005      	str	r0, [sp, #20]
 80069de:	2800      	cmp	r0, #0
 80069e0:	f43f ae7e 	beq.w	80066e0 <_strtod_l+0x490>
 80069e4:	f1b9 0f00 	cmp.w	r9, #0
 80069e8:	dd08      	ble.n	80069fc <_strtod_l+0x7ac>
 80069ea:	4631      	mov	r1, r6
 80069ec:	464a      	mov	r2, r9
 80069ee:	4620      	mov	r0, r4
 80069f0:	f002 fa00 	bl	8008df4 <__lshift>
 80069f4:	4606      	mov	r6, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f ae72 	beq.w	80066e0 <_strtod_l+0x490>
 80069fc:	9a05      	ldr	r2, [sp, #20]
 80069fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a00:	4620      	mov	r0, r4
 8006a02:	f002 fa83 	bl	8008f0c <__mdiff>
 8006a06:	4605      	mov	r5, r0
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f43f ae69 	beq.w	80066e0 <_strtod_l+0x490>
 8006a0e:	68c3      	ldr	r3, [r0, #12]
 8006a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a12:	2300      	movs	r3, #0
 8006a14:	60c3      	str	r3, [r0, #12]
 8006a16:	4631      	mov	r1, r6
 8006a18:	f002 fa5c 	bl	8008ed4 <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	da60      	bge.n	8006ae2 <_strtod_l+0x892>
 8006a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a22:	ea53 030a 	orrs.w	r3, r3, sl
 8006a26:	f040 8082 	bne.w	8006b2e <_strtod_l+0x8de>
 8006a2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d17d      	bne.n	8006b2e <_strtod_l+0x8de>
 8006a32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a36:	0d1b      	lsrs	r3, r3, #20
 8006a38:	051b      	lsls	r3, r3, #20
 8006a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a3e:	d976      	bls.n	8006b2e <_strtod_l+0x8de>
 8006a40:	696b      	ldr	r3, [r5, #20]
 8006a42:	b913      	cbnz	r3, 8006a4a <_strtod_l+0x7fa>
 8006a44:	692b      	ldr	r3, [r5, #16]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	dd71      	ble.n	8006b2e <_strtod_l+0x8de>
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f002 f9d0 	bl	8008df4 <__lshift>
 8006a54:	4631      	mov	r1, r6
 8006a56:	4605      	mov	r5, r0
 8006a58:	f002 fa3c 	bl	8008ed4 <__mcmp>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dd66      	ble.n	8006b2e <_strtod_l+0x8de>
 8006a60:	9904      	ldr	r1, [sp, #16]
 8006a62:	4a53      	ldr	r2, [pc, #332]	; (8006bb0 <_strtod_l+0x960>)
 8006a64:	465b      	mov	r3, fp
 8006a66:	2900      	cmp	r1, #0
 8006a68:	f000 8081 	beq.w	8006b6e <_strtod_l+0x91e>
 8006a6c:	ea02 010b 	and.w	r1, r2, fp
 8006a70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a74:	dc7b      	bgt.n	8006b6e <_strtod_l+0x91e>
 8006a76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a7a:	f77f aea9 	ble.w	80067d0 <_strtod_l+0x580>
 8006a7e:	4b4d      	ldr	r3, [pc, #308]	; (8006bb4 <_strtod_l+0x964>)
 8006a80:	4650      	mov	r0, sl
 8006a82:	4659      	mov	r1, fp
 8006a84:	2200      	movs	r2, #0
 8006a86:	f7f9 fdc7 	bl	8000618 <__aeabi_dmul>
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4303      	orrs	r3, r0
 8006a8e:	bf08      	it	eq
 8006a90:	2322      	moveq	r3, #34	; 0x22
 8006a92:	4682      	mov	sl, r0
 8006a94:	468b      	mov	fp, r1
 8006a96:	bf08      	it	eq
 8006a98:	6023      	streq	r3, [r4, #0]
 8006a9a:	e62b      	b.n	80066f4 <_strtod_l+0x4a4>
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	ea03 0a0a 	and.w	sl, r3, sl
 8006aa8:	e6e3      	b.n	8006872 <_strtod_l+0x622>
 8006aaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006aae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006ab2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006ab6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006aba:	fa01 f308 	lsl.w	r3, r1, r8
 8006abe:	9308      	str	r3, [sp, #32]
 8006ac0:	910d      	str	r1, [sp, #52]	; 0x34
 8006ac2:	e746      	b.n	8006952 <_strtod_l+0x702>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9308      	str	r3, [sp, #32]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	930d      	str	r3, [sp, #52]	; 0x34
 8006acc:	e741      	b.n	8006952 <_strtod_l+0x702>
 8006ace:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f002 f98e 	bl	8008df4 <__lshift>
 8006ad8:	9018      	str	r0, [sp, #96]	; 0x60
 8006ada:	2800      	cmp	r0, #0
 8006adc:	f47f af6b 	bne.w	80069b6 <_strtod_l+0x766>
 8006ae0:	e5fe      	b.n	80066e0 <_strtod_l+0x490>
 8006ae2:	465f      	mov	r7, fp
 8006ae4:	d16e      	bne.n	8006bc4 <_strtod_l+0x974>
 8006ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006aec:	b342      	cbz	r2, 8006b40 <_strtod_l+0x8f0>
 8006aee:	4a32      	ldr	r2, [pc, #200]	; (8006bb8 <_strtod_l+0x968>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d128      	bne.n	8006b46 <_strtod_l+0x8f6>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	4651      	mov	r1, sl
 8006af8:	b1eb      	cbz	r3, 8006b36 <_strtod_l+0x8e6>
 8006afa:	4b2d      	ldr	r3, [pc, #180]	; (8006bb0 <_strtod_l+0x960>)
 8006afc:	403b      	ands	r3, r7
 8006afe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b06:	d819      	bhi.n	8006b3c <_strtod_l+0x8ec>
 8006b08:	0d1b      	lsrs	r3, r3, #20
 8006b0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	4299      	cmp	r1, r3
 8006b14:	d117      	bne.n	8006b46 <_strtod_l+0x8f6>
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <_strtod_l+0x96c>)
 8006b18:	429f      	cmp	r7, r3
 8006b1a:	d102      	bne.n	8006b22 <_strtod_l+0x8d2>
 8006b1c:	3101      	adds	r1, #1
 8006b1e:	f43f addf 	beq.w	80066e0 <_strtod_l+0x490>
 8006b22:	4b23      	ldr	r3, [pc, #140]	; (8006bb0 <_strtod_l+0x960>)
 8006b24:	403b      	ands	r3, r7
 8006b26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b2a:	f04f 0a00 	mov.w	sl, #0
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1a4      	bne.n	8006a7e <_strtod_l+0x82e>
 8006b34:	e5de      	b.n	80066f4 <_strtod_l+0x4a4>
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b3a:	e7ea      	b.n	8006b12 <_strtod_l+0x8c2>
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	e7e8      	b.n	8006b12 <_strtod_l+0x8c2>
 8006b40:	ea53 030a 	orrs.w	r3, r3, sl
 8006b44:	d08c      	beq.n	8006a60 <_strtod_l+0x810>
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	b1db      	cbz	r3, 8006b82 <_strtod_l+0x932>
 8006b4a:	423b      	tst	r3, r7
 8006b4c:	d0ef      	beq.n	8006b2e <_strtod_l+0x8de>
 8006b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b50:	9a04      	ldr	r2, [sp, #16]
 8006b52:	4650      	mov	r0, sl
 8006b54:	4659      	mov	r1, fp
 8006b56:	b1c3      	cbz	r3, 8006b8a <_strtod_l+0x93a>
 8006b58:	f7ff fb5e 	bl	8006218 <sulp>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	ec51 0b18 	vmov	r0, r1, d8
 8006b64:	f7f9 fba2 	bl	80002ac <__adddf3>
 8006b68:	4682      	mov	sl, r0
 8006b6a:	468b      	mov	fp, r1
 8006b6c:	e7df      	b.n	8006b2e <_strtod_l+0x8de>
 8006b6e:	4013      	ands	r3, r2
 8006b70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006b80:	e7d5      	b.n	8006b2e <_strtod_l+0x8de>
 8006b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b84:	ea13 0f0a 	tst.w	r3, sl
 8006b88:	e7e0      	b.n	8006b4c <_strtod_l+0x8fc>
 8006b8a:	f7ff fb45 	bl	8006218 <sulp>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	ec51 0b18 	vmov	r0, r1, d8
 8006b96:	f7f9 fb87 	bl	80002a8 <__aeabi_dsub>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	468b      	mov	fp, r1
 8006ba2:	f7f9 ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0c1      	beq.n	8006b2e <_strtod_l+0x8de>
 8006baa:	e611      	b.n	80067d0 <_strtod_l+0x580>
 8006bac:	fffffc02 	.word	0xfffffc02
 8006bb0:	7ff00000 	.word	0x7ff00000
 8006bb4:	39500000 	.word	0x39500000
 8006bb8:	000fffff 	.word	0x000fffff
 8006bbc:	7fefffff 	.word	0x7fefffff
 8006bc0:	08009fb0 	.word	0x08009fb0
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f002 fb02 	bl	80091d0 <__ratio>
 8006bcc:	ec59 8b10 	vmov	r8, r9, d0
 8006bd0:	ee10 0a10 	vmov	r0, s0
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 ff98 	bl	8000b10 <__aeabi_dcmple>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d07a      	beq.n	8006cda <_strtod_l+0xa8a>
 8006be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04a      	beq.n	8006c80 <_strtod_l+0xa30>
 8006bea:	4b95      	ldr	r3, [pc, #596]	; (8006e40 <_strtod_l+0xbf0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006bf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e40 <_strtod_l+0xbf0>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	4b92      	ldr	r3, [pc, #584]	; (8006e44 <_strtod_l+0xbf4>)
 8006bfc:	403b      	ands	r3, r7
 8006bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8006c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c02:	4b91      	ldr	r3, [pc, #580]	; (8006e48 <_strtod_l+0xbf8>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	f040 80b0 	bne.w	8006d6a <_strtod_l+0xb1a>
 8006c0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c12:	ec4b ab10 	vmov	d0, sl, fp
 8006c16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c1a:	f002 fa01 	bl	8009020 <__ulp>
 8006c1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c22:	ec53 2b10 	vmov	r2, r3, d0
 8006c26:	f7f9 fcf7 	bl	8000618 <__aeabi_dmul>
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	f7f9 fb3d 	bl	80002ac <__adddf3>
 8006c32:	460b      	mov	r3, r1
 8006c34:	4983      	ldr	r1, [pc, #524]	; (8006e44 <_strtod_l+0xbf4>)
 8006c36:	4a85      	ldr	r2, [pc, #532]	; (8006e4c <_strtod_l+0xbfc>)
 8006c38:	4019      	ands	r1, r3
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	d960      	bls.n	8006d02 <_strtod_l+0xab2>
 8006c40:	ee18 3a90 	vmov	r3, s17
 8006c44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d104      	bne.n	8006c56 <_strtod_l+0xa06>
 8006c4c:	ee18 3a10 	vmov	r3, s16
 8006c50:	3301      	adds	r3, #1
 8006c52:	f43f ad45 	beq.w	80066e0 <_strtod_l+0x490>
 8006c56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006e58 <_strtod_l+0xc08>
 8006c5a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c60:	4620      	mov	r0, r4
 8006c62:	f001 feab 	bl	80089bc <_Bfree>
 8006c66:	9905      	ldr	r1, [sp, #20]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 fea7 	bl	80089bc <_Bfree>
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 fea3 	bl	80089bc <_Bfree>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f001 fe9f 	bl	80089bc <_Bfree>
 8006c7e:	e61a      	b.n	80068b6 <_strtod_l+0x666>
 8006c80:	f1ba 0f00 	cmp.w	sl, #0
 8006c84:	d11b      	bne.n	8006cbe <_strtod_l+0xa6e>
 8006c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c8a:	b9f3      	cbnz	r3, 8006cca <_strtod_l+0xa7a>
 8006c8c:	4b6c      	ldr	r3, [pc, #432]	; (8006e40 <_strtod_l+0xbf0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4640      	mov	r0, r8
 8006c92:	4649      	mov	r1, r9
 8006c94:	f7f9 ff32 	bl	8000afc <__aeabi_dcmplt>
 8006c98:	b9d0      	cbnz	r0, 8006cd0 <_strtod_l+0xa80>
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4b6c      	ldr	r3, [pc, #432]	; (8006e50 <_strtod_l+0xc00>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f7f9 fcb9 	bl	8000618 <__aeabi_dmul>
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	4689      	mov	r9, r1
 8006caa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8006cb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006cb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cbc:	e79d      	b.n	8006bfa <_strtod_l+0x9aa>
 8006cbe:	f1ba 0f01 	cmp.w	sl, #1
 8006cc2:	d102      	bne.n	8006cca <_strtod_l+0xa7a>
 8006cc4:	2f00      	cmp	r7, #0
 8006cc6:	f43f ad83 	beq.w	80067d0 <_strtod_l+0x580>
 8006cca:	4b62      	ldr	r3, [pc, #392]	; (8006e54 <_strtod_l+0xc04>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	e78e      	b.n	8006bee <_strtod_l+0x99e>
 8006cd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006e50 <_strtod_l+0xc00>
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	e7e7      	b.n	8006caa <_strtod_l+0xa5a>
 8006cda:	4b5d      	ldr	r3, [pc, #372]	; (8006e50 <_strtod_l+0xc00>)
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4649      	mov	r1, r9
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f7f9 fc99 	bl	8000618 <__aeabi_dmul>
 8006ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce8:	4680      	mov	r8, r0
 8006cea:	4689      	mov	r9, r1
 8006cec:	b933      	cbnz	r3, 8006cfc <_strtod_l+0xaac>
 8006cee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cf2:	900e      	str	r0, [sp, #56]	; 0x38
 8006cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cfa:	e7dd      	b.n	8006cb8 <_strtod_l+0xa68>
 8006cfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006d00:	e7f9      	b.n	8006cf6 <_strtod_l+0xaa6>
 8006d02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1a8      	bne.n	8006c5e <_strtod_l+0xa0e>
 8006d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d12:	0d1b      	lsrs	r3, r3, #20
 8006d14:	051b      	lsls	r3, r3, #20
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d1a1      	bne.n	8006c5e <_strtod_l+0xa0e>
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 ffdb 	bl	8000cd8 <__aeabi_d2lz>
 8006d22:	f7f9 fc4b 	bl	80005bc <__aeabi_l2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fabb 	bl	80002a8 <__aeabi_dsub>
 8006d32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d38:	ea43 030a 	orr.w	r3, r3, sl
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	4680      	mov	r8, r0
 8006d40:	4689      	mov	r9, r1
 8006d42:	d055      	beq.n	8006df0 <_strtod_l+0xba0>
 8006d44:	a336      	add	r3, pc, #216	; (adr r3, 8006e20 <_strtod_l+0xbd0>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fed7 	bl	8000afc <__aeabi_dcmplt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f47f acd0 	bne.w	80066f4 <_strtod_l+0x4a4>
 8006d54:	a334      	add	r3, pc, #208	; (adr r3, 8006e28 <_strtod_l+0xbd8>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 feeb 	bl	8000b38 <__aeabi_dcmpgt>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f af7b 	beq.w	8006c5e <_strtod_l+0xa0e>
 8006d68:	e4c4      	b.n	80066f4 <_strtod_l+0x4a4>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	b333      	cbz	r3, 8006dbc <_strtod_l+0xb6c>
 8006d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d74:	d822      	bhi.n	8006dbc <_strtod_l+0xb6c>
 8006d76:	a32e      	add	r3, pc, #184	; (adr r3, 8006e30 <_strtod_l+0xbe0>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fec6 	bl	8000b10 <__aeabi_dcmple>
 8006d84:	b1a0      	cbz	r0, 8006db0 <_strtod_l+0xb60>
 8006d86:	4649      	mov	r1, r9
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f7f9 ff1d 	bl	8000bc8 <__aeabi_d2uiz>
 8006d8e:	2801      	cmp	r0, #1
 8006d90:	bf38      	it	cc
 8006d92:	2001      	movcc	r0, #1
 8006d94:	f7f9 fbc6 	bl	8000524 <__aeabi_ui2d>
 8006d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	bb23      	cbnz	r3, 8006dea <_strtod_l+0xb9a>
 8006da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006da4:	9010      	str	r0, [sp, #64]	; 0x40
 8006da6:	9311      	str	r3, [sp, #68]	; 0x44
 8006da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8006dc4:	eef0 0a68 	vmov.f32	s1, s17
 8006dc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006dcc:	f002 f928 	bl	8009020 <__ulp>
 8006dd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dd4:	ec53 2b10 	vmov	r2, r3, d0
 8006dd8:	f7f9 fc1e 	bl	8000618 <__aeabi_dmul>
 8006ddc:	ec53 2b18 	vmov	r2, r3, d8
 8006de0:	f7f9 fa64 	bl	80002ac <__adddf3>
 8006de4:	4682      	mov	sl, r0
 8006de6:	468b      	mov	fp, r1
 8006de8:	e78d      	b.n	8006d06 <_strtod_l+0xab6>
 8006dea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006dee:	e7db      	b.n	8006da8 <_strtod_l+0xb58>
 8006df0:	a311      	add	r3, pc, #68	; (adr r3, 8006e38 <_strtod_l+0xbe8>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fe81 	bl	8000afc <__aeabi_dcmplt>
 8006dfa:	e7b2      	b.n	8006d62 <_strtod_l+0xb12>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	f7ff ba6b 	b.w	80062e0 <_strtod_l+0x90>
 8006e0a:	2a65      	cmp	r2, #101	; 0x65
 8006e0c:	f43f ab5f 	beq.w	80064ce <_strtod_l+0x27e>
 8006e10:	2a45      	cmp	r2, #69	; 0x45
 8006e12:	f43f ab5c 	beq.w	80064ce <_strtod_l+0x27e>
 8006e16:	2301      	movs	r3, #1
 8006e18:	f7ff bb94 	b.w	8006544 <_strtod_l+0x2f4>
 8006e1c:	f3af 8000 	nop.w
 8006e20:	94a03595 	.word	0x94a03595
 8006e24:	3fdfffff 	.word	0x3fdfffff
 8006e28:	35afe535 	.word	0x35afe535
 8006e2c:	3fe00000 	.word	0x3fe00000
 8006e30:	ffc00000 	.word	0xffc00000
 8006e34:	41dfffff 	.word	0x41dfffff
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fcfffff 	.word	0x3fcfffff
 8006e40:	3ff00000 	.word	0x3ff00000
 8006e44:	7ff00000 	.word	0x7ff00000
 8006e48:	7fe00000 	.word	0x7fe00000
 8006e4c:	7c9fffff 	.word	0x7c9fffff
 8006e50:	3fe00000 	.word	0x3fe00000
 8006e54:	bff00000 	.word	0xbff00000
 8006e58:	7fefffff 	.word	0x7fefffff

08006e5c <_strtod_r>:
 8006e5c:	4b01      	ldr	r3, [pc, #4]	; (8006e64 <_strtod_r+0x8>)
 8006e5e:	f7ff b9f7 	b.w	8006250 <_strtod_l>
 8006e62:	bf00      	nop
 8006e64:	20000078 	.word	0x20000078

08006e68 <_strtol_l.constprop.0>:
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6e:	d001      	beq.n	8006e74 <_strtol_l.constprop.0+0xc>
 8006e70:	2b24      	cmp	r3, #36	; 0x24
 8006e72:	d906      	bls.n	8006e82 <_strtol_l.constprop.0+0x1a>
 8006e74:	f7fe faf0 	bl	8005458 <__errno>
 8006e78:	2316      	movs	r3, #22
 8006e7a:	6003      	str	r3, [r0, #0]
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f68 <_strtol_l.constprop.0+0x100>
 8006e86:	460d      	mov	r5, r1
 8006e88:	462e      	mov	r6, r5
 8006e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e92:	f017 0708 	ands.w	r7, r7, #8
 8006e96:	d1f7      	bne.n	8006e88 <_strtol_l.constprop.0+0x20>
 8006e98:	2c2d      	cmp	r4, #45	; 0x2d
 8006e9a:	d132      	bne.n	8006f02 <_strtol_l.constprop.0+0x9a>
 8006e9c:	782c      	ldrb	r4, [r5, #0]
 8006e9e:	2701      	movs	r7, #1
 8006ea0:	1cb5      	adds	r5, r6, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d05b      	beq.n	8006f5e <_strtol_l.constprop.0+0xf6>
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d109      	bne.n	8006ebe <_strtol_l.constprop.0+0x56>
 8006eaa:	2c30      	cmp	r4, #48	; 0x30
 8006eac:	d107      	bne.n	8006ebe <_strtol_l.constprop.0+0x56>
 8006eae:	782c      	ldrb	r4, [r5, #0]
 8006eb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006eb4:	2c58      	cmp	r4, #88	; 0x58
 8006eb6:	d14d      	bne.n	8006f54 <_strtol_l.constprop.0+0xec>
 8006eb8:	786c      	ldrb	r4, [r5, #1]
 8006eba:	2310      	movs	r3, #16
 8006ebc:	3502      	adds	r5, #2
 8006ebe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ec2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006ec6:	f04f 0c00 	mov.w	ip, #0
 8006eca:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ece:	4666      	mov	r6, ip
 8006ed0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ed4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ed8:	f1be 0f09 	cmp.w	lr, #9
 8006edc:	d816      	bhi.n	8006f0c <_strtol_l.constprop.0+0xa4>
 8006ede:	4674      	mov	r4, lr
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	dd24      	ble.n	8006f2e <_strtol_l.constprop.0+0xc6>
 8006ee4:	f1bc 0f00 	cmp.w	ip, #0
 8006ee8:	db1e      	blt.n	8006f28 <_strtol_l.constprop.0+0xc0>
 8006eea:	45b1      	cmp	r9, r6
 8006eec:	d31c      	bcc.n	8006f28 <_strtol_l.constprop.0+0xc0>
 8006eee:	d101      	bne.n	8006ef4 <_strtol_l.constprop.0+0x8c>
 8006ef0:	45a2      	cmp	sl, r4
 8006ef2:	db19      	blt.n	8006f28 <_strtol_l.constprop.0+0xc0>
 8006ef4:	fb06 4603 	mla	r6, r6, r3, r4
 8006ef8:	f04f 0c01 	mov.w	ip, #1
 8006efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f00:	e7e8      	b.n	8006ed4 <_strtol_l.constprop.0+0x6c>
 8006f02:	2c2b      	cmp	r4, #43	; 0x2b
 8006f04:	bf04      	itt	eq
 8006f06:	782c      	ldrbeq	r4, [r5, #0]
 8006f08:	1cb5      	addeq	r5, r6, #2
 8006f0a:	e7ca      	b.n	8006ea2 <_strtol_l.constprop.0+0x3a>
 8006f0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f10:	f1be 0f19 	cmp.w	lr, #25
 8006f14:	d801      	bhi.n	8006f1a <_strtol_l.constprop.0+0xb2>
 8006f16:	3c37      	subs	r4, #55	; 0x37
 8006f18:	e7e2      	b.n	8006ee0 <_strtol_l.constprop.0+0x78>
 8006f1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f1e:	f1be 0f19 	cmp.w	lr, #25
 8006f22:	d804      	bhi.n	8006f2e <_strtol_l.constprop.0+0xc6>
 8006f24:	3c57      	subs	r4, #87	; 0x57
 8006f26:	e7db      	b.n	8006ee0 <_strtol_l.constprop.0+0x78>
 8006f28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006f2c:	e7e6      	b.n	8006efc <_strtol_l.constprop.0+0x94>
 8006f2e:	f1bc 0f00 	cmp.w	ip, #0
 8006f32:	da05      	bge.n	8006f40 <_strtol_l.constprop.0+0xd8>
 8006f34:	2322      	movs	r3, #34	; 0x22
 8006f36:	6003      	str	r3, [r0, #0]
 8006f38:	4646      	mov	r6, r8
 8006f3a:	b942      	cbnz	r2, 8006f4e <_strtol_l.constprop.0+0xe6>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	e79e      	b.n	8006e7e <_strtol_l.constprop.0+0x16>
 8006f40:	b107      	cbz	r7, 8006f44 <_strtol_l.constprop.0+0xdc>
 8006f42:	4276      	negs	r6, r6
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	d0f9      	beq.n	8006f3c <_strtol_l.constprop.0+0xd4>
 8006f48:	f1bc 0f00 	cmp.w	ip, #0
 8006f4c:	d000      	beq.n	8006f50 <_strtol_l.constprop.0+0xe8>
 8006f4e:	1e69      	subs	r1, r5, #1
 8006f50:	6011      	str	r1, [r2, #0]
 8006f52:	e7f3      	b.n	8006f3c <_strtol_l.constprop.0+0xd4>
 8006f54:	2430      	movs	r4, #48	; 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1b1      	bne.n	8006ebe <_strtol_l.constprop.0+0x56>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	e7af      	b.n	8006ebe <_strtol_l.constprop.0+0x56>
 8006f5e:	2c30      	cmp	r4, #48	; 0x30
 8006f60:	d0a5      	beq.n	8006eae <_strtol_l.constprop.0+0x46>
 8006f62:	230a      	movs	r3, #10
 8006f64:	e7ab      	b.n	8006ebe <_strtol_l.constprop.0+0x56>
 8006f66:	bf00      	nop
 8006f68:	08009fd9 	.word	0x08009fd9

08006f6c <_strtol_r>:
 8006f6c:	f7ff bf7c 	b.w	8006e68 <_strtol_l.constprop.0>

08006f70 <__swbuf_r>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	460e      	mov	r6, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	4605      	mov	r5, r0
 8006f78:	b118      	cbz	r0, 8006f82 <__swbuf_r+0x12>
 8006f7a:	6983      	ldr	r3, [r0, #24]
 8006f7c:	b90b      	cbnz	r3, 8006f82 <__swbuf_r+0x12>
 8006f7e:	f001 f84b 	bl	8008018 <__sinit>
 8006f82:	4b21      	ldr	r3, [pc, #132]	; (8007008 <__swbuf_r+0x98>)
 8006f84:	429c      	cmp	r4, r3
 8006f86:	d12b      	bne.n	8006fe0 <__swbuf_r+0x70>
 8006f88:	686c      	ldr	r4, [r5, #4]
 8006f8a:	69a3      	ldr	r3, [r4, #24]
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	071a      	lsls	r2, r3, #28
 8006f92:	d52f      	bpl.n	8006ff4 <__swbuf_r+0x84>
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	b36b      	cbz	r3, 8006ff4 <__swbuf_r+0x84>
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	6820      	ldr	r0, [r4, #0]
 8006f9c:	1ac0      	subs	r0, r0, r3
 8006f9e:	6963      	ldr	r3, [r4, #20]
 8006fa0:	b2f6      	uxtb	r6, r6
 8006fa2:	4283      	cmp	r3, r0
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	dc04      	bgt.n	8006fb2 <__swbuf_r+0x42>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 ffa0 	bl	8007ef0 <_fflush_r>
 8006fb0:	bb30      	cbnz	r0, 8007000 <__swbuf_r+0x90>
 8006fb2:	68a3      	ldr	r3, [r4, #8]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60a3      	str	r3, [r4, #8]
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	701e      	strb	r6, [r3, #0]
 8006fc0:	6963      	ldr	r3, [r4, #20]
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	4283      	cmp	r3, r0
 8006fc6:	d004      	beq.n	8006fd2 <__swbuf_r+0x62>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d506      	bpl.n	8006fdc <__swbuf_r+0x6c>
 8006fce:	2e0a      	cmp	r6, #10
 8006fd0:	d104      	bne.n	8006fdc <__swbuf_r+0x6c>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 ff8b 	bl	8007ef0 <_fflush_r>
 8006fda:	b988      	cbnz	r0, 8007000 <__swbuf_r+0x90>
 8006fdc:	4638      	mov	r0, r7
 8006fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <__swbuf_r+0x9c>)
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	d101      	bne.n	8006fea <__swbuf_r+0x7a>
 8006fe6:	68ac      	ldr	r4, [r5, #8]
 8006fe8:	e7cf      	b.n	8006f8a <__swbuf_r+0x1a>
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <__swbuf_r+0xa0>)
 8006fec:	429c      	cmp	r4, r3
 8006fee:	bf08      	it	eq
 8006ff0:	68ec      	ldreq	r4, [r5, #12]
 8006ff2:	e7ca      	b.n	8006f8a <__swbuf_r+0x1a>
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f80c 	bl	8007014 <__swsetup_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d0cb      	beq.n	8006f98 <__swbuf_r+0x28>
 8007000:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007004:	e7ea      	b.n	8006fdc <__swbuf_r+0x6c>
 8007006:	bf00      	nop
 8007008:	0800a18c 	.word	0x0800a18c
 800700c:	0800a1ac 	.word	0x0800a1ac
 8007010:	0800a16c 	.word	0x0800a16c

08007014 <__swsetup_r>:
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <__swsetup_r+0xcc>)
 8007016:	b570      	push	{r4, r5, r6, lr}
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	4606      	mov	r6, r0
 800701c:	460c      	mov	r4, r1
 800701e:	b125      	cbz	r5, 800702a <__swsetup_r+0x16>
 8007020:	69ab      	ldr	r3, [r5, #24]
 8007022:	b913      	cbnz	r3, 800702a <__swsetup_r+0x16>
 8007024:	4628      	mov	r0, r5
 8007026:	f000 fff7 	bl	8008018 <__sinit>
 800702a:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <__swsetup_r+0xd0>)
 800702c:	429c      	cmp	r4, r3
 800702e:	d10f      	bne.n	8007050 <__swsetup_r+0x3c>
 8007030:	686c      	ldr	r4, [r5, #4]
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007038:	0719      	lsls	r1, r3, #28
 800703a:	d42c      	bmi.n	8007096 <__swsetup_r+0x82>
 800703c:	06dd      	lsls	r5, r3, #27
 800703e:	d411      	bmi.n	8007064 <__swsetup_r+0x50>
 8007040:	2309      	movs	r3, #9
 8007042:	6033      	str	r3, [r6, #0]
 8007044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704e:	e03e      	b.n	80070ce <__swsetup_r+0xba>
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <__swsetup_r+0xd4>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d101      	bne.n	800705a <__swsetup_r+0x46>
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	e7eb      	b.n	8007032 <__swsetup_r+0x1e>
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <__swsetup_r+0xd8>)
 800705c:	429c      	cmp	r4, r3
 800705e:	bf08      	it	eq
 8007060:	68ec      	ldreq	r4, [r5, #12]
 8007062:	e7e6      	b.n	8007032 <__swsetup_r+0x1e>
 8007064:	0758      	lsls	r0, r3, #29
 8007066:	d512      	bpl.n	800708e <__swsetup_r+0x7a>
 8007068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706a:	b141      	cbz	r1, 800707e <__swsetup_r+0x6a>
 800706c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <__swsetup_r+0x66>
 8007074:	4630      	mov	r0, r6
 8007076:	f002 f939 	bl	80092ec <_free_r>
 800707a:	2300      	movs	r3, #0
 800707c:	6363      	str	r3, [r4, #52]	; 0x34
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	2300      	movs	r3, #0
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	b94b      	cbnz	r3, 80070ae <__swsetup_r+0x9a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d003      	beq.n	80070ae <__swsetup_r+0x9a>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4630      	mov	r0, r6
 80070aa:	f001 fbed 	bl	8008888 <__smakebuf_r>
 80070ae:	89a0      	ldrh	r0, [r4, #12]
 80070b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070b4:	f010 0301 	ands.w	r3, r0, #1
 80070b8:	d00a      	beq.n	80070d0 <__swsetup_r+0xbc>
 80070ba:	2300      	movs	r3, #0
 80070bc:	60a3      	str	r3, [r4, #8]
 80070be:	6963      	ldr	r3, [r4, #20]
 80070c0:	425b      	negs	r3, r3
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	b943      	cbnz	r3, 80070da <__swsetup_r+0xc6>
 80070c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070cc:	d1ba      	bne.n	8007044 <__swsetup_r+0x30>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	0781      	lsls	r1, r0, #30
 80070d2:	bf58      	it	pl
 80070d4:	6963      	ldrpl	r3, [r4, #20]
 80070d6:	60a3      	str	r3, [r4, #8]
 80070d8:	e7f4      	b.n	80070c4 <__swsetup_r+0xb0>
 80070da:	2000      	movs	r0, #0
 80070dc:	e7f7      	b.n	80070ce <__swsetup_r+0xba>
 80070de:	bf00      	nop
 80070e0:	20000010 	.word	0x20000010
 80070e4:	0800a18c 	.word	0x0800a18c
 80070e8:	0800a1ac 	.word	0x0800a1ac
 80070ec:	0800a16c 	.word	0x0800a16c

080070f0 <quorem>:
 80070f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	6903      	ldr	r3, [r0, #16]
 80070f6:	690c      	ldr	r4, [r1, #16]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	4607      	mov	r7, r0
 80070fc:	f2c0 8081 	blt.w	8007202 <quorem+0x112>
 8007100:	3c01      	subs	r4, #1
 8007102:	f101 0814 	add.w	r8, r1, #20
 8007106:	f100 0514 	add.w	r5, r0, #20
 800710a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007118:	3301      	adds	r3, #1
 800711a:	429a      	cmp	r2, r3
 800711c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007124:	fbb2 f6f3 	udiv	r6, r2, r3
 8007128:	d331      	bcc.n	800718e <quorem+0x9e>
 800712a:	f04f 0e00 	mov.w	lr, #0
 800712e:	4640      	mov	r0, r8
 8007130:	46ac      	mov	ip, r5
 8007132:	46f2      	mov	sl, lr
 8007134:	f850 2b04 	ldr.w	r2, [r0], #4
 8007138:	b293      	uxth	r3, r2
 800713a:	fb06 e303 	mla	r3, r6, r3, lr
 800713e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007142:	b29b      	uxth	r3, r3
 8007144:	ebaa 0303 	sub.w	r3, sl, r3
 8007148:	f8dc a000 	ldr.w	sl, [ip]
 800714c:	0c12      	lsrs	r2, r2, #16
 800714e:	fa13 f38a 	uxtah	r3, r3, sl
 8007152:	fb06 e202 	mla	r2, r6, r2, lr
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	9b00      	ldr	r3, [sp, #0]
 800715a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800715e:	b292      	uxth	r2, r2
 8007160:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007168:	f8bd 3000 	ldrh.w	r3, [sp]
 800716c:	4581      	cmp	r9, r0
 800716e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007172:	f84c 3b04 	str.w	r3, [ip], #4
 8007176:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800717a:	d2db      	bcs.n	8007134 <quorem+0x44>
 800717c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007180:	b92b      	cbnz	r3, 800718e <quorem+0x9e>
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	3b04      	subs	r3, #4
 8007186:	429d      	cmp	r5, r3
 8007188:	461a      	mov	r2, r3
 800718a:	d32e      	bcc.n	80071ea <quorem+0xfa>
 800718c:	613c      	str	r4, [r7, #16]
 800718e:	4638      	mov	r0, r7
 8007190:	f001 fea0 	bl	8008ed4 <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	db24      	blt.n	80071e2 <quorem+0xf2>
 8007198:	3601      	adds	r6, #1
 800719a:	4628      	mov	r0, r5
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80071a4:	f8d0 e000 	ldr.w	lr, [r0]
 80071a8:	b293      	uxth	r3, r2
 80071aa:	ebac 0303 	sub.w	r3, ip, r3
 80071ae:	0c12      	lsrs	r2, r2, #16
 80071b0:	fa13 f38e 	uxtah	r3, r3, lr
 80071b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c2:	45c1      	cmp	r9, r8
 80071c4:	f840 3b04 	str.w	r3, [r0], #4
 80071c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071cc:	d2e8      	bcs.n	80071a0 <quorem+0xb0>
 80071ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	b922      	cbnz	r2, 80071e2 <quorem+0xf2>
 80071d8:	3b04      	subs	r3, #4
 80071da:	429d      	cmp	r5, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	d30a      	bcc.n	80071f6 <quorem+0x106>
 80071e0:	613c      	str	r4, [r7, #16]
 80071e2:	4630      	mov	r0, r6
 80071e4:	b003      	add	sp, #12
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	3b04      	subs	r3, #4
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	d1cc      	bne.n	800718c <quorem+0x9c>
 80071f2:	3c01      	subs	r4, #1
 80071f4:	e7c7      	b.n	8007186 <quorem+0x96>
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d1f0      	bne.n	80071e0 <quorem+0xf0>
 80071fe:	3c01      	subs	r4, #1
 8007200:	e7eb      	b.n	80071da <quorem+0xea>
 8007202:	2000      	movs	r0, #0
 8007204:	e7ee      	b.n	80071e4 <quorem+0xf4>
	...

08007208 <_dtoa_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	ed2d 8b04 	vpush	{d8-d9}
 8007210:	ec57 6b10 	vmov	r6, r7, d0
 8007214:	b093      	sub	sp, #76	; 0x4c
 8007216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800721c:	9106      	str	r1, [sp, #24]
 800721e:	ee10 aa10 	vmov	sl, s0
 8007222:	4604      	mov	r4, r0
 8007224:	9209      	str	r2, [sp, #36]	; 0x24
 8007226:	930c      	str	r3, [sp, #48]	; 0x30
 8007228:	46bb      	mov	fp, r7
 800722a:	b975      	cbnz	r5, 800724a <_dtoa_r+0x42>
 800722c:	2010      	movs	r0, #16
 800722e:	f001 fb6b 	bl	8008908 <malloc>
 8007232:	4602      	mov	r2, r0
 8007234:	6260      	str	r0, [r4, #36]	; 0x24
 8007236:	b920      	cbnz	r0, 8007242 <_dtoa_r+0x3a>
 8007238:	4ba7      	ldr	r3, [pc, #668]	; (80074d8 <_dtoa_r+0x2d0>)
 800723a:	21ea      	movs	r1, #234	; 0xea
 800723c:	48a7      	ldr	r0, [pc, #668]	; (80074dc <_dtoa_r+0x2d4>)
 800723e:	f002 fb21 	bl	8009884 <__assert_func>
 8007242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007246:	6005      	str	r5, [r0, #0]
 8007248:	60c5      	str	r5, [r0, #12]
 800724a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800724c:	6819      	ldr	r1, [r3, #0]
 800724e:	b151      	cbz	r1, 8007266 <_dtoa_r+0x5e>
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	604a      	str	r2, [r1, #4]
 8007254:	2301      	movs	r3, #1
 8007256:	4093      	lsls	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
 800725a:	4620      	mov	r0, r4
 800725c:	f001 fbae 	bl	80089bc <_Bfree>
 8007260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	1e3b      	subs	r3, r7, #0
 8007268:	bfaa      	itet	ge
 800726a:	2300      	movge	r3, #0
 800726c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007270:	f8c8 3000 	strge.w	r3, [r8]
 8007274:	4b9a      	ldr	r3, [pc, #616]	; (80074e0 <_dtoa_r+0x2d8>)
 8007276:	bfbc      	itt	lt
 8007278:	2201      	movlt	r2, #1
 800727a:	f8c8 2000 	strlt.w	r2, [r8]
 800727e:	ea33 030b 	bics.w	r3, r3, fp
 8007282:	d11b      	bne.n	80072bc <_dtoa_r+0xb4>
 8007284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007286:	f242 730f 	movw	r3, #9999	; 0x270f
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007290:	4333      	orrs	r3, r6
 8007292:	f000 8592 	beq.w	8007dba <_dtoa_r+0xbb2>
 8007296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007298:	b963      	cbnz	r3, 80072b4 <_dtoa_r+0xac>
 800729a:	4b92      	ldr	r3, [pc, #584]	; (80074e4 <_dtoa_r+0x2dc>)
 800729c:	e022      	b.n	80072e4 <_dtoa_r+0xdc>
 800729e:	4b92      	ldr	r3, [pc, #584]	; (80074e8 <_dtoa_r+0x2e0>)
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	3308      	adds	r3, #8
 80072a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	9801      	ldr	r0, [sp, #4]
 80072aa:	b013      	add	sp, #76	; 0x4c
 80072ac:	ecbd 8b04 	vpop	{d8-d9}
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	4b8b      	ldr	r3, [pc, #556]	; (80074e4 <_dtoa_r+0x2dc>)
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	3303      	adds	r3, #3
 80072ba:	e7f3      	b.n	80072a4 <_dtoa_r+0x9c>
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 80072c8:	ec4b ab19 	vmov	d9, sl, fp
 80072cc:	4680      	mov	r8, r0
 80072ce:	b158      	cbz	r0, 80072e8 <_dtoa_r+0xe0>
 80072d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d2:	2301      	movs	r3, #1
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 856b 	beq.w	8007db4 <_dtoa_r+0xbac>
 80072de:	4883      	ldr	r0, [pc, #524]	; (80074ec <_dtoa_r+0x2e4>)
 80072e0:	6018      	str	r0, [r3, #0]
 80072e2:	1e43      	subs	r3, r0, #1
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	e7df      	b.n	80072a8 <_dtoa_r+0xa0>
 80072e8:	ec4b ab10 	vmov	d0, sl, fp
 80072ec:	aa10      	add	r2, sp, #64	; 0x40
 80072ee:	a911      	add	r1, sp, #68	; 0x44
 80072f0:	4620      	mov	r0, r4
 80072f2:	f001 ff11 	bl	8009118 <__d2b>
 80072f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80072fa:	ee08 0a10 	vmov	s16, r0
 80072fe:	2d00      	cmp	r5, #0
 8007300:	f000 8084 	beq.w	800740c <_dtoa_r+0x204>
 8007304:	ee19 3a90 	vmov	r3, s19
 8007308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800730c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007310:	4656      	mov	r6, sl
 8007312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800731a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800731e:	4b74      	ldr	r3, [pc, #464]	; (80074f0 <_dtoa_r+0x2e8>)
 8007320:	2200      	movs	r2, #0
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f8 ffbf 	bl	80002a8 <__aeabi_dsub>
 800732a:	a365      	add	r3, pc, #404	; (adr r3, 80074c0 <_dtoa_r+0x2b8>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f7f9 f972 	bl	8000618 <__aeabi_dmul>
 8007334:	a364      	add	r3, pc, #400	; (adr r3, 80074c8 <_dtoa_r+0x2c0>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f8 ffb7 	bl	80002ac <__adddf3>
 800733e:	4606      	mov	r6, r0
 8007340:	4628      	mov	r0, r5
 8007342:	460f      	mov	r7, r1
 8007344:	f7f9 f8fe 	bl	8000544 <__aeabi_i2d>
 8007348:	a361      	add	r3, pc, #388	; (adr r3, 80074d0 <_dtoa_r+0x2c8>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f9 f963 	bl	8000618 <__aeabi_dmul>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f8 ffa7 	bl	80002ac <__adddf3>
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	f7f9 fc09 	bl	8000b78 <__aeabi_d2iz>
 8007366:	2200      	movs	r2, #0
 8007368:	9000      	str	r0, [sp, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f9 fbc4 	bl	8000afc <__aeabi_dcmplt>
 8007374:	b150      	cbz	r0, 800738c <_dtoa_r+0x184>
 8007376:	9800      	ldr	r0, [sp, #0]
 8007378:	f7f9 f8e4 	bl	8000544 <__aeabi_i2d>
 800737c:	4632      	mov	r2, r6
 800737e:	463b      	mov	r3, r7
 8007380:	f7f9 fbb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007384:	b910      	cbnz	r0, 800738c <_dtoa_r+0x184>
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	3b01      	subs	r3, #1
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	2b16      	cmp	r3, #22
 8007390:	d85a      	bhi.n	8007448 <_dtoa_r+0x240>
 8007392:	9a00      	ldr	r2, [sp, #0]
 8007394:	4b57      	ldr	r3, [pc, #348]	; (80074f4 <_dtoa_r+0x2ec>)
 8007396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	ec51 0b19 	vmov	r0, r1, d9
 80073a2:	f7f9 fbab 	bl	8000afc <__aeabi_dcmplt>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d050      	beq.n	800744c <_dtoa_r+0x244>
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073b6:	1b5d      	subs	r5, r3, r5
 80073b8:	1e6b      	subs	r3, r5, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	bf45      	ittet	mi
 80073be:	f1c5 0301 	rsbmi	r3, r5, #1
 80073c2:	9304      	strmi	r3, [sp, #16]
 80073c4:	2300      	movpl	r3, #0
 80073c6:	2300      	movmi	r3, #0
 80073c8:	bf4c      	ite	mi
 80073ca:	9305      	strmi	r3, [sp, #20]
 80073cc:	9304      	strpl	r3, [sp, #16]
 80073ce:	9b00      	ldr	r3, [sp, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db3d      	blt.n	8007450 <_dtoa_r+0x248>
 80073d4:	9b05      	ldr	r3, [sp, #20]
 80073d6:	9a00      	ldr	r2, [sp, #0]
 80073d8:	920a      	str	r2, [sp, #40]	; 0x28
 80073da:	4413      	add	r3, r2
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	2300      	movs	r3, #0
 80073e0:	9307      	str	r3, [sp, #28]
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	f200 8089 	bhi.w	80074fc <_dtoa_r+0x2f4>
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	bfc4      	itt	gt
 80073ee:	3b04      	subgt	r3, #4
 80073f0:	9306      	strgt	r3, [sp, #24]
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	f1a3 0302 	sub.w	r3, r3, #2
 80073f8:	bfcc      	ite	gt
 80073fa:	2500      	movgt	r5, #0
 80073fc:	2501      	movle	r5, #1
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f200 8087 	bhi.w	8007512 <_dtoa_r+0x30a>
 8007404:	e8df f003 	tbb	[pc, r3]
 8007408:	59383a2d 	.word	0x59383a2d
 800740c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007410:	441d      	add	r5, r3
 8007412:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007416:	2b20      	cmp	r3, #32
 8007418:	bfc1      	itttt	gt
 800741a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800741e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007422:	fa0b f303 	lslgt.w	r3, fp, r3
 8007426:	fa26 f000 	lsrgt.w	r0, r6, r0
 800742a:	bfda      	itte	le
 800742c:	f1c3 0320 	rsble	r3, r3, #32
 8007430:	fa06 f003 	lslle.w	r0, r6, r3
 8007434:	4318      	orrgt	r0, r3
 8007436:	f7f9 f875 	bl	8000524 <__aeabi_ui2d>
 800743a:	2301      	movs	r3, #1
 800743c:	4606      	mov	r6, r0
 800743e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007442:	3d01      	subs	r5, #1
 8007444:	930e      	str	r3, [sp, #56]	; 0x38
 8007446:	e76a      	b.n	800731e <_dtoa_r+0x116>
 8007448:	2301      	movs	r3, #1
 800744a:	e7b2      	b.n	80073b2 <_dtoa_r+0x1aa>
 800744c:	900b      	str	r0, [sp, #44]	; 0x2c
 800744e:	e7b1      	b.n	80073b4 <_dtoa_r+0x1ac>
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	9a00      	ldr	r2, [sp, #0]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	4253      	negs	r3, r2
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	2300      	movs	r3, #0
 800745e:	930a      	str	r3, [sp, #40]	; 0x28
 8007460:	e7bf      	b.n	80073e2 <_dtoa_r+0x1da>
 8007462:	2300      	movs	r3, #0
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc55      	bgt.n	8007518 <_dtoa_r+0x310>
 800746c:	2301      	movs	r3, #1
 800746e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007472:	461a      	mov	r2, r3
 8007474:	9209      	str	r2, [sp, #36]	; 0x24
 8007476:	e00c      	b.n	8007492 <_dtoa_r+0x28a>
 8007478:	2301      	movs	r3, #1
 800747a:	e7f3      	b.n	8007464 <_dtoa_r+0x25c>
 800747c:	2300      	movs	r3, #0
 800747e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	9b00      	ldr	r3, [sp, #0]
 8007484:	4413      	add	r3, r2
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	3301      	adds	r3, #1
 800748a:	2b01      	cmp	r3, #1
 800748c:	9303      	str	r3, [sp, #12]
 800748e:	bfb8      	it	lt
 8007490:	2301      	movlt	r3, #1
 8007492:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007494:	2200      	movs	r2, #0
 8007496:	6042      	str	r2, [r0, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	f102 0614 	add.w	r6, r2, #20
 800749e:	429e      	cmp	r6, r3
 80074a0:	6841      	ldr	r1, [r0, #4]
 80074a2:	d93d      	bls.n	8007520 <_dtoa_r+0x318>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f001 fa49 	bl	800893c <_Balloc>
 80074aa:	9001      	str	r0, [sp, #4]
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d13b      	bne.n	8007528 <_dtoa_r+0x320>
 80074b0:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <_dtoa_r+0x2f0>)
 80074b2:	4602      	mov	r2, r0
 80074b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074b8:	e6c0      	b.n	800723c <_dtoa_r+0x34>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7df      	b.n	800747e <_dtoa_r+0x276>
 80074be:	bf00      	nop
 80074c0:	636f4361 	.word	0x636f4361
 80074c4:	3fd287a7 	.word	0x3fd287a7
 80074c8:	8b60c8b3 	.word	0x8b60c8b3
 80074cc:	3fc68a28 	.word	0x3fc68a28
 80074d0:	509f79fb 	.word	0x509f79fb
 80074d4:	3fd34413 	.word	0x3fd34413
 80074d8:	0800a0e6 	.word	0x0800a0e6
 80074dc:	0800a0fd 	.word	0x0800a0fd
 80074e0:	7ff00000 	.word	0x7ff00000
 80074e4:	0800a0e2 	.word	0x0800a0e2
 80074e8:	0800a0d9 	.word	0x0800a0d9
 80074ec:	08009f59 	.word	0x08009f59
 80074f0:	3ff80000 	.word	0x3ff80000
 80074f4:	0800a2d0 	.word	0x0800a2d0
 80074f8:	0800a158 	.word	0x0800a158
 80074fc:	2501      	movs	r5, #1
 80074fe:	2300      	movs	r3, #0
 8007500:	9306      	str	r3, [sp, #24]
 8007502:	9508      	str	r5, [sp, #32]
 8007504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007508:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	2312      	movs	r3, #18
 8007510:	e7b0      	b.n	8007474 <_dtoa_r+0x26c>
 8007512:	2301      	movs	r3, #1
 8007514:	9308      	str	r3, [sp, #32]
 8007516:	e7f5      	b.n	8007504 <_dtoa_r+0x2fc>
 8007518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800751e:	e7b8      	b.n	8007492 <_dtoa_r+0x28a>
 8007520:	3101      	adds	r1, #1
 8007522:	6041      	str	r1, [r0, #4]
 8007524:	0052      	lsls	r2, r2, #1
 8007526:	e7b8      	b.n	800749a <_dtoa_r+0x292>
 8007528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752a:	9a01      	ldr	r2, [sp, #4]
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	2b0e      	cmp	r3, #14
 8007532:	f200 809d 	bhi.w	8007670 <_dtoa_r+0x468>
 8007536:	2d00      	cmp	r5, #0
 8007538:	f000 809a 	beq.w	8007670 <_dtoa_r+0x468>
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd32      	ble.n	80075a8 <_dtoa_r+0x3a0>
 8007542:	4ab7      	ldr	r2, [pc, #732]	; (8007820 <_dtoa_r+0x618>)
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800754c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007550:	9b00      	ldr	r3, [sp, #0]
 8007552:	05d8      	lsls	r0, r3, #23
 8007554:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007558:	d516      	bpl.n	8007588 <_dtoa_r+0x380>
 800755a:	4bb2      	ldr	r3, [pc, #712]	; (8007824 <_dtoa_r+0x61c>)
 800755c:	ec51 0b19 	vmov	r0, r1, d9
 8007560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007564:	f7f9 f982 	bl	800086c <__aeabi_ddiv>
 8007568:	f007 070f 	and.w	r7, r7, #15
 800756c:	4682      	mov	sl, r0
 800756e:	468b      	mov	fp, r1
 8007570:	2503      	movs	r5, #3
 8007572:	4eac      	ldr	r6, [pc, #688]	; (8007824 <_dtoa_r+0x61c>)
 8007574:	b957      	cbnz	r7, 800758c <_dtoa_r+0x384>
 8007576:	4642      	mov	r2, r8
 8007578:	464b      	mov	r3, r9
 800757a:	4650      	mov	r0, sl
 800757c:	4659      	mov	r1, fp
 800757e:	f7f9 f975 	bl	800086c <__aeabi_ddiv>
 8007582:	4682      	mov	sl, r0
 8007584:	468b      	mov	fp, r1
 8007586:	e028      	b.n	80075da <_dtoa_r+0x3d2>
 8007588:	2502      	movs	r5, #2
 800758a:	e7f2      	b.n	8007572 <_dtoa_r+0x36a>
 800758c:	07f9      	lsls	r1, r7, #31
 800758e:	d508      	bpl.n	80075a2 <_dtoa_r+0x39a>
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007598:	f7f9 f83e 	bl	8000618 <__aeabi_dmul>
 800759c:	3501      	adds	r5, #1
 800759e:	4680      	mov	r8, r0
 80075a0:	4689      	mov	r9, r1
 80075a2:	107f      	asrs	r7, r7, #1
 80075a4:	3608      	adds	r6, #8
 80075a6:	e7e5      	b.n	8007574 <_dtoa_r+0x36c>
 80075a8:	f000 809b 	beq.w	80076e2 <_dtoa_r+0x4da>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	4f9d      	ldr	r7, [pc, #628]	; (8007824 <_dtoa_r+0x61c>)
 80075b0:	425e      	negs	r6, r3
 80075b2:	4b9b      	ldr	r3, [pc, #620]	; (8007820 <_dtoa_r+0x618>)
 80075b4:	f006 020f 	and.w	r2, r6, #15
 80075b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	ec51 0b19 	vmov	r0, r1, d9
 80075c4:	f7f9 f828 	bl	8000618 <__aeabi_dmul>
 80075c8:	1136      	asrs	r6, r6, #4
 80075ca:	4682      	mov	sl, r0
 80075cc:	468b      	mov	fp, r1
 80075ce:	2300      	movs	r3, #0
 80075d0:	2502      	movs	r5, #2
 80075d2:	2e00      	cmp	r6, #0
 80075d4:	d17a      	bne.n	80076cc <_dtoa_r+0x4c4>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d3      	bne.n	8007582 <_dtoa_r+0x37a>
 80075da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8082 	beq.w	80076e6 <_dtoa_r+0x4de>
 80075e2:	4b91      	ldr	r3, [pc, #580]	; (8007828 <_dtoa_r+0x620>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	4650      	mov	r0, sl
 80075e8:	4659      	mov	r1, fp
 80075ea:	f7f9 fa87 	bl	8000afc <__aeabi_dcmplt>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d079      	beq.n	80076e6 <_dtoa_r+0x4de>
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d076      	beq.n	80076e6 <_dtoa_r+0x4de>
 80075f8:	9b02      	ldr	r3, [sp, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dd36      	ble.n	800766c <_dtoa_r+0x464>
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	4650      	mov	r0, sl
 8007602:	4659      	mov	r1, fp
 8007604:	1e5f      	subs	r7, r3, #1
 8007606:	2200      	movs	r2, #0
 8007608:	4b88      	ldr	r3, [pc, #544]	; (800782c <_dtoa_r+0x624>)
 800760a:	f7f9 f805 	bl	8000618 <__aeabi_dmul>
 800760e:	9e02      	ldr	r6, [sp, #8]
 8007610:	4682      	mov	sl, r0
 8007612:	468b      	mov	fp, r1
 8007614:	3501      	adds	r5, #1
 8007616:	4628      	mov	r0, r5
 8007618:	f7f8 ff94 	bl	8000544 <__aeabi_i2d>
 800761c:	4652      	mov	r2, sl
 800761e:	465b      	mov	r3, fp
 8007620:	f7f8 fffa 	bl	8000618 <__aeabi_dmul>
 8007624:	4b82      	ldr	r3, [pc, #520]	; (8007830 <_dtoa_r+0x628>)
 8007626:	2200      	movs	r2, #0
 8007628:	f7f8 fe40 	bl	80002ac <__adddf3>
 800762c:	46d0      	mov	r8, sl
 800762e:	46d9      	mov	r9, fp
 8007630:	4682      	mov	sl, r0
 8007632:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007636:	2e00      	cmp	r6, #0
 8007638:	d158      	bne.n	80076ec <_dtoa_r+0x4e4>
 800763a:	4b7e      	ldr	r3, [pc, #504]	; (8007834 <_dtoa_r+0x62c>)
 800763c:	2200      	movs	r2, #0
 800763e:	4640      	mov	r0, r8
 8007640:	4649      	mov	r1, r9
 8007642:	f7f8 fe31 	bl	80002a8 <__aeabi_dsub>
 8007646:	4652      	mov	r2, sl
 8007648:	465b      	mov	r3, fp
 800764a:	4680      	mov	r8, r0
 800764c:	4689      	mov	r9, r1
 800764e:	f7f9 fa73 	bl	8000b38 <__aeabi_dcmpgt>
 8007652:	2800      	cmp	r0, #0
 8007654:	f040 8295 	bne.w	8007b82 <_dtoa_r+0x97a>
 8007658:	4652      	mov	r2, sl
 800765a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f9 fa4b 	bl	8000afc <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	f040 8289 	bne.w	8007b7e <_dtoa_r+0x976>
 800766c:	ec5b ab19 	vmov	sl, fp, d9
 8007670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007672:	2b00      	cmp	r3, #0
 8007674:	f2c0 8148 	blt.w	8007908 <_dtoa_r+0x700>
 8007678:	9a00      	ldr	r2, [sp, #0]
 800767a:	2a0e      	cmp	r2, #14
 800767c:	f300 8144 	bgt.w	8007908 <_dtoa_r+0x700>
 8007680:	4b67      	ldr	r3, [pc, #412]	; (8007820 <_dtoa_r+0x618>)
 8007682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800768a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	f280 80d5 	bge.w	800783c <_dtoa_r+0x634>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f300 80d1 	bgt.w	800783c <_dtoa_r+0x634>
 800769a:	f040 826f 	bne.w	8007b7c <_dtoa_r+0x974>
 800769e:	4b65      	ldr	r3, [pc, #404]	; (8007834 <_dtoa_r+0x62c>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f8 ffb7 	bl	8000618 <__aeabi_dmul>
 80076aa:	4652      	mov	r2, sl
 80076ac:	465b      	mov	r3, fp
 80076ae:	f7f9 fa39 	bl	8000b24 <__aeabi_dcmpge>
 80076b2:	9e03      	ldr	r6, [sp, #12]
 80076b4:	4637      	mov	r7, r6
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f040 8245 	bne.w	8007b46 <_dtoa_r+0x93e>
 80076bc:	9d01      	ldr	r5, [sp, #4]
 80076be:	2331      	movs	r3, #49	; 0x31
 80076c0:	f805 3b01 	strb.w	r3, [r5], #1
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	3301      	adds	r3, #1
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	e240      	b.n	8007b4e <_dtoa_r+0x946>
 80076cc:	07f2      	lsls	r2, r6, #31
 80076ce:	d505      	bpl.n	80076dc <_dtoa_r+0x4d4>
 80076d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d4:	f7f8 ffa0 	bl	8000618 <__aeabi_dmul>
 80076d8:	3501      	adds	r5, #1
 80076da:	2301      	movs	r3, #1
 80076dc:	1076      	asrs	r6, r6, #1
 80076de:	3708      	adds	r7, #8
 80076e0:	e777      	b.n	80075d2 <_dtoa_r+0x3ca>
 80076e2:	2502      	movs	r5, #2
 80076e4:	e779      	b.n	80075da <_dtoa_r+0x3d2>
 80076e6:	9f00      	ldr	r7, [sp, #0]
 80076e8:	9e03      	ldr	r6, [sp, #12]
 80076ea:	e794      	b.n	8007616 <_dtoa_r+0x40e>
 80076ec:	9901      	ldr	r1, [sp, #4]
 80076ee:	4b4c      	ldr	r3, [pc, #304]	; (8007820 <_dtoa_r+0x618>)
 80076f0:	4431      	add	r1, r6
 80076f2:	910d      	str	r1, [sp, #52]	; 0x34
 80076f4:	9908      	ldr	r1, [sp, #32]
 80076f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076fe:	2900      	cmp	r1, #0
 8007700:	d043      	beq.n	800778a <_dtoa_r+0x582>
 8007702:	494d      	ldr	r1, [pc, #308]	; (8007838 <_dtoa_r+0x630>)
 8007704:	2000      	movs	r0, #0
 8007706:	f7f9 f8b1 	bl	800086c <__aeabi_ddiv>
 800770a:	4652      	mov	r2, sl
 800770c:	465b      	mov	r3, fp
 800770e:	f7f8 fdcb 	bl	80002a8 <__aeabi_dsub>
 8007712:	9d01      	ldr	r5, [sp, #4]
 8007714:	4682      	mov	sl, r0
 8007716:	468b      	mov	fp, r1
 8007718:	4649      	mov	r1, r9
 800771a:	4640      	mov	r0, r8
 800771c:	f7f9 fa2c 	bl	8000b78 <__aeabi_d2iz>
 8007720:	4606      	mov	r6, r0
 8007722:	f7f8 ff0f 	bl	8000544 <__aeabi_i2d>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f8 fdbb 	bl	80002a8 <__aeabi_dsub>
 8007732:	3630      	adds	r6, #48	; 0x30
 8007734:	f805 6b01 	strb.w	r6, [r5], #1
 8007738:	4652      	mov	r2, sl
 800773a:	465b      	mov	r3, fp
 800773c:	4680      	mov	r8, r0
 800773e:	4689      	mov	r9, r1
 8007740:	f7f9 f9dc 	bl	8000afc <__aeabi_dcmplt>
 8007744:	2800      	cmp	r0, #0
 8007746:	d163      	bne.n	8007810 <_dtoa_r+0x608>
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	4936      	ldr	r1, [pc, #216]	; (8007828 <_dtoa_r+0x620>)
 800774e:	2000      	movs	r0, #0
 8007750:	f7f8 fdaa 	bl	80002a8 <__aeabi_dsub>
 8007754:	4652      	mov	r2, sl
 8007756:	465b      	mov	r3, fp
 8007758:	f7f9 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800775c:	2800      	cmp	r0, #0
 800775e:	f040 80b5 	bne.w	80078cc <_dtoa_r+0x6c4>
 8007762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007764:	429d      	cmp	r5, r3
 8007766:	d081      	beq.n	800766c <_dtoa_r+0x464>
 8007768:	4b30      	ldr	r3, [pc, #192]	; (800782c <_dtoa_r+0x624>)
 800776a:	2200      	movs	r2, #0
 800776c:	4650      	mov	r0, sl
 800776e:	4659      	mov	r1, fp
 8007770:	f7f8 ff52 	bl	8000618 <__aeabi_dmul>
 8007774:	4b2d      	ldr	r3, [pc, #180]	; (800782c <_dtoa_r+0x624>)
 8007776:	4682      	mov	sl, r0
 8007778:	468b      	mov	fp, r1
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	2200      	movs	r2, #0
 8007780:	f7f8 ff4a 	bl	8000618 <__aeabi_dmul>
 8007784:	4680      	mov	r8, r0
 8007786:	4689      	mov	r9, r1
 8007788:	e7c6      	b.n	8007718 <_dtoa_r+0x510>
 800778a:	4650      	mov	r0, sl
 800778c:	4659      	mov	r1, fp
 800778e:	f7f8 ff43 	bl	8000618 <__aeabi_dmul>
 8007792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007794:	9d01      	ldr	r5, [sp, #4]
 8007796:	930f      	str	r3, [sp, #60]	; 0x3c
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	4649      	mov	r1, r9
 800779e:	4640      	mov	r0, r8
 80077a0:	f7f9 f9ea 	bl	8000b78 <__aeabi_d2iz>
 80077a4:	4606      	mov	r6, r0
 80077a6:	f7f8 fecd 	bl	8000544 <__aeabi_i2d>
 80077aa:	3630      	adds	r6, #48	; 0x30
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	f7f8 fd78 	bl	80002a8 <__aeabi_dsub>
 80077b8:	f805 6b01 	strb.w	r6, [r5], #1
 80077bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077be:	429d      	cmp	r5, r3
 80077c0:	4680      	mov	r8, r0
 80077c2:	4689      	mov	r9, r1
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	d124      	bne.n	8007814 <_dtoa_r+0x60c>
 80077ca:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <_dtoa_r+0x630>)
 80077cc:	4650      	mov	r0, sl
 80077ce:	4659      	mov	r1, fp
 80077d0:	f7f8 fd6c 	bl	80002ac <__adddf3>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f9 f9ac 	bl	8000b38 <__aeabi_dcmpgt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d173      	bne.n	80078cc <_dtoa_r+0x6c4>
 80077e4:	4652      	mov	r2, sl
 80077e6:	465b      	mov	r3, fp
 80077e8:	4913      	ldr	r1, [pc, #76]	; (8007838 <_dtoa_r+0x630>)
 80077ea:	2000      	movs	r0, #0
 80077ec:	f7f8 fd5c 	bl	80002a8 <__aeabi_dsub>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f9 f980 	bl	8000afc <__aeabi_dcmplt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f43f af35 	beq.w	800766c <_dtoa_r+0x464>
 8007802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007804:	1e6b      	subs	r3, r5, #1
 8007806:	930f      	str	r3, [sp, #60]	; 0x3c
 8007808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	d0f8      	beq.n	8007802 <_dtoa_r+0x5fa>
 8007810:	9700      	str	r7, [sp, #0]
 8007812:	e049      	b.n	80078a8 <_dtoa_r+0x6a0>
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <_dtoa_r+0x624>)
 8007816:	f7f8 feff 	bl	8000618 <__aeabi_dmul>
 800781a:	4680      	mov	r8, r0
 800781c:	4689      	mov	r9, r1
 800781e:	e7bd      	b.n	800779c <_dtoa_r+0x594>
 8007820:	0800a2d0 	.word	0x0800a2d0
 8007824:	0800a2a8 	.word	0x0800a2a8
 8007828:	3ff00000 	.word	0x3ff00000
 800782c:	40240000 	.word	0x40240000
 8007830:	401c0000 	.word	0x401c0000
 8007834:	40140000 	.word	0x40140000
 8007838:	3fe00000 	.word	0x3fe00000
 800783c:	9d01      	ldr	r5, [sp, #4]
 800783e:	4656      	mov	r6, sl
 8007840:	465f      	mov	r7, fp
 8007842:	4642      	mov	r2, r8
 8007844:	464b      	mov	r3, r9
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f80f 	bl	800086c <__aeabi_ddiv>
 800784e:	f7f9 f993 	bl	8000b78 <__aeabi_d2iz>
 8007852:	4682      	mov	sl, r0
 8007854:	f7f8 fe76 	bl	8000544 <__aeabi_i2d>
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	f7f8 fedc 	bl	8000618 <__aeabi_dmul>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800786c:	f7f8 fd1c 	bl	80002a8 <__aeabi_dsub>
 8007870:	f805 6b01 	strb.w	r6, [r5], #1
 8007874:	9e01      	ldr	r6, [sp, #4]
 8007876:	9f03      	ldr	r7, [sp, #12]
 8007878:	1bae      	subs	r6, r5, r6
 800787a:	42b7      	cmp	r7, r6
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	d135      	bne.n	80078ee <_dtoa_r+0x6e6>
 8007882:	f7f8 fd13 	bl	80002ac <__adddf3>
 8007886:	4642      	mov	r2, r8
 8007888:	464b      	mov	r3, r9
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	f7f9 f953 	bl	8000b38 <__aeabi_dcmpgt>
 8007892:	b9d0      	cbnz	r0, 80078ca <_dtoa_r+0x6c2>
 8007894:	4642      	mov	r2, r8
 8007896:	464b      	mov	r3, r9
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f924 	bl	8000ae8 <__aeabi_dcmpeq>
 80078a0:	b110      	cbz	r0, 80078a8 <_dtoa_r+0x6a0>
 80078a2:	f01a 0f01 	tst.w	sl, #1
 80078a6:	d110      	bne.n	80078ca <_dtoa_r+0x6c2>
 80078a8:	4620      	mov	r0, r4
 80078aa:	ee18 1a10 	vmov	r1, s16
 80078ae:	f001 f885 	bl	80089bc <_Bfree>
 80078b2:	2300      	movs	r3, #0
 80078b4:	9800      	ldr	r0, [sp, #0]
 80078b6:	702b      	strb	r3, [r5, #0]
 80078b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ba:	3001      	adds	r0, #1
 80078bc:	6018      	str	r0, [r3, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f43f acf1 	beq.w	80072a8 <_dtoa_r+0xa0>
 80078c6:	601d      	str	r5, [r3, #0]
 80078c8:	e4ee      	b.n	80072a8 <_dtoa_r+0xa0>
 80078ca:	9f00      	ldr	r7, [sp, #0]
 80078cc:	462b      	mov	r3, r5
 80078ce:	461d      	mov	r5, r3
 80078d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d4:	2a39      	cmp	r2, #57	; 0x39
 80078d6:	d106      	bne.n	80078e6 <_dtoa_r+0x6de>
 80078d8:	9a01      	ldr	r2, [sp, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d1f7      	bne.n	80078ce <_dtoa_r+0x6c6>
 80078de:	9901      	ldr	r1, [sp, #4]
 80078e0:	2230      	movs	r2, #48	; 0x30
 80078e2:	3701      	adds	r7, #1
 80078e4:	700a      	strb	r2, [r1, #0]
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	3201      	adds	r2, #1
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e790      	b.n	8007810 <_dtoa_r+0x608>
 80078ee:	4ba6      	ldr	r3, [pc, #664]	; (8007b88 <_dtoa_r+0x980>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	f7f8 fe91 	bl	8000618 <__aeabi_dmul>
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4606      	mov	r6, r0
 80078fc:	460f      	mov	r7, r1
 80078fe:	f7f9 f8f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007902:	2800      	cmp	r0, #0
 8007904:	d09d      	beq.n	8007842 <_dtoa_r+0x63a>
 8007906:	e7cf      	b.n	80078a8 <_dtoa_r+0x6a0>
 8007908:	9a08      	ldr	r2, [sp, #32]
 800790a:	2a00      	cmp	r2, #0
 800790c:	f000 80d7 	beq.w	8007abe <_dtoa_r+0x8b6>
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	2a01      	cmp	r2, #1
 8007914:	f300 80ba 	bgt.w	8007a8c <_dtoa_r+0x884>
 8007918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800791a:	2a00      	cmp	r2, #0
 800791c:	f000 80b2 	beq.w	8007a84 <_dtoa_r+0x87c>
 8007920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007924:	9e07      	ldr	r6, [sp, #28]
 8007926:	9d04      	ldr	r5, [sp, #16]
 8007928:	9a04      	ldr	r2, [sp, #16]
 800792a:	441a      	add	r2, r3
 800792c:	9204      	str	r2, [sp, #16]
 800792e:	9a05      	ldr	r2, [sp, #20]
 8007930:	2101      	movs	r1, #1
 8007932:	441a      	add	r2, r3
 8007934:	4620      	mov	r0, r4
 8007936:	9205      	str	r2, [sp, #20]
 8007938:	f001 f942 	bl	8008bc0 <__i2b>
 800793c:	4607      	mov	r7, r0
 800793e:	2d00      	cmp	r5, #0
 8007940:	dd0c      	ble.n	800795c <_dtoa_r+0x754>
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dd09      	ble.n	800795c <_dtoa_r+0x754>
 8007948:	42ab      	cmp	r3, r5
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	bfa8      	it	ge
 800794e:	462b      	movge	r3, r5
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	9204      	str	r2, [sp, #16]
 8007954:	9a05      	ldr	r2, [sp, #20]
 8007956:	1aed      	subs	r5, r5, r3
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	b31b      	cbz	r3, 80079a8 <_dtoa_r+0x7a0>
 8007960:	9b08      	ldr	r3, [sp, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80af 	beq.w	8007ac6 <_dtoa_r+0x8be>
 8007968:	2e00      	cmp	r6, #0
 800796a:	dd13      	ble.n	8007994 <_dtoa_r+0x78c>
 800796c:	4639      	mov	r1, r7
 800796e:	4632      	mov	r2, r6
 8007970:	4620      	mov	r0, r4
 8007972:	f001 f9e5 	bl	8008d40 <__pow5mult>
 8007976:	ee18 2a10 	vmov	r2, s16
 800797a:	4601      	mov	r1, r0
 800797c:	4607      	mov	r7, r0
 800797e:	4620      	mov	r0, r4
 8007980:	f001 f934 	bl	8008bec <__multiply>
 8007984:	ee18 1a10 	vmov	r1, s16
 8007988:	4680      	mov	r8, r0
 800798a:	4620      	mov	r0, r4
 800798c:	f001 f816 	bl	80089bc <_Bfree>
 8007990:	ee08 8a10 	vmov	s16, r8
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	1b9a      	subs	r2, r3, r6
 8007998:	d006      	beq.n	80079a8 <_dtoa_r+0x7a0>
 800799a:	ee18 1a10 	vmov	r1, s16
 800799e:	4620      	mov	r0, r4
 80079a0:	f001 f9ce 	bl	8008d40 <__pow5mult>
 80079a4:	ee08 0a10 	vmov	s16, r0
 80079a8:	2101      	movs	r1, #1
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 f908 	bl	8008bc0 <__i2b>
 80079b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	4606      	mov	r6, r0
 80079b6:	f340 8088 	ble.w	8007aca <_dtoa_r+0x8c2>
 80079ba:	461a      	mov	r2, r3
 80079bc:	4601      	mov	r1, r0
 80079be:	4620      	mov	r0, r4
 80079c0:	f001 f9be 	bl	8008d40 <__pow5mult>
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	4606      	mov	r6, r0
 80079ca:	f340 8081 	ble.w	8007ad0 <_dtoa_r+0x8c8>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	6933      	ldr	r3, [r6, #16]
 80079d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079d8:	6918      	ldr	r0, [r3, #16]
 80079da:	f001 f8a1 	bl	8008b20 <__hi0bits>
 80079de:	f1c0 0020 	rsb	r0, r0, #32
 80079e2:	9b05      	ldr	r3, [sp, #20]
 80079e4:	4418      	add	r0, r3
 80079e6:	f010 001f 	ands.w	r0, r0, #31
 80079ea:	f000 8092 	beq.w	8007b12 <_dtoa_r+0x90a>
 80079ee:	f1c0 0320 	rsb	r3, r0, #32
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	f340 808a 	ble.w	8007b0c <_dtoa_r+0x904>
 80079f8:	f1c0 001c 	rsb	r0, r0, #28
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	4403      	add	r3, r0
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	9b05      	ldr	r3, [sp, #20]
 8007a04:	4403      	add	r3, r0
 8007a06:	4405      	add	r5, r0
 8007a08:	9305      	str	r3, [sp, #20]
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd07      	ble.n	8007a20 <_dtoa_r+0x818>
 8007a10:	ee18 1a10 	vmov	r1, s16
 8007a14:	461a      	mov	r2, r3
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 f9ec 	bl	8008df4 <__lshift>
 8007a1c:	ee08 0a10 	vmov	s16, r0
 8007a20:	9b05      	ldr	r3, [sp, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x82a>
 8007a26:	4631      	mov	r1, r6
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 f9e2 	bl	8008df4 <__lshift>
 8007a30:	4606      	mov	r6, r0
 8007a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d06e      	beq.n	8007b16 <_dtoa_r+0x90e>
 8007a38:	ee18 0a10 	vmov	r0, s16
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	f001 fa49 	bl	8008ed4 <__mcmp>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	da67      	bge.n	8007b16 <_dtoa_r+0x90e>
 8007a46:	9b00      	ldr	r3, [sp, #0]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	ee18 1a10 	vmov	r1, s16
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	220a      	movs	r2, #10
 8007a52:	2300      	movs	r3, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 ffd3 	bl	8008a00 <__multadd>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	ee08 0a10 	vmov	s16, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 81b1 	beq.w	8007dc8 <_dtoa_r+0xbc0>
 8007a66:	2300      	movs	r3, #0
 8007a68:	4639      	mov	r1, r7
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 ffc7 	bl	8008a00 <__multadd>
 8007a72:	9b02      	ldr	r3, [sp, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	4607      	mov	r7, r0
 8007a78:	f300 808e 	bgt.w	8007b98 <_dtoa_r+0x990>
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dc51      	bgt.n	8007b26 <_dtoa_r+0x91e>
 8007a82:	e089      	b.n	8007b98 <_dtoa_r+0x990>
 8007a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a8a:	e74b      	b.n	8007924 <_dtoa_r+0x71c>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	1e5e      	subs	r6, r3, #1
 8007a90:	9b07      	ldr	r3, [sp, #28]
 8007a92:	42b3      	cmp	r3, r6
 8007a94:	bfbf      	itttt	lt
 8007a96:	9b07      	ldrlt	r3, [sp, #28]
 8007a98:	9607      	strlt	r6, [sp, #28]
 8007a9a:	1af2      	sublt	r2, r6, r3
 8007a9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a9e:	bfb6      	itet	lt
 8007aa0:	189b      	addlt	r3, r3, r2
 8007aa2:	1b9e      	subge	r6, r3, r6
 8007aa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	bfb8      	it	lt
 8007aaa:	2600      	movlt	r6, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfb7      	itett	lt
 8007ab0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ab4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ab8:	1a9d      	sublt	r5, r3, r2
 8007aba:	2300      	movlt	r3, #0
 8007abc:	e734      	b.n	8007928 <_dtoa_r+0x720>
 8007abe:	9e07      	ldr	r6, [sp, #28]
 8007ac0:	9d04      	ldr	r5, [sp, #16]
 8007ac2:	9f08      	ldr	r7, [sp, #32]
 8007ac4:	e73b      	b.n	800793e <_dtoa_r+0x736>
 8007ac6:	9a07      	ldr	r2, [sp, #28]
 8007ac8:	e767      	b.n	800799a <_dtoa_r+0x792>
 8007aca:	9b06      	ldr	r3, [sp, #24]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	dc18      	bgt.n	8007b02 <_dtoa_r+0x8fa>
 8007ad0:	f1ba 0f00 	cmp.w	sl, #0
 8007ad4:	d115      	bne.n	8007b02 <_dtoa_r+0x8fa>
 8007ad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ada:	b993      	cbnz	r3, 8007b02 <_dtoa_r+0x8fa>
 8007adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ae0:	0d1b      	lsrs	r3, r3, #20
 8007ae2:	051b      	lsls	r3, r3, #20
 8007ae4:	b183      	cbz	r3, 8007b08 <_dtoa_r+0x900>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	9b05      	ldr	r3, [sp, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	9305      	str	r3, [sp, #20]
 8007af2:	f04f 0801 	mov.w	r8, #1
 8007af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f47f af6a 	bne.w	80079d2 <_dtoa_r+0x7ca>
 8007afe:	2001      	movs	r0, #1
 8007b00:	e76f      	b.n	80079e2 <_dtoa_r+0x7da>
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	e7f6      	b.n	8007af6 <_dtoa_r+0x8ee>
 8007b08:	4698      	mov	r8, r3
 8007b0a:	e7f4      	b.n	8007af6 <_dtoa_r+0x8ee>
 8007b0c:	f43f af7d 	beq.w	8007a0a <_dtoa_r+0x802>
 8007b10:	4618      	mov	r0, r3
 8007b12:	301c      	adds	r0, #28
 8007b14:	e772      	b.n	80079fc <_dtoa_r+0x7f4>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc37      	bgt.n	8007b8c <_dtoa_r+0x984>
 8007b1c:	9b06      	ldr	r3, [sp, #24]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	dd34      	ble.n	8007b8c <_dtoa_r+0x984>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	9302      	str	r3, [sp, #8]
 8007b26:	9b02      	ldr	r3, [sp, #8]
 8007b28:	b96b      	cbnz	r3, 8007b46 <_dtoa_r+0x93e>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 ff66 	bl	8008a00 <__multadd>
 8007b34:	4601      	mov	r1, r0
 8007b36:	4606      	mov	r6, r0
 8007b38:	ee18 0a10 	vmov	r0, s16
 8007b3c:	f001 f9ca 	bl	8008ed4 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f73f adbb 	bgt.w	80076bc <_dtoa_r+0x4b4>
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	9d01      	ldr	r5, [sp, #4]
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	4631      	mov	r1, r6
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 ff31 	bl	80089bc <_Bfree>
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	f43f aea4 	beq.w	80078a8 <_dtoa_r+0x6a0>
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	d005      	beq.n	8007b72 <_dtoa_r+0x96a>
 8007b66:	45b8      	cmp	r8, r7
 8007b68:	d003      	beq.n	8007b72 <_dtoa_r+0x96a>
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 ff25 	bl	80089bc <_Bfree>
 8007b72:	4639      	mov	r1, r7
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 ff21 	bl	80089bc <_Bfree>
 8007b7a:	e695      	b.n	80078a8 <_dtoa_r+0x6a0>
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	4637      	mov	r7, r6
 8007b80:	e7e1      	b.n	8007b46 <_dtoa_r+0x93e>
 8007b82:	9700      	str	r7, [sp, #0]
 8007b84:	4637      	mov	r7, r6
 8007b86:	e599      	b.n	80076bc <_dtoa_r+0x4b4>
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	9b08      	ldr	r3, [sp, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80ca 	beq.w	8007d28 <_dtoa_r+0xb20>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	dd05      	ble.n	8007ba8 <_dtoa_r+0x9a0>
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f001 f927 	bl	8008df4 <__lshift>
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	f1b8 0f00 	cmp.w	r8, #0
 8007bac:	d05b      	beq.n	8007c66 <_dtoa_r+0xa5e>
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fec3 	bl	800893c <_Balloc>
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	b928      	cbnz	r0, 8007bc6 <_dtoa_r+0x9be>
 8007bba:	4b87      	ldr	r3, [pc, #540]	; (8007dd8 <_dtoa_r+0xbd0>)
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bc2:	f7ff bb3b 	b.w	800723c <_dtoa_r+0x34>
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	3202      	adds	r2, #2
 8007bca:	0092      	lsls	r2, r2, #2
 8007bcc:	f107 010c 	add.w	r1, r7, #12
 8007bd0:	300c      	adds	r0, #12
 8007bd2:	f7fd fc6b 	bl	80054ac <memcpy>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f001 f90a 	bl	8008df4 <__lshift>
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	f103 0901 	add.w	r9, r3, #1
 8007be6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	f00a 0301 	and.w	r3, sl, #1
 8007bf2:	46b8      	mov	r8, r7
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	4607      	mov	r7, r0
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	ee18 0a10 	vmov	r0, s16
 8007bfe:	f7ff fa77 	bl	80070f0 <quorem>
 8007c02:	4641      	mov	r1, r8
 8007c04:	9002      	str	r0, [sp, #8]
 8007c06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c0a:	ee18 0a10 	vmov	r0, s16
 8007c0e:	f001 f961 	bl	8008ed4 <__mcmp>
 8007c12:	463a      	mov	r2, r7
 8007c14:	9003      	str	r0, [sp, #12]
 8007c16:	4631      	mov	r1, r6
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 f977 	bl	8008f0c <__mdiff>
 8007c1e:	68c2      	ldr	r2, [r0, #12]
 8007c20:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007c24:	4605      	mov	r5, r0
 8007c26:	bb02      	cbnz	r2, 8007c6a <_dtoa_r+0xa62>
 8007c28:	4601      	mov	r1, r0
 8007c2a:	ee18 0a10 	vmov	r0, s16
 8007c2e:	f001 f951 	bl	8008ed4 <__mcmp>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4629      	mov	r1, r5
 8007c36:	4620      	mov	r0, r4
 8007c38:	9207      	str	r2, [sp, #28]
 8007c3a:	f000 febf 	bl	80089bc <_Bfree>
 8007c3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c42:	ea43 0102 	orr.w	r1, r3, r2
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	464d      	mov	r5, r9
 8007c4c:	d10f      	bne.n	8007c6e <_dtoa_r+0xa66>
 8007c4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c52:	d02a      	beq.n	8007caa <_dtoa_r+0xaa2>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd02      	ble.n	8007c60 <_dtoa_r+0xa58>
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c60:	f88b a000 	strb.w	sl, [fp]
 8007c64:	e775      	b.n	8007b52 <_dtoa_r+0x94a>
 8007c66:	4638      	mov	r0, r7
 8007c68:	e7ba      	b.n	8007be0 <_dtoa_r+0x9d8>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	e7e2      	b.n	8007c34 <_dtoa_r+0xa2c>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db04      	blt.n	8007c7e <_dtoa_r+0xa76>
 8007c74:	9906      	ldr	r1, [sp, #24]
 8007c76:	430b      	orrs	r3, r1
 8007c78:	9904      	ldr	r1, [sp, #16]
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	d122      	bne.n	8007cc4 <_dtoa_r+0xabc>
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	ddee      	ble.n	8007c60 <_dtoa_r+0xa58>
 8007c82:	ee18 1a10 	vmov	r1, s16
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f001 f8b3 	bl	8008df4 <__lshift>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	ee08 0a10 	vmov	s16, r0
 8007c94:	f001 f91e 	bl	8008ed4 <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dc03      	bgt.n	8007ca4 <_dtoa_r+0xa9c>
 8007c9c:	d1e0      	bne.n	8007c60 <_dtoa_r+0xa58>
 8007c9e:	f01a 0f01 	tst.w	sl, #1
 8007ca2:	d0dd      	beq.n	8007c60 <_dtoa_r+0xa58>
 8007ca4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ca8:	d1d7      	bne.n	8007c5a <_dtoa_r+0xa52>
 8007caa:	2339      	movs	r3, #57	; 0x39
 8007cac:	f88b 3000 	strb.w	r3, [fp]
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cba:	2a39      	cmp	r2, #57	; 0x39
 8007cbc:	d071      	beq.n	8007da2 <_dtoa_r+0xb9a>
 8007cbe:	3201      	adds	r2, #1
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e746      	b.n	8007b52 <_dtoa_r+0x94a>
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	dd07      	ble.n	8007cd8 <_dtoa_r+0xad0>
 8007cc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ccc:	d0ed      	beq.n	8007caa <_dtoa_r+0xaa2>
 8007cce:	f10a 0301 	add.w	r3, sl, #1
 8007cd2:	f88b 3000 	strb.w	r3, [fp]
 8007cd6:	e73c      	b.n	8007b52 <_dtoa_r+0x94a>
 8007cd8:	9b05      	ldr	r3, [sp, #20]
 8007cda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007cde:	4599      	cmp	r9, r3
 8007ce0:	d047      	beq.n	8007d72 <_dtoa_r+0xb6a>
 8007ce2:	ee18 1a10 	vmov	r1, s16
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fe88 	bl	8008a00 <__multadd>
 8007cf0:	45b8      	cmp	r8, r7
 8007cf2:	ee08 0a10 	vmov	s16, r0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	f04f 020a 	mov.w	r2, #10
 8007cfe:	4641      	mov	r1, r8
 8007d00:	4620      	mov	r0, r4
 8007d02:	d106      	bne.n	8007d12 <_dtoa_r+0xb0a>
 8007d04:	f000 fe7c 	bl	8008a00 <__multadd>
 8007d08:	4680      	mov	r8, r0
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	f109 0901 	add.w	r9, r9, #1
 8007d10:	e772      	b.n	8007bf8 <_dtoa_r+0x9f0>
 8007d12:	f000 fe75 	bl	8008a00 <__multadd>
 8007d16:	4639      	mov	r1, r7
 8007d18:	4680      	mov	r8, r0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fe6e 	bl	8008a00 <__multadd>
 8007d24:	4607      	mov	r7, r0
 8007d26:	e7f1      	b.n	8007d0c <_dtoa_r+0xb04>
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	9302      	str	r3, [sp, #8]
 8007d2c:	9d01      	ldr	r5, [sp, #4]
 8007d2e:	ee18 0a10 	vmov	r0, s16
 8007d32:	4631      	mov	r1, r6
 8007d34:	f7ff f9dc 	bl	80070f0 <quorem>
 8007d38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	f805 ab01 	strb.w	sl, [r5], #1
 8007d42:	1aea      	subs	r2, r5, r3
 8007d44:	9b02      	ldr	r3, [sp, #8]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	dd09      	ble.n	8007d5e <_dtoa_r+0xb56>
 8007d4a:	ee18 1a10 	vmov	r1, s16
 8007d4e:	2300      	movs	r3, #0
 8007d50:	220a      	movs	r2, #10
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fe54 	bl	8008a00 <__multadd>
 8007d58:	ee08 0a10 	vmov	s16, r0
 8007d5c:	e7e7      	b.n	8007d2e <_dtoa_r+0xb26>
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfc8      	it	gt
 8007d64:	461d      	movgt	r5, r3
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	bfd8      	it	le
 8007d6a:	2501      	movle	r5, #1
 8007d6c:	441d      	add	r5, r3
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	ee18 1a10 	vmov	r1, s16
 8007d76:	2201      	movs	r2, #1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f001 f83b 	bl	8008df4 <__lshift>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	ee08 0a10 	vmov	s16, r0
 8007d84:	f001 f8a6 	bl	8008ed4 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dc91      	bgt.n	8007cb0 <_dtoa_r+0xaa8>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xb8c>
 8007d8e:	f01a 0f01 	tst.w	sl, #1
 8007d92:	d18d      	bne.n	8007cb0 <_dtoa_r+0xaa8>
 8007d94:	462b      	mov	r3, r5
 8007d96:	461d      	mov	r5, r3
 8007d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d9c:	2a30      	cmp	r2, #48	; 0x30
 8007d9e:	d0fa      	beq.n	8007d96 <_dtoa_r+0xb8e>
 8007da0:	e6d7      	b.n	8007b52 <_dtoa_r+0x94a>
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d184      	bne.n	8007cb2 <_dtoa_r+0xaaa>
 8007da8:	9b00      	ldr	r3, [sp, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2331      	movs	r3, #49	; 0x31
 8007db0:	7013      	strb	r3, [r2, #0]
 8007db2:	e6ce      	b.n	8007b52 <_dtoa_r+0x94a>
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <_dtoa_r+0xbd4>)
 8007db6:	f7ff ba95 	b.w	80072e4 <_dtoa_r+0xdc>
 8007dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f aa6e 	bne.w	800729e <_dtoa_r+0x96>
 8007dc2:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <_dtoa_r+0xbd8>)
 8007dc4:	f7ff ba8e 	b.w	80072e4 <_dtoa_r+0xdc>
 8007dc8:	9b02      	ldr	r3, [sp, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dcae      	bgt.n	8007d2c <_dtoa_r+0xb24>
 8007dce:	9b06      	ldr	r3, [sp, #24]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f73f aea8 	bgt.w	8007b26 <_dtoa_r+0x91e>
 8007dd6:	e7a9      	b.n	8007d2c <_dtoa_r+0xb24>
 8007dd8:	0800a158 	.word	0x0800a158
 8007ddc:	08009f58 	.word	0x08009f58
 8007de0:	0800a0d9 	.word	0x0800a0d9

08007de4 <__sflush_r>:
 8007de4:	898a      	ldrh	r2, [r1, #12]
 8007de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	0710      	lsls	r0, r2, #28
 8007dee:	460c      	mov	r4, r1
 8007df0:	d458      	bmi.n	8007ea4 <__sflush_r+0xc0>
 8007df2:	684b      	ldr	r3, [r1, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc05      	bgt.n	8007e04 <__sflush_r+0x20>
 8007df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc02      	bgt.n	8007e04 <__sflush_r+0x20>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d0f9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e10:	682f      	ldr	r7, [r5, #0]
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	d032      	beq.n	8007e7c <__sflush_r+0x98>
 8007e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	075a      	lsls	r2, r3, #29
 8007e1c:	d505      	bpl.n	8007e2a <__sflush_r+0x46>
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e24:	b10b      	cbz	r3, 8007e2a <__sflush_r+0x46>
 8007e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b0      	blx	r6
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	d106      	bne.n	8007e4a <__sflush_r+0x66>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	291d      	cmp	r1, #29
 8007e40:	d82c      	bhi.n	8007e9c <__sflush_r+0xb8>
 8007e42:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <__sflush_r+0x108>)
 8007e44:	40ca      	lsrs	r2, r1
 8007e46:	07d6      	lsls	r6, r2, #31
 8007e48:	d528      	bpl.n	8007e9c <__sflush_r+0xb8>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	6062      	str	r2, [r4, #4]
 8007e4e:	04d9      	lsls	r1, r3, #19
 8007e50:	6922      	ldr	r2, [r4, #16]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	d504      	bpl.n	8007e60 <__sflush_r+0x7c>
 8007e56:	1c42      	adds	r2, r0, #1
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0x7a>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b903      	cbnz	r3, 8007e60 <__sflush_r+0x7c>
 8007e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e62:	602f      	str	r7, [r5, #0]
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d0ca      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d002      	beq.n	8007e76 <__sflush_r+0x92>
 8007e70:	4628      	mov	r0, r5
 8007e72:	f001 fa3b 	bl	80092ec <_free_r>
 8007e76:	2000      	movs	r0, #0
 8007e78:	6360      	str	r0, [r4, #52]	; 0x34
 8007e7a:	e7c1      	b.n	8007e00 <__sflush_r+0x1c>
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	1c41      	adds	r1, r0, #1
 8007e86:	d1c7      	bne.n	8007e18 <__sflush_r+0x34>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c4      	beq.n	8007e18 <__sflush_r+0x34>
 8007e8e:	2b1d      	cmp	r3, #29
 8007e90:	d001      	beq.n	8007e96 <__sflush_r+0xb2>
 8007e92:	2b16      	cmp	r3, #22
 8007e94:	d101      	bne.n	8007e9a <__sflush_r+0xb6>
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	e7b1      	b.n	8007dfe <__sflush_r+0x1a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e7ad      	b.n	8007e00 <__sflush_r+0x1c>
 8007ea4:	690f      	ldr	r7, [r1, #16]
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d0a9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007eaa:	0793      	lsls	r3, r2, #30
 8007eac:	680e      	ldr	r6, [r1, #0]
 8007eae:	bf08      	it	eq
 8007eb0:	694b      	ldreq	r3, [r1, #20]
 8007eb2:	600f      	str	r7, [r1, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	eba6 0807 	sub.w	r8, r6, r7
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd9c      	ble.n	8007dfe <__sflush_r+0x1a>
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec8:	4643      	mov	r3, r8
 8007eca:	463a      	mov	r2, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dc06      	bgt.n	8007ee2 <__sflush_r+0xfe>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ee0:	e78e      	b.n	8007e00 <__sflush_r+0x1c>
 8007ee2:	4407      	add	r7, r0
 8007ee4:	eba8 0800 	sub.w	r8, r8, r0
 8007ee8:	e7e9      	b.n	8007ebe <__sflush_r+0xda>
 8007eea:	bf00      	nop
 8007eec:	20400001 	.word	0x20400001

08007ef0 <_fflush_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	690b      	ldr	r3, [r1, #16]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b913      	cbnz	r3, 8007f00 <_fflush_r+0x10>
 8007efa:	2500      	movs	r5, #0
 8007efc:	4628      	mov	r0, r5
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	b118      	cbz	r0, 8007f0a <_fflush_r+0x1a>
 8007f02:	6983      	ldr	r3, [r0, #24]
 8007f04:	b90b      	cbnz	r3, 8007f0a <_fflush_r+0x1a>
 8007f06:	f000 f887 	bl	8008018 <__sinit>
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <_fflush_r+0x6c>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d11b      	bne.n	8007f48 <_fflush_r+0x58>
 8007f10:	686c      	ldr	r4, [r5, #4]
 8007f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0ef      	beq.n	8007efa <_fflush_r+0xa>
 8007f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f1c:	07d0      	lsls	r0, r2, #31
 8007f1e:	d404      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f20:	0599      	lsls	r1, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f000 fc88 	bl	800883a <__retarget_lock_acquire_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7ff ff59 	bl	8007de4 <__sflush_r>
 8007f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	4605      	mov	r5, r0
 8007f38:	d4e0      	bmi.n	8007efc <_fflush_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	d4dd      	bmi.n	8007efc <_fflush_r+0xc>
 8007f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f42:	f000 fc7b 	bl	800883c <__retarget_lock_release_recursive>
 8007f46:	e7d9      	b.n	8007efc <_fflush_r+0xc>
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <_fflush_r+0x70>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <_fflush_r+0x62>
 8007f4e:	68ac      	ldr	r4, [r5, #8]
 8007f50:	e7df      	b.n	8007f12 <_fflush_r+0x22>
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <_fflush_r+0x74>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68ec      	ldreq	r4, [r5, #12]
 8007f5a:	e7da      	b.n	8007f12 <_fflush_r+0x22>
 8007f5c:	0800a18c 	.word	0x0800a18c
 8007f60:	0800a1ac 	.word	0x0800a1ac
 8007f64:	0800a16c 	.word	0x0800a16c

08007f68 <std>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f76:	6083      	str	r3, [r0, #8]
 8007f78:	8181      	strh	r1, [r0, #12]
 8007f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f7c:	81c2      	strh	r2, [r0, #14]
 8007f7e:	6183      	str	r3, [r0, #24]
 8007f80:	4619      	mov	r1, r3
 8007f82:	2208      	movs	r2, #8
 8007f84:	305c      	adds	r0, #92	; 0x5c
 8007f86:	f7fd fa9f 	bl	80054c8 <memset>
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x38>)
 8007f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <std+0x3c>)
 8007f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x40>)
 8007f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x44>)
 8007f98:	6224      	str	r4, [r4, #32]
 8007f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	08009799 	.word	0x08009799
 8007fa4:	080097bb 	.word	0x080097bb
 8007fa8:	080097f3 	.word	0x080097f3
 8007fac:	08009817 	.word	0x08009817

08007fb0 <_cleanup_r>:
 8007fb0:	4901      	ldr	r1, [pc, #4]	; (8007fb8 <_cleanup_r+0x8>)
 8007fb2:	f000 b8af 	b.w	8008114 <_fwalk_reent>
 8007fb6:	bf00      	nop
 8007fb8:	08007ef1 	.word	0x08007ef1

08007fbc <__sfmoreglue>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	2268      	movs	r2, #104	; 0x68
 8007fc0:	1e4d      	subs	r5, r1, #1
 8007fc2:	4355      	muls	r5, r2
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fca:	f001 f9fb 	bl	80093c4 <_malloc_r>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b140      	cbz	r0, 8007fe4 <__sfmoreglue+0x28>
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fd8:	300c      	adds	r0, #12
 8007fda:	60a0      	str	r0, [r4, #8]
 8007fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe0:	f7fd fa72 	bl	80054c8 <memset>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <__sfp_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sfp_lock_acquire+0x8>)
 8007fea:	f000 bc26 	b.w	800883a <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000309 	.word	0x20000309

08007ff4 <__sfp_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sfp_lock_release+0x8>)
 8007ff6:	f000 bc21 	b.w	800883c <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000309 	.word	0x20000309

08008000 <__sinit_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sinit_lock_acquire+0x8>)
 8008002:	f000 bc1a 	b.w	800883a <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	2000030a 	.word	0x2000030a

0800800c <__sinit_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sinit_lock_release+0x8>)
 800800e:	f000 bc15 	b.w	800883c <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	2000030a 	.word	0x2000030a

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sinit_lock_acquire>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sinit_lock_release>
 800802c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008030:	6523      	str	r3, [r4, #80]	; 0x50
 8008032:	4b13      	ldr	r3, [pc, #76]	; (8008080 <__sinit+0x68>)
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <__sinit+0x6c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	62a2      	str	r2, [r4, #40]	; 0x28
 800803a:	42a3      	cmp	r3, r4
 800803c:	bf04      	itt	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	61a3      	streq	r3, [r4, #24]
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f820 	bl	8008088 <__sfp>
 8008048:	6060      	str	r0, [r4, #4]
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f81c 	bl	8008088 <__sfp>
 8008050:	60a0      	str	r0, [r4, #8]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f818 	bl	8008088 <__sfp>
 8008058:	2200      	movs	r2, #0
 800805a:	60e0      	str	r0, [r4, #12]
 800805c:	2104      	movs	r1, #4
 800805e:	6860      	ldr	r0, [r4, #4]
 8008060:	f7ff ff82 	bl	8007f68 <std>
 8008064:	68a0      	ldr	r0, [r4, #8]
 8008066:	2201      	movs	r2, #1
 8008068:	2109      	movs	r1, #9
 800806a:	f7ff ff7d 	bl	8007f68 <std>
 800806e:	68e0      	ldr	r0, [r4, #12]
 8008070:	2202      	movs	r2, #2
 8008072:	2112      	movs	r1, #18
 8008074:	f7ff ff78 	bl	8007f68 <std>
 8008078:	2301      	movs	r3, #1
 800807a:	61a3      	str	r3, [r4, #24]
 800807c:	e7d2      	b.n	8008024 <__sinit+0xc>
 800807e:	bf00      	nop
 8008080:	08009f44 	.word	0x08009f44
 8008084:	08007fb1 	.word	0x08007fb1

08008088 <__sfp>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	4607      	mov	r7, r0
 800808c:	f7ff ffac 	bl	8007fe8 <__sfp_lock_acquire>
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <__sfp+0x84>)
 8008092:	681e      	ldr	r6, [r3, #0]
 8008094:	69b3      	ldr	r3, [r6, #24]
 8008096:	b913      	cbnz	r3, 800809e <__sfp+0x16>
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff ffbd 	bl	8008018 <__sinit>
 800809e:	3648      	adds	r6, #72	; 0x48
 80080a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	d503      	bpl.n	80080b0 <__sfp+0x28>
 80080a8:	6833      	ldr	r3, [r6, #0]
 80080aa:	b30b      	cbz	r3, 80080f0 <__sfp+0x68>
 80080ac:	6836      	ldr	r6, [r6, #0]
 80080ae:	e7f7      	b.n	80080a0 <__sfp+0x18>
 80080b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080b4:	b9d5      	cbnz	r5, 80080ec <__sfp+0x64>
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <__sfp+0x88>)
 80080b8:	60e3      	str	r3, [r4, #12]
 80080ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080be:	6665      	str	r5, [r4, #100]	; 0x64
 80080c0:	f000 fbba 	bl	8008838 <__retarget_lock_init_recursive>
 80080c4:	f7ff ff96 	bl	8007ff4 <__sfp_lock_release>
 80080c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d0:	6025      	str	r5, [r4, #0]
 80080d2:	61a5      	str	r5, [r4, #24]
 80080d4:	2208      	movs	r2, #8
 80080d6:	4629      	mov	r1, r5
 80080d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080dc:	f7fd f9f4 	bl	80054c8 <memset>
 80080e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080e8:	4620      	mov	r0, r4
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	3468      	adds	r4, #104	; 0x68
 80080ee:	e7d9      	b.n	80080a4 <__sfp+0x1c>
 80080f0:	2104      	movs	r1, #4
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff ff62 	bl	8007fbc <__sfmoreglue>
 80080f8:	4604      	mov	r4, r0
 80080fa:	6030      	str	r0, [r6, #0]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1d5      	bne.n	80080ac <__sfp+0x24>
 8008100:	f7ff ff78 	bl	8007ff4 <__sfp_lock_release>
 8008104:	230c      	movs	r3, #12
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	e7ee      	b.n	80080e8 <__sfp+0x60>
 800810a:	bf00      	nop
 800810c:	08009f44 	.word	0x08009f44
 8008110:	ffff0001 	.word	0xffff0001

08008114 <_fwalk_reent>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4606      	mov	r6, r0
 800811a:	4688      	mov	r8, r1
 800811c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008120:	2700      	movs	r7, #0
 8008122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008126:	f1b9 0901 	subs.w	r9, r9, #1
 800812a:	d505      	bpl.n	8008138 <_fwalk_reent+0x24>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	2c00      	cmp	r4, #0
 8008130:	d1f7      	bne.n	8008122 <_fwalk_reent+0xe>
 8008132:	4638      	mov	r0, r7
 8008134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008138:	89ab      	ldrh	r3, [r5, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d907      	bls.n	800814e <_fwalk_reent+0x3a>
 800813e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008142:	3301      	adds	r3, #1
 8008144:	d003      	beq.n	800814e <_fwalk_reent+0x3a>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	47c0      	blx	r8
 800814c:	4307      	orrs	r7, r0
 800814e:	3568      	adds	r5, #104	; 0x68
 8008150:	e7e9      	b.n	8008126 <_fwalk_reent+0x12>

08008152 <rshift>:
 8008152:	6903      	ldr	r3, [r0, #16]
 8008154:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800815c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008160:	f100 0414 	add.w	r4, r0, #20
 8008164:	dd45      	ble.n	80081f2 <rshift+0xa0>
 8008166:	f011 011f 	ands.w	r1, r1, #31
 800816a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800816e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008172:	d10c      	bne.n	800818e <rshift+0x3c>
 8008174:	f100 0710 	add.w	r7, r0, #16
 8008178:	4629      	mov	r1, r5
 800817a:	42b1      	cmp	r1, r6
 800817c:	d334      	bcc.n	80081e8 <rshift+0x96>
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	1eea      	subs	r2, r5, #3
 8008184:	4296      	cmp	r6, r2
 8008186:	bf38      	it	cc
 8008188:	2300      	movcc	r3, #0
 800818a:	4423      	add	r3, r4
 800818c:	e015      	b.n	80081ba <rshift+0x68>
 800818e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008192:	f1c1 0820 	rsb	r8, r1, #32
 8008196:	40cf      	lsrs	r7, r1
 8008198:	f105 0e04 	add.w	lr, r5, #4
 800819c:	46a1      	mov	r9, r4
 800819e:	4576      	cmp	r6, lr
 80081a0:	46f4      	mov	ip, lr
 80081a2:	d815      	bhi.n	80081d0 <rshift+0x7e>
 80081a4:	1a9a      	subs	r2, r3, r2
 80081a6:	0092      	lsls	r2, r2, #2
 80081a8:	3a04      	subs	r2, #4
 80081aa:	3501      	adds	r5, #1
 80081ac:	42ae      	cmp	r6, r5
 80081ae:	bf38      	it	cc
 80081b0:	2200      	movcc	r2, #0
 80081b2:	18a3      	adds	r3, r4, r2
 80081b4:	50a7      	str	r7, [r4, r2]
 80081b6:	b107      	cbz	r7, 80081ba <rshift+0x68>
 80081b8:	3304      	adds	r3, #4
 80081ba:	1b1a      	subs	r2, r3, r4
 80081bc:	42a3      	cmp	r3, r4
 80081be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081c2:	bf08      	it	eq
 80081c4:	2300      	moveq	r3, #0
 80081c6:	6102      	str	r2, [r0, #16]
 80081c8:	bf08      	it	eq
 80081ca:	6143      	streq	r3, [r0, #20]
 80081cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d0:	f8dc c000 	ldr.w	ip, [ip]
 80081d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80081d8:	ea4c 0707 	orr.w	r7, ip, r7
 80081dc:	f849 7b04 	str.w	r7, [r9], #4
 80081e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081e4:	40cf      	lsrs	r7, r1
 80081e6:	e7da      	b.n	800819e <rshift+0x4c>
 80081e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80081ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80081f0:	e7c3      	b.n	800817a <rshift+0x28>
 80081f2:	4623      	mov	r3, r4
 80081f4:	e7e1      	b.n	80081ba <rshift+0x68>

080081f6 <__hexdig_fun>:
 80081f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d802      	bhi.n	8008204 <__hexdig_fun+0xe>
 80081fe:	3820      	subs	r0, #32
 8008200:	b2c0      	uxtb	r0, r0
 8008202:	4770      	bx	lr
 8008204:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008208:	2b05      	cmp	r3, #5
 800820a:	d801      	bhi.n	8008210 <__hexdig_fun+0x1a>
 800820c:	3847      	subs	r0, #71	; 0x47
 800820e:	e7f7      	b.n	8008200 <__hexdig_fun+0xa>
 8008210:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008214:	2b05      	cmp	r3, #5
 8008216:	d801      	bhi.n	800821c <__hexdig_fun+0x26>
 8008218:	3827      	subs	r0, #39	; 0x27
 800821a:	e7f1      	b.n	8008200 <__hexdig_fun+0xa>
 800821c:	2000      	movs	r0, #0
 800821e:	4770      	bx	lr

08008220 <__gethex>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	ed2d 8b02 	vpush	{d8}
 8008228:	b089      	sub	sp, #36	; 0x24
 800822a:	ee08 0a10 	vmov	s16, r0
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	4bb4      	ldr	r3, [pc, #720]	; (8008504 <__gethex+0x2e4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	4618      	mov	r0, r3
 8008238:	468b      	mov	fp, r1
 800823a:	4690      	mov	r8, r2
 800823c:	f7f7 ffd8 	bl	80001f0 <strlen>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	f8db 2000 	ldr.w	r2, [fp]
 8008246:	4403      	add	r3, r0
 8008248:	4682      	mov	sl, r0
 800824a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800824e:	9305      	str	r3, [sp, #20]
 8008250:	1c93      	adds	r3, r2, #2
 8008252:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008256:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800825a:	32fe      	adds	r2, #254	; 0xfe
 800825c:	18d1      	adds	r1, r2, r3
 800825e:	461f      	mov	r7, r3
 8008260:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008264:	9100      	str	r1, [sp, #0]
 8008266:	2830      	cmp	r0, #48	; 0x30
 8008268:	d0f8      	beq.n	800825c <__gethex+0x3c>
 800826a:	f7ff ffc4 	bl	80081f6 <__hexdig_fun>
 800826e:	4604      	mov	r4, r0
 8008270:	2800      	cmp	r0, #0
 8008272:	d13a      	bne.n	80082ea <__gethex+0xca>
 8008274:	9901      	ldr	r1, [sp, #4]
 8008276:	4652      	mov	r2, sl
 8008278:	4638      	mov	r0, r7
 800827a:	f001 fad0 	bl	800981e <strncmp>
 800827e:	4605      	mov	r5, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d168      	bne.n	8008356 <__gethex+0x136>
 8008284:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008288:	eb07 060a 	add.w	r6, r7, sl
 800828c:	f7ff ffb3 	bl	80081f6 <__hexdig_fun>
 8008290:	2800      	cmp	r0, #0
 8008292:	d062      	beq.n	800835a <__gethex+0x13a>
 8008294:	4633      	mov	r3, r6
 8008296:	7818      	ldrb	r0, [r3, #0]
 8008298:	2830      	cmp	r0, #48	; 0x30
 800829a:	461f      	mov	r7, r3
 800829c:	f103 0301 	add.w	r3, r3, #1
 80082a0:	d0f9      	beq.n	8008296 <__gethex+0x76>
 80082a2:	f7ff ffa8 	bl	80081f6 <__hexdig_fun>
 80082a6:	2301      	movs	r3, #1
 80082a8:	fab0 f480 	clz	r4, r0
 80082ac:	0964      	lsrs	r4, r4, #5
 80082ae:	4635      	mov	r5, r6
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	463a      	mov	r2, r7
 80082b4:	4616      	mov	r6, r2
 80082b6:	3201      	adds	r2, #1
 80082b8:	7830      	ldrb	r0, [r6, #0]
 80082ba:	f7ff ff9c 	bl	80081f6 <__hexdig_fun>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d1f8      	bne.n	80082b4 <__gethex+0x94>
 80082c2:	9901      	ldr	r1, [sp, #4]
 80082c4:	4652      	mov	r2, sl
 80082c6:	4630      	mov	r0, r6
 80082c8:	f001 faa9 	bl	800981e <strncmp>
 80082cc:	b980      	cbnz	r0, 80082f0 <__gethex+0xd0>
 80082ce:	b94d      	cbnz	r5, 80082e4 <__gethex+0xc4>
 80082d0:	eb06 050a 	add.w	r5, r6, sl
 80082d4:	462a      	mov	r2, r5
 80082d6:	4616      	mov	r6, r2
 80082d8:	3201      	adds	r2, #1
 80082da:	7830      	ldrb	r0, [r6, #0]
 80082dc:	f7ff ff8b 	bl	80081f6 <__hexdig_fun>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1f8      	bne.n	80082d6 <__gethex+0xb6>
 80082e4:	1bad      	subs	r5, r5, r6
 80082e6:	00ad      	lsls	r5, r5, #2
 80082e8:	e004      	b.n	80082f4 <__gethex+0xd4>
 80082ea:	2400      	movs	r4, #0
 80082ec:	4625      	mov	r5, r4
 80082ee:	e7e0      	b.n	80082b2 <__gethex+0x92>
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	d1f7      	bne.n	80082e4 <__gethex+0xc4>
 80082f4:	7833      	ldrb	r3, [r6, #0]
 80082f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082fa:	2b50      	cmp	r3, #80	; 0x50
 80082fc:	d13b      	bne.n	8008376 <__gethex+0x156>
 80082fe:	7873      	ldrb	r3, [r6, #1]
 8008300:	2b2b      	cmp	r3, #43	; 0x2b
 8008302:	d02c      	beq.n	800835e <__gethex+0x13e>
 8008304:	2b2d      	cmp	r3, #45	; 0x2d
 8008306:	d02e      	beq.n	8008366 <__gethex+0x146>
 8008308:	1c71      	adds	r1, r6, #1
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	7808      	ldrb	r0, [r1, #0]
 8008310:	f7ff ff71 	bl	80081f6 <__hexdig_fun>
 8008314:	1e43      	subs	r3, r0, #1
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b18      	cmp	r3, #24
 800831a:	d82c      	bhi.n	8008376 <__gethex+0x156>
 800831c:	f1a0 0210 	sub.w	r2, r0, #16
 8008320:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008324:	f7ff ff67 	bl	80081f6 <__hexdig_fun>
 8008328:	1e43      	subs	r3, r0, #1
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b18      	cmp	r3, #24
 800832e:	d91d      	bls.n	800836c <__gethex+0x14c>
 8008330:	f1b9 0f00 	cmp.w	r9, #0
 8008334:	d000      	beq.n	8008338 <__gethex+0x118>
 8008336:	4252      	negs	r2, r2
 8008338:	4415      	add	r5, r2
 800833a:	f8cb 1000 	str.w	r1, [fp]
 800833e:	b1e4      	cbz	r4, 800837a <__gethex+0x15a>
 8008340:	9b00      	ldr	r3, [sp, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	bf14      	ite	ne
 8008346:	2700      	movne	r7, #0
 8008348:	2706      	moveq	r7, #6
 800834a:	4638      	mov	r0, r7
 800834c:	b009      	add	sp, #36	; 0x24
 800834e:	ecbd 8b02 	vpop	{d8}
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	463e      	mov	r6, r7
 8008358:	4625      	mov	r5, r4
 800835a:	2401      	movs	r4, #1
 800835c:	e7ca      	b.n	80082f4 <__gethex+0xd4>
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	1cb1      	adds	r1, r6, #2
 8008364:	e7d3      	b.n	800830e <__gethex+0xee>
 8008366:	f04f 0901 	mov.w	r9, #1
 800836a:	e7fa      	b.n	8008362 <__gethex+0x142>
 800836c:	230a      	movs	r3, #10
 800836e:	fb03 0202 	mla	r2, r3, r2, r0
 8008372:	3a10      	subs	r2, #16
 8008374:	e7d4      	b.n	8008320 <__gethex+0x100>
 8008376:	4631      	mov	r1, r6
 8008378:	e7df      	b.n	800833a <__gethex+0x11a>
 800837a:	1bf3      	subs	r3, r6, r7
 800837c:	3b01      	subs	r3, #1
 800837e:	4621      	mov	r1, r4
 8008380:	2b07      	cmp	r3, #7
 8008382:	dc0b      	bgt.n	800839c <__gethex+0x17c>
 8008384:	ee18 0a10 	vmov	r0, s16
 8008388:	f000 fad8 	bl	800893c <_Balloc>
 800838c:	4604      	mov	r4, r0
 800838e:	b940      	cbnz	r0, 80083a2 <__gethex+0x182>
 8008390:	4b5d      	ldr	r3, [pc, #372]	; (8008508 <__gethex+0x2e8>)
 8008392:	4602      	mov	r2, r0
 8008394:	21de      	movs	r1, #222	; 0xde
 8008396:	485d      	ldr	r0, [pc, #372]	; (800850c <__gethex+0x2ec>)
 8008398:	f001 fa74 	bl	8009884 <__assert_func>
 800839c:	3101      	adds	r1, #1
 800839e:	105b      	asrs	r3, r3, #1
 80083a0:	e7ee      	b.n	8008380 <__gethex+0x160>
 80083a2:	f100 0914 	add.w	r9, r0, #20
 80083a6:	f04f 0b00 	mov.w	fp, #0
 80083aa:	f1ca 0301 	rsb	r3, sl, #1
 80083ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80083b2:	f8cd b000 	str.w	fp, [sp]
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	42b7      	cmp	r7, r6
 80083ba:	d340      	bcc.n	800843e <__gethex+0x21e>
 80083bc:	9802      	ldr	r0, [sp, #8]
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	f840 3b04 	str.w	r3, [r0], #4
 80083c4:	eba0 0009 	sub.w	r0, r0, r9
 80083c8:	1080      	asrs	r0, r0, #2
 80083ca:	0146      	lsls	r6, r0, #5
 80083cc:	6120      	str	r0, [r4, #16]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fba6 	bl	8008b20 <__hi0bits>
 80083d4:	1a30      	subs	r0, r6, r0
 80083d6:	f8d8 6000 	ldr.w	r6, [r8]
 80083da:	42b0      	cmp	r0, r6
 80083dc:	dd63      	ble.n	80084a6 <__gethex+0x286>
 80083de:	1b87      	subs	r7, r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 ff4a 	bl	800927c <__any_on>
 80083e8:	4682      	mov	sl, r0
 80083ea:	b1a8      	cbz	r0, 8008418 <__gethex+0x1f8>
 80083ec:	1e7b      	subs	r3, r7, #1
 80083ee:	1159      	asrs	r1, r3, #5
 80083f0:	f003 021f 	and.w	r2, r3, #31
 80083f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083f8:	f04f 0a01 	mov.w	sl, #1
 80083fc:	fa0a f202 	lsl.w	r2, sl, r2
 8008400:	420a      	tst	r2, r1
 8008402:	d009      	beq.n	8008418 <__gethex+0x1f8>
 8008404:	4553      	cmp	r3, sl
 8008406:	dd05      	ble.n	8008414 <__gethex+0x1f4>
 8008408:	1eb9      	subs	r1, r7, #2
 800840a:	4620      	mov	r0, r4
 800840c:	f000 ff36 	bl	800927c <__any_on>
 8008410:	2800      	cmp	r0, #0
 8008412:	d145      	bne.n	80084a0 <__gethex+0x280>
 8008414:	f04f 0a02 	mov.w	sl, #2
 8008418:	4639      	mov	r1, r7
 800841a:	4620      	mov	r0, r4
 800841c:	f7ff fe99 	bl	8008152 <rshift>
 8008420:	443d      	add	r5, r7
 8008422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008426:	42ab      	cmp	r3, r5
 8008428:	da4c      	bge.n	80084c4 <__gethex+0x2a4>
 800842a:	ee18 0a10 	vmov	r0, s16
 800842e:	4621      	mov	r1, r4
 8008430:	f000 fac4 	bl	80089bc <_Bfree>
 8008434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008436:	2300      	movs	r3, #0
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	27a3      	movs	r7, #163	; 0xa3
 800843c:	e785      	b.n	800834a <__gethex+0x12a>
 800843e:	1e73      	subs	r3, r6, #1
 8008440:	9a05      	ldr	r2, [sp, #20]
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008448:	4293      	cmp	r3, r2
 800844a:	d019      	beq.n	8008480 <__gethex+0x260>
 800844c:	f1bb 0f20 	cmp.w	fp, #32
 8008450:	d107      	bne.n	8008462 <__gethex+0x242>
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	9a00      	ldr	r2, [sp, #0]
 8008456:	f843 2b04 	str.w	r2, [r3], #4
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	2300      	movs	r3, #0
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	469b      	mov	fp, r3
 8008462:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008466:	f7ff fec6 	bl	80081f6 <__hexdig_fun>
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	f000 000f 	and.w	r0, r0, #15
 8008470:	fa00 f00b 	lsl.w	r0, r0, fp
 8008474:	4303      	orrs	r3, r0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	f10b 0b04 	add.w	fp, fp, #4
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	e00d      	b.n	800849c <__gethex+0x27c>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	9a06      	ldr	r2, [sp, #24]
 8008484:	4413      	add	r3, r2
 8008486:	42bb      	cmp	r3, r7
 8008488:	d3e0      	bcc.n	800844c <__gethex+0x22c>
 800848a:	4618      	mov	r0, r3
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	4652      	mov	r2, sl
 8008492:	f001 f9c4 	bl	800981e <strncmp>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	2800      	cmp	r0, #0
 800849a:	d1d7      	bne.n	800844c <__gethex+0x22c>
 800849c:	461e      	mov	r6, r3
 800849e:	e78b      	b.n	80083b8 <__gethex+0x198>
 80084a0:	f04f 0a03 	mov.w	sl, #3
 80084a4:	e7b8      	b.n	8008418 <__gethex+0x1f8>
 80084a6:	da0a      	bge.n	80084be <__gethex+0x29e>
 80084a8:	1a37      	subs	r7, r6, r0
 80084aa:	4621      	mov	r1, r4
 80084ac:	ee18 0a10 	vmov	r0, s16
 80084b0:	463a      	mov	r2, r7
 80084b2:	f000 fc9f 	bl	8008df4 <__lshift>
 80084b6:	1bed      	subs	r5, r5, r7
 80084b8:	4604      	mov	r4, r0
 80084ba:	f100 0914 	add.w	r9, r0, #20
 80084be:	f04f 0a00 	mov.w	sl, #0
 80084c2:	e7ae      	b.n	8008422 <__gethex+0x202>
 80084c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80084c8:	42a8      	cmp	r0, r5
 80084ca:	dd72      	ble.n	80085b2 <__gethex+0x392>
 80084cc:	1b45      	subs	r5, r0, r5
 80084ce:	42ae      	cmp	r6, r5
 80084d0:	dc36      	bgt.n	8008540 <__gethex+0x320>
 80084d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d02a      	beq.n	8008530 <__gethex+0x310>
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d02c      	beq.n	8008538 <__gethex+0x318>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d11c      	bne.n	800851c <__gethex+0x2fc>
 80084e2:	42ae      	cmp	r6, r5
 80084e4:	d11a      	bne.n	800851c <__gethex+0x2fc>
 80084e6:	2e01      	cmp	r6, #1
 80084e8:	d112      	bne.n	8008510 <__gethex+0x2f0>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	2301      	movs	r3, #1
 80084f4:	6123      	str	r3, [r4, #16]
 80084f6:	f8c9 3000 	str.w	r3, [r9]
 80084fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084fc:	2762      	movs	r7, #98	; 0x62
 80084fe:	601c      	str	r4, [r3, #0]
 8008500:	e723      	b.n	800834a <__gethex+0x12a>
 8008502:	bf00      	nop
 8008504:	0800a234 	.word	0x0800a234
 8008508:	0800a158 	.word	0x0800a158
 800850c:	0800a1cc 	.word	0x0800a1cc
 8008510:	1e71      	subs	r1, r6, #1
 8008512:	4620      	mov	r0, r4
 8008514:	f000 feb2 	bl	800927c <__any_on>
 8008518:	2800      	cmp	r0, #0
 800851a:	d1e6      	bne.n	80084ea <__gethex+0x2ca>
 800851c:	ee18 0a10 	vmov	r0, s16
 8008520:	4621      	mov	r1, r4
 8008522:	f000 fa4b 	bl	80089bc <_Bfree>
 8008526:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008528:	2300      	movs	r3, #0
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	2750      	movs	r7, #80	; 0x50
 800852e:	e70c      	b.n	800834a <__gethex+0x12a>
 8008530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f2      	bne.n	800851c <__gethex+0x2fc>
 8008536:	e7d8      	b.n	80084ea <__gethex+0x2ca>
 8008538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1d5      	bne.n	80084ea <__gethex+0x2ca>
 800853e:	e7ed      	b.n	800851c <__gethex+0x2fc>
 8008540:	1e6f      	subs	r7, r5, #1
 8008542:	f1ba 0f00 	cmp.w	sl, #0
 8008546:	d131      	bne.n	80085ac <__gethex+0x38c>
 8008548:	b127      	cbz	r7, 8008554 <__gethex+0x334>
 800854a:	4639      	mov	r1, r7
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fe95 	bl	800927c <__any_on>
 8008552:	4682      	mov	sl, r0
 8008554:	117b      	asrs	r3, r7, #5
 8008556:	2101      	movs	r1, #1
 8008558:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800855c:	f007 071f 	and.w	r7, r7, #31
 8008560:	fa01 f707 	lsl.w	r7, r1, r7
 8008564:	421f      	tst	r7, r3
 8008566:	4629      	mov	r1, r5
 8008568:	4620      	mov	r0, r4
 800856a:	bf18      	it	ne
 800856c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008570:	1b76      	subs	r6, r6, r5
 8008572:	f7ff fdee 	bl	8008152 <rshift>
 8008576:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800857a:	2702      	movs	r7, #2
 800857c:	f1ba 0f00 	cmp.w	sl, #0
 8008580:	d048      	beq.n	8008614 <__gethex+0x3f4>
 8008582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d015      	beq.n	80085b6 <__gethex+0x396>
 800858a:	2b03      	cmp	r3, #3
 800858c:	d017      	beq.n	80085be <__gethex+0x39e>
 800858e:	2b01      	cmp	r3, #1
 8008590:	d109      	bne.n	80085a6 <__gethex+0x386>
 8008592:	f01a 0f02 	tst.w	sl, #2
 8008596:	d006      	beq.n	80085a6 <__gethex+0x386>
 8008598:	f8d9 0000 	ldr.w	r0, [r9]
 800859c:	ea4a 0a00 	orr.w	sl, sl, r0
 80085a0:	f01a 0f01 	tst.w	sl, #1
 80085a4:	d10e      	bne.n	80085c4 <__gethex+0x3a4>
 80085a6:	f047 0710 	orr.w	r7, r7, #16
 80085aa:	e033      	b.n	8008614 <__gethex+0x3f4>
 80085ac:	f04f 0a01 	mov.w	sl, #1
 80085b0:	e7d0      	b.n	8008554 <__gethex+0x334>
 80085b2:	2701      	movs	r7, #1
 80085b4:	e7e2      	b.n	800857c <__gethex+0x35c>
 80085b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b8:	f1c3 0301 	rsb	r3, r3, #1
 80085bc:	9315      	str	r3, [sp, #84]	; 0x54
 80085be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0f0      	beq.n	80085a6 <__gethex+0x386>
 80085c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085c8:	f104 0314 	add.w	r3, r4, #20
 80085cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80085d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80085d4:	f04f 0c00 	mov.w	ip, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f853 2b04 	ldr.w	r2, [r3], #4
 80085de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80085e2:	d01c      	beq.n	800861e <__gethex+0x3fe>
 80085e4:	3201      	adds	r2, #1
 80085e6:	6002      	str	r2, [r0, #0]
 80085e8:	2f02      	cmp	r7, #2
 80085ea:	f104 0314 	add.w	r3, r4, #20
 80085ee:	d13f      	bne.n	8008670 <__gethex+0x450>
 80085f0:	f8d8 2000 	ldr.w	r2, [r8]
 80085f4:	3a01      	subs	r2, #1
 80085f6:	42b2      	cmp	r2, r6
 80085f8:	d10a      	bne.n	8008610 <__gethex+0x3f0>
 80085fa:	1171      	asrs	r1, r6, #5
 80085fc:	2201      	movs	r2, #1
 80085fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008602:	f006 061f 	and.w	r6, r6, #31
 8008606:	fa02 f606 	lsl.w	r6, r2, r6
 800860a:	421e      	tst	r6, r3
 800860c:	bf18      	it	ne
 800860e:	4617      	movne	r7, r2
 8008610:	f047 0720 	orr.w	r7, r7, #32
 8008614:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008616:	601c      	str	r4, [r3, #0]
 8008618:	9b04      	ldr	r3, [sp, #16]
 800861a:	601d      	str	r5, [r3, #0]
 800861c:	e695      	b.n	800834a <__gethex+0x12a>
 800861e:	4299      	cmp	r1, r3
 8008620:	f843 cc04 	str.w	ip, [r3, #-4]
 8008624:	d8d8      	bhi.n	80085d8 <__gethex+0x3b8>
 8008626:	68a3      	ldr	r3, [r4, #8]
 8008628:	459b      	cmp	fp, r3
 800862a:	db19      	blt.n	8008660 <__gethex+0x440>
 800862c:	6861      	ldr	r1, [r4, #4]
 800862e:	ee18 0a10 	vmov	r0, s16
 8008632:	3101      	adds	r1, #1
 8008634:	f000 f982 	bl	800893c <_Balloc>
 8008638:	4681      	mov	r9, r0
 800863a:	b918      	cbnz	r0, 8008644 <__gethex+0x424>
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <__gethex+0x488>)
 800863e:	4602      	mov	r2, r0
 8008640:	2184      	movs	r1, #132	; 0x84
 8008642:	e6a8      	b.n	8008396 <__gethex+0x176>
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	3202      	adds	r2, #2
 8008648:	f104 010c 	add.w	r1, r4, #12
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	300c      	adds	r0, #12
 8008650:	f7fc ff2c 	bl	80054ac <memcpy>
 8008654:	4621      	mov	r1, r4
 8008656:	ee18 0a10 	vmov	r0, s16
 800865a:	f000 f9af 	bl	80089bc <_Bfree>
 800865e:	464c      	mov	r4, r9
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008668:	6122      	str	r2, [r4, #16]
 800866a:	2201      	movs	r2, #1
 800866c:	615a      	str	r2, [r3, #20]
 800866e:	e7bb      	b.n	80085e8 <__gethex+0x3c8>
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	455a      	cmp	r2, fp
 8008674:	dd0b      	ble.n	800868e <__gethex+0x46e>
 8008676:	2101      	movs	r1, #1
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff fd6a 	bl	8008152 <rshift>
 800867e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008682:	3501      	adds	r5, #1
 8008684:	42ab      	cmp	r3, r5
 8008686:	f6ff aed0 	blt.w	800842a <__gethex+0x20a>
 800868a:	2701      	movs	r7, #1
 800868c:	e7c0      	b.n	8008610 <__gethex+0x3f0>
 800868e:	f016 061f 	ands.w	r6, r6, #31
 8008692:	d0fa      	beq.n	800868a <__gethex+0x46a>
 8008694:	4453      	add	r3, sl
 8008696:	f1c6 0620 	rsb	r6, r6, #32
 800869a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800869e:	f000 fa3f 	bl	8008b20 <__hi0bits>
 80086a2:	42b0      	cmp	r0, r6
 80086a4:	dbe7      	blt.n	8008676 <__gethex+0x456>
 80086a6:	e7f0      	b.n	800868a <__gethex+0x46a>
 80086a8:	0800a158 	.word	0x0800a158

080086ac <L_shift>:
 80086ac:	f1c2 0208 	rsb	r2, r2, #8
 80086b0:	0092      	lsls	r2, r2, #2
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	f1c2 0620 	rsb	r6, r2, #32
 80086b8:	6843      	ldr	r3, [r0, #4]
 80086ba:	6804      	ldr	r4, [r0, #0]
 80086bc:	fa03 f506 	lsl.w	r5, r3, r6
 80086c0:	432c      	orrs	r4, r5
 80086c2:	40d3      	lsrs	r3, r2
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80086ca:	4288      	cmp	r0, r1
 80086cc:	d3f4      	bcc.n	80086b8 <L_shift+0xc>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}

080086d0 <__match>:
 80086d0:	b530      	push	{r4, r5, lr}
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	b914      	cbnz	r4, 80086e2 <__match+0x12>
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	2001      	movs	r0, #1
 80086e0:	bd30      	pop	{r4, r5, pc}
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086ea:	2d19      	cmp	r5, #25
 80086ec:	bf98      	it	ls
 80086ee:	3220      	addls	r2, #32
 80086f0:	42a2      	cmp	r2, r4
 80086f2:	d0f0      	beq.n	80086d6 <__match+0x6>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7f3      	b.n	80086e0 <__match+0x10>

080086f8 <__hexnan>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	680b      	ldr	r3, [r1, #0]
 80086fe:	115e      	asrs	r6, r3, #5
 8008700:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008704:	f013 031f 	ands.w	r3, r3, #31
 8008708:	b087      	sub	sp, #28
 800870a:	bf18      	it	ne
 800870c:	3604      	addne	r6, #4
 800870e:	2500      	movs	r5, #0
 8008710:	1f37      	subs	r7, r6, #4
 8008712:	4690      	mov	r8, r2
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	4682      	mov	sl, r0
 800871a:	f846 5c04 	str.w	r5, [r6, #-4]
 800871e:	46b9      	mov	r9, r7
 8008720:	463c      	mov	r4, r7
 8008722:	9502      	str	r5, [sp, #8]
 8008724:	46ab      	mov	fp, r5
 8008726:	7851      	ldrb	r1, [r2, #1]
 8008728:	1c53      	adds	r3, r2, #1
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	b341      	cbz	r1, 8008780 <__hexnan+0x88>
 800872e:	4608      	mov	r0, r1
 8008730:	9205      	str	r2, [sp, #20]
 8008732:	9104      	str	r1, [sp, #16]
 8008734:	f7ff fd5f 	bl	80081f6 <__hexdig_fun>
 8008738:	2800      	cmp	r0, #0
 800873a:	d14f      	bne.n	80087dc <__hexnan+0xe4>
 800873c:	9904      	ldr	r1, [sp, #16]
 800873e:	9a05      	ldr	r2, [sp, #20]
 8008740:	2920      	cmp	r1, #32
 8008742:	d818      	bhi.n	8008776 <__hexnan+0x7e>
 8008744:	9b02      	ldr	r3, [sp, #8]
 8008746:	459b      	cmp	fp, r3
 8008748:	dd13      	ble.n	8008772 <__hexnan+0x7a>
 800874a:	454c      	cmp	r4, r9
 800874c:	d206      	bcs.n	800875c <__hexnan+0x64>
 800874e:	2d07      	cmp	r5, #7
 8008750:	dc04      	bgt.n	800875c <__hexnan+0x64>
 8008752:	462a      	mov	r2, r5
 8008754:	4649      	mov	r1, r9
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ffa8 	bl	80086ac <L_shift>
 800875c:	4544      	cmp	r4, r8
 800875e:	d950      	bls.n	8008802 <__hexnan+0x10a>
 8008760:	2300      	movs	r3, #0
 8008762:	f1a4 0904 	sub.w	r9, r4, #4
 8008766:	f844 3c04 	str.w	r3, [r4, #-4]
 800876a:	f8cd b008 	str.w	fp, [sp, #8]
 800876e:	464c      	mov	r4, r9
 8008770:	461d      	mov	r5, r3
 8008772:	9a03      	ldr	r2, [sp, #12]
 8008774:	e7d7      	b.n	8008726 <__hexnan+0x2e>
 8008776:	2929      	cmp	r1, #41	; 0x29
 8008778:	d156      	bne.n	8008828 <__hexnan+0x130>
 800877a:	3202      	adds	r2, #2
 800877c:	f8ca 2000 	str.w	r2, [sl]
 8008780:	f1bb 0f00 	cmp.w	fp, #0
 8008784:	d050      	beq.n	8008828 <__hexnan+0x130>
 8008786:	454c      	cmp	r4, r9
 8008788:	d206      	bcs.n	8008798 <__hexnan+0xa0>
 800878a:	2d07      	cmp	r5, #7
 800878c:	dc04      	bgt.n	8008798 <__hexnan+0xa0>
 800878e:	462a      	mov	r2, r5
 8008790:	4649      	mov	r1, r9
 8008792:	4620      	mov	r0, r4
 8008794:	f7ff ff8a 	bl	80086ac <L_shift>
 8008798:	4544      	cmp	r4, r8
 800879a:	d934      	bls.n	8008806 <__hexnan+0x10e>
 800879c:	f1a8 0204 	sub.w	r2, r8, #4
 80087a0:	4623      	mov	r3, r4
 80087a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80087a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80087aa:	429f      	cmp	r7, r3
 80087ac:	d2f9      	bcs.n	80087a2 <__hexnan+0xaa>
 80087ae:	1b3b      	subs	r3, r7, r4
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	3401      	adds	r4, #1
 80087b8:	3e03      	subs	r6, #3
 80087ba:	42b4      	cmp	r4, r6
 80087bc:	bf88      	it	hi
 80087be:	2304      	movhi	r3, #4
 80087c0:	4443      	add	r3, r8
 80087c2:	2200      	movs	r2, #0
 80087c4:	f843 2b04 	str.w	r2, [r3], #4
 80087c8:	429f      	cmp	r7, r3
 80087ca:	d2fb      	bcs.n	80087c4 <__hexnan+0xcc>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	b91b      	cbnz	r3, 80087d8 <__hexnan+0xe0>
 80087d0:	4547      	cmp	r7, r8
 80087d2:	d127      	bne.n	8008824 <__hexnan+0x12c>
 80087d4:	2301      	movs	r3, #1
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	2005      	movs	r0, #5
 80087da:	e026      	b.n	800882a <__hexnan+0x132>
 80087dc:	3501      	adds	r5, #1
 80087de:	2d08      	cmp	r5, #8
 80087e0:	f10b 0b01 	add.w	fp, fp, #1
 80087e4:	dd06      	ble.n	80087f4 <__hexnan+0xfc>
 80087e6:	4544      	cmp	r4, r8
 80087e8:	d9c3      	bls.n	8008772 <__hexnan+0x7a>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80087f0:	2501      	movs	r5, #1
 80087f2:	3c04      	subs	r4, #4
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	f000 000f 	and.w	r0, r0, #15
 80087fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80087fe:	6022      	str	r2, [r4, #0]
 8008800:	e7b7      	b.n	8008772 <__hexnan+0x7a>
 8008802:	2508      	movs	r5, #8
 8008804:	e7b5      	b.n	8008772 <__hexnan+0x7a>
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0df      	beq.n	80087cc <__hexnan+0xd4>
 800880c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008810:	f1c3 0320 	rsb	r3, r3, #32
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
 8008818:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800881c:	401a      	ands	r2, r3
 800881e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008822:	e7d3      	b.n	80087cc <__hexnan+0xd4>
 8008824:	3f04      	subs	r7, #4
 8008826:	e7d1      	b.n	80087cc <__hexnan+0xd4>
 8008828:	2004      	movs	r0, #4
 800882a:	b007      	add	sp, #28
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008830 <_localeconv_r>:
 8008830:	4800      	ldr	r0, [pc, #0]	; (8008834 <_localeconv_r+0x4>)
 8008832:	4770      	bx	lr
 8008834:	20000168 	.word	0x20000168

08008838 <__retarget_lock_init_recursive>:
 8008838:	4770      	bx	lr

0800883a <__retarget_lock_acquire_recursive>:
 800883a:	4770      	bx	lr

0800883c <__retarget_lock_release_recursive>:
 800883c:	4770      	bx	lr

0800883e <__swhatbuf_r>:
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	460e      	mov	r6, r1
 8008842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008846:	2900      	cmp	r1, #0
 8008848:	b096      	sub	sp, #88	; 0x58
 800884a:	4614      	mov	r4, r2
 800884c:	461d      	mov	r5, r3
 800884e:	da08      	bge.n	8008862 <__swhatbuf_r+0x24>
 8008850:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	602a      	str	r2, [r5, #0]
 8008858:	061a      	lsls	r2, r3, #24
 800885a:	d410      	bmi.n	800887e <__swhatbuf_r+0x40>
 800885c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008860:	e00e      	b.n	8008880 <__swhatbuf_r+0x42>
 8008862:	466a      	mov	r2, sp
 8008864:	f001 f84e 	bl	8009904 <_fstat_r>
 8008868:	2800      	cmp	r0, #0
 800886a:	dbf1      	blt.n	8008850 <__swhatbuf_r+0x12>
 800886c:	9a01      	ldr	r2, [sp, #4]
 800886e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008876:	425a      	negs	r2, r3
 8008878:	415a      	adcs	r2, r3
 800887a:	602a      	str	r2, [r5, #0]
 800887c:	e7ee      	b.n	800885c <__swhatbuf_r+0x1e>
 800887e:	2340      	movs	r3, #64	; 0x40
 8008880:	2000      	movs	r0, #0
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	b016      	add	sp, #88	; 0x58
 8008886:	bd70      	pop	{r4, r5, r6, pc}

08008888 <__smakebuf_r>:
 8008888:	898b      	ldrh	r3, [r1, #12]
 800888a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800888c:	079d      	lsls	r5, r3, #30
 800888e:	4606      	mov	r6, r0
 8008890:	460c      	mov	r4, r1
 8008892:	d507      	bpl.n	80088a4 <__smakebuf_r+0x1c>
 8008894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	2301      	movs	r3, #1
 800889e:	6163      	str	r3, [r4, #20]
 80088a0:	b002      	add	sp, #8
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	ab01      	add	r3, sp, #4
 80088a6:	466a      	mov	r2, sp
 80088a8:	f7ff ffc9 	bl	800883e <__swhatbuf_r>
 80088ac:	9900      	ldr	r1, [sp, #0]
 80088ae:	4605      	mov	r5, r0
 80088b0:	4630      	mov	r0, r6
 80088b2:	f000 fd87 	bl	80093c4 <_malloc_r>
 80088b6:	b948      	cbnz	r0, 80088cc <__smakebuf_r+0x44>
 80088b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088bc:	059a      	lsls	r2, r3, #22
 80088be:	d4ef      	bmi.n	80088a0 <__smakebuf_r+0x18>
 80088c0:	f023 0303 	bic.w	r3, r3, #3
 80088c4:	f043 0302 	orr.w	r3, r3, #2
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	e7e3      	b.n	8008894 <__smakebuf_r+0xc>
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <__smakebuf_r+0x7c>)
 80088ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	9b00      	ldr	r3, [sp, #0]
 80088dc:	6163      	str	r3, [r4, #20]
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	6120      	str	r0, [r4, #16]
 80088e2:	b15b      	cbz	r3, 80088fc <__smakebuf_r+0x74>
 80088e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e8:	4630      	mov	r0, r6
 80088ea:	f001 f81d 	bl	8009928 <_isatty_r>
 80088ee:	b128      	cbz	r0, 80088fc <__smakebuf_r+0x74>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	89a0      	ldrh	r0, [r4, #12]
 80088fe:	4305      	orrs	r5, r0
 8008900:	81a5      	strh	r5, [r4, #12]
 8008902:	e7cd      	b.n	80088a0 <__smakebuf_r+0x18>
 8008904:	08007fb1 	.word	0x08007fb1

08008908 <malloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <malloc+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f000 bd59 	b.w	80093c4 <_malloc_r>
 8008912:	bf00      	nop
 8008914:	20000010 	.word	0x20000010

08008918 <__ascii_mbtowc>:
 8008918:	b082      	sub	sp, #8
 800891a:	b901      	cbnz	r1, 800891e <__ascii_mbtowc+0x6>
 800891c:	a901      	add	r1, sp, #4
 800891e:	b142      	cbz	r2, 8008932 <__ascii_mbtowc+0x1a>
 8008920:	b14b      	cbz	r3, 8008936 <__ascii_mbtowc+0x1e>
 8008922:	7813      	ldrb	r3, [r2, #0]
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	1e10      	subs	r0, r2, #0
 800892a:	bf18      	it	ne
 800892c:	2001      	movne	r0, #1
 800892e:	b002      	add	sp, #8
 8008930:	4770      	bx	lr
 8008932:	4610      	mov	r0, r2
 8008934:	e7fb      	b.n	800892e <__ascii_mbtowc+0x16>
 8008936:	f06f 0001 	mvn.w	r0, #1
 800893a:	e7f8      	b.n	800892e <__ascii_mbtowc+0x16>

0800893c <_Balloc>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	b976      	cbnz	r6, 8008964 <_Balloc+0x28>
 8008946:	2010      	movs	r0, #16
 8008948:	f7ff ffde 	bl	8008908 <malloc>
 800894c:	4602      	mov	r2, r0
 800894e:	6260      	str	r0, [r4, #36]	; 0x24
 8008950:	b920      	cbnz	r0, 800895c <_Balloc+0x20>
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <_Balloc+0x78>)
 8008954:	4818      	ldr	r0, [pc, #96]	; (80089b8 <_Balloc+0x7c>)
 8008956:	2166      	movs	r1, #102	; 0x66
 8008958:	f000 ff94 	bl	8009884 <__assert_func>
 800895c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008960:	6006      	str	r6, [r0, #0]
 8008962:	60c6      	str	r6, [r0, #12]
 8008964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008966:	68f3      	ldr	r3, [r6, #12]
 8008968:	b183      	cbz	r3, 800898c <_Balloc+0x50>
 800896a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008972:	b9b8      	cbnz	r0, 80089a4 <_Balloc+0x68>
 8008974:	2101      	movs	r1, #1
 8008976:	fa01 f605 	lsl.w	r6, r1, r5
 800897a:	1d72      	adds	r2, r6, #5
 800897c:	0092      	lsls	r2, r2, #2
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fc9d 	bl	80092be <_calloc_r>
 8008984:	b160      	cbz	r0, 80089a0 <_Balloc+0x64>
 8008986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898a:	e00e      	b.n	80089aa <_Balloc+0x6e>
 800898c:	2221      	movs	r2, #33	; 0x21
 800898e:	2104      	movs	r1, #4
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fc94 	bl	80092be <_calloc_r>
 8008996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008998:	60f0      	str	r0, [r6, #12]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e4      	bne.n	800896a <_Balloc+0x2e>
 80089a0:	2000      	movs	r0, #0
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	6802      	ldr	r2, [r0, #0]
 80089a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089aa:	2300      	movs	r3, #0
 80089ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b0:	e7f7      	b.n	80089a2 <_Balloc+0x66>
 80089b2:	bf00      	nop
 80089b4:	0800a0e6 	.word	0x0800a0e6
 80089b8:	0800a248 	.word	0x0800a248

080089bc <_Bfree>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089c0:	4605      	mov	r5, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b976      	cbnz	r6, 80089e4 <_Bfree+0x28>
 80089c6:	2010      	movs	r0, #16
 80089c8:	f7ff ff9e 	bl	8008908 <malloc>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6268      	str	r0, [r5, #36]	; 0x24
 80089d0:	b920      	cbnz	r0, 80089dc <_Bfree+0x20>
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <_Bfree+0x3c>)
 80089d4:	4809      	ldr	r0, [pc, #36]	; (80089fc <_Bfree+0x40>)
 80089d6:	218a      	movs	r1, #138	; 0x8a
 80089d8:	f000 ff54 	bl	8009884 <__assert_func>
 80089dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e0:	6006      	str	r6, [r0, #0]
 80089e2:	60c6      	str	r6, [r0, #12]
 80089e4:	b13c      	cbz	r4, 80089f6 <_Bfree+0x3a>
 80089e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089e8:	6862      	ldr	r2, [r4, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f0:	6021      	str	r1, [r4, #0]
 80089f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	0800a0e6 	.word	0x0800a0e6
 80089fc:	0800a248 	.word	0x0800a248

08008a00 <__multadd>:
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	690d      	ldr	r5, [r1, #16]
 8008a06:	4607      	mov	r7, r0
 8008a08:	460c      	mov	r4, r1
 8008a0a:	461e      	mov	r6, r3
 8008a0c:	f101 0c14 	add.w	ip, r1, #20
 8008a10:	2000      	movs	r0, #0
 8008a12:	f8dc 3000 	ldr.w	r3, [ip]
 8008a16:	b299      	uxth	r1, r3
 8008a18:	fb02 6101 	mla	r1, r2, r1, r6
 8008a1c:	0c1e      	lsrs	r6, r3, #16
 8008a1e:	0c0b      	lsrs	r3, r1, #16
 8008a20:	fb02 3306 	mla	r3, r2, r6, r3
 8008a24:	b289      	uxth	r1, r1
 8008a26:	3001      	adds	r0, #1
 8008a28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a2c:	4285      	cmp	r5, r0
 8008a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008a32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a36:	dcec      	bgt.n	8008a12 <__multadd+0x12>
 8008a38:	b30e      	cbz	r6, 8008a7e <__multadd+0x7e>
 8008a3a:	68a3      	ldr	r3, [r4, #8]
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	dc19      	bgt.n	8008a74 <__multadd+0x74>
 8008a40:	6861      	ldr	r1, [r4, #4]
 8008a42:	4638      	mov	r0, r7
 8008a44:	3101      	adds	r1, #1
 8008a46:	f7ff ff79 	bl	800893c <_Balloc>
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <__multadd+0x5a>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <__multadd+0x84>)
 8008a52:	480d      	ldr	r0, [pc, #52]	; (8008a88 <__multadd+0x88>)
 8008a54:	21b5      	movs	r1, #181	; 0xb5
 8008a56:	f000 ff15 	bl	8009884 <__assert_func>
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	3202      	adds	r2, #2
 8008a5e:	f104 010c 	add.w	r1, r4, #12
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	300c      	adds	r0, #12
 8008a66:	f7fc fd21 	bl	80054ac <memcpy>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7ff ffa5 	bl	80089bc <_Bfree>
 8008a72:	4644      	mov	r4, r8
 8008a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a78:	3501      	adds	r5, #1
 8008a7a:	615e      	str	r6, [r3, #20]
 8008a7c:	6125      	str	r5, [r4, #16]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	0800a158 	.word	0x0800a158
 8008a88:	0800a248 	.word	0x0800a248

08008a8c <__s2b>:
 8008a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a90:	460c      	mov	r4, r1
 8008a92:	4615      	mov	r5, r2
 8008a94:	461f      	mov	r7, r3
 8008a96:	2209      	movs	r2, #9
 8008a98:	3308      	adds	r3, #8
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	db09      	blt.n	8008abc <__s2b+0x30>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff ff47 	bl	800893c <_Balloc>
 8008aae:	b940      	cbnz	r0, 8008ac2 <__s2b+0x36>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <__s2b+0x8c>)
 8008ab4:	4819      	ldr	r0, [pc, #100]	; (8008b1c <__s2b+0x90>)
 8008ab6:	21ce      	movs	r1, #206	; 0xce
 8008ab8:	f000 fee4 	bl	8009884 <__assert_func>
 8008abc:	0052      	lsls	r2, r2, #1
 8008abe:	3101      	adds	r1, #1
 8008ac0:	e7f0      	b.n	8008aa4 <__s2b+0x18>
 8008ac2:	9b08      	ldr	r3, [sp, #32]
 8008ac4:	6143      	str	r3, [r0, #20]
 8008ac6:	2d09      	cmp	r5, #9
 8008ac8:	f04f 0301 	mov.w	r3, #1
 8008acc:	6103      	str	r3, [r0, #16]
 8008ace:	dd16      	ble.n	8008afe <__s2b+0x72>
 8008ad0:	f104 0909 	add.w	r9, r4, #9
 8008ad4:	46c8      	mov	r8, r9
 8008ad6:	442c      	add	r4, r5
 8008ad8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008adc:	4601      	mov	r1, r0
 8008ade:	3b30      	subs	r3, #48	; 0x30
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff ff8c 	bl	8008a00 <__multadd>
 8008ae8:	45a0      	cmp	r8, r4
 8008aea:	d1f5      	bne.n	8008ad8 <__s2b+0x4c>
 8008aec:	f1a5 0408 	sub.w	r4, r5, #8
 8008af0:	444c      	add	r4, r9
 8008af2:	1b2d      	subs	r5, r5, r4
 8008af4:	1963      	adds	r3, r4, r5
 8008af6:	42bb      	cmp	r3, r7
 8008af8:	db04      	blt.n	8008b04 <__s2b+0x78>
 8008afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afe:	340a      	adds	r4, #10
 8008b00:	2509      	movs	r5, #9
 8008b02:	e7f6      	b.n	8008af2 <__s2b+0x66>
 8008b04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b08:	4601      	mov	r1, r0
 8008b0a:	3b30      	subs	r3, #48	; 0x30
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f7ff ff76 	bl	8008a00 <__multadd>
 8008b14:	e7ee      	b.n	8008af4 <__s2b+0x68>
 8008b16:	bf00      	nop
 8008b18:	0800a158 	.word	0x0800a158
 8008b1c:	0800a248 	.word	0x0800a248

08008b20 <__hi0bits>:
 8008b20:	0c03      	lsrs	r3, r0, #16
 8008b22:	041b      	lsls	r3, r3, #16
 8008b24:	b9d3      	cbnz	r3, 8008b5c <__hi0bits+0x3c>
 8008b26:	0400      	lsls	r0, r0, #16
 8008b28:	2310      	movs	r3, #16
 8008b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b2e:	bf04      	itt	eq
 8008b30:	0200      	lsleq	r0, r0, #8
 8008b32:	3308      	addeq	r3, #8
 8008b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b38:	bf04      	itt	eq
 8008b3a:	0100      	lsleq	r0, r0, #4
 8008b3c:	3304      	addeq	r3, #4
 8008b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b42:	bf04      	itt	eq
 8008b44:	0080      	lsleq	r0, r0, #2
 8008b46:	3302      	addeq	r3, #2
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	db05      	blt.n	8008b58 <__hi0bits+0x38>
 8008b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b50:	f103 0301 	add.w	r3, r3, #1
 8008b54:	bf08      	it	eq
 8008b56:	2320      	moveq	r3, #32
 8008b58:	4618      	mov	r0, r3
 8008b5a:	4770      	bx	lr
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e7e4      	b.n	8008b2a <__hi0bits+0xa>

08008b60 <__lo0bits>:
 8008b60:	6803      	ldr	r3, [r0, #0]
 8008b62:	f013 0207 	ands.w	r2, r3, #7
 8008b66:	4601      	mov	r1, r0
 8008b68:	d00b      	beq.n	8008b82 <__lo0bits+0x22>
 8008b6a:	07da      	lsls	r2, r3, #31
 8008b6c:	d423      	bmi.n	8008bb6 <__lo0bits+0x56>
 8008b6e:	0798      	lsls	r0, r3, #30
 8008b70:	bf49      	itett	mi
 8008b72:	085b      	lsrmi	r3, r3, #1
 8008b74:	089b      	lsrpl	r3, r3, #2
 8008b76:	2001      	movmi	r0, #1
 8008b78:	600b      	strmi	r3, [r1, #0]
 8008b7a:	bf5c      	itt	pl
 8008b7c:	600b      	strpl	r3, [r1, #0]
 8008b7e:	2002      	movpl	r0, #2
 8008b80:	4770      	bx	lr
 8008b82:	b298      	uxth	r0, r3
 8008b84:	b9a8      	cbnz	r0, 8008bb2 <__lo0bits+0x52>
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	2010      	movs	r0, #16
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	b90a      	cbnz	r2, 8008b92 <__lo0bits+0x32>
 8008b8e:	3008      	adds	r0, #8
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	071a      	lsls	r2, r3, #28
 8008b94:	bf04      	itt	eq
 8008b96:	091b      	lsreq	r3, r3, #4
 8008b98:	3004      	addeq	r0, #4
 8008b9a:	079a      	lsls	r2, r3, #30
 8008b9c:	bf04      	itt	eq
 8008b9e:	089b      	lsreq	r3, r3, #2
 8008ba0:	3002      	addeq	r0, #2
 8008ba2:	07da      	lsls	r2, r3, #31
 8008ba4:	d403      	bmi.n	8008bae <__lo0bits+0x4e>
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	f100 0001 	add.w	r0, r0, #1
 8008bac:	d005      	beq.n	8008bba <__lo0bits+0x5a>
 8008bae:	600b      	str	r3, [r1, #0]
 8008bb0:	4770      	bx	lr
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	e7e9      	b.n	8008b8a <__lo0bits+0x2a>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr
 8008bba:	2020      	movs	r0, #32
 8008bbc:	4770      	bx	lr
	...

08008bc0 <__i2b>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f7ff feb9 	bl	800893c <_Balloc>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	b928      	cbnz	r0, 8008bda <__i2b+0x1a>
 8008bce:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <__i2b+0x24>)
 8008bd0:	4805      	ldr	r0, [pc, #20]	; (8008be8 <__i2b+0x28>)
 8008bd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bd6:	f000 fe55 	bl	8009884 <__assert_func>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	6144      	str	r4, [r0, #20]
 8008bde:	6103      	str	r3, [r0, #16]
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	0800a158 	.word	0x0800a158
 8008be8:	0800a248 	.word	0x0800a248

08008bec <__multiply>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4691      	mov	r9, r2
 8008bf2:	690a      	ldr	r2, [r1, #16]
 8008bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	bfb8      	it	lt
 8008bfc:	460b      	movlt	r3, r1
 8008bfe:	460c      	mov	r4, r1
 8008c00:	bfbc      	itt	lt
 8008c02:	464c      	movlt	r4, r9
 8008c04:	4699      	movlt	r9, r3
 8008c06:	6927      	ldr	r7, [r4, #16]
 8008c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c0c:	68a3      	ldr	r3, [r4, #8]
 8008c0e:	6861      	ldr	r1, [r4, #4]
 8008c10:	eb07 060a 	add.w	r6, r7, sl
 8008c14:	42b3      	cmp	r3, r6
 8008c16:	b085      	sub	sp, #20
 8008c18:	bfb8      	it	lt
 8008c1a:	3101      	addlt	r1, #1
 8008c1c:	f7ff fe8e 	bl	800893c <_Balloc>
 8008c20:	b930      	cbnz	r0, 8008c30 <__multiply+0x44>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b44      	ldr	r3, [pc, #272]	; (8008d38 <__multiply+0x14c>)
 8008c26:	4845      	ldr	r0, [pc, #276]	; (8008d3c <__multiply+0x150>)
 8008c28:	f240 115d 	movw	r1, #349	; 0x15d
 8008c2c:	f000 fe2a 	bl	8009884 <__assert_func>
 8008c30:	f100 0514 	add.w	r5, r0, #20
 8008c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c38:	462b      	mov	r3, r5
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4543      	cmp	r3, r8
 8008c3e:	d321      	bcc.n	8008c84 <__multiply+0x98>
 8008c40:	f104 0314 	add.w	r3, r4, #20
 8008c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c48:	f109 0314 	add.w	r3, r9, #20
 8008c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c50:	9202      	str	r2, [sp, #8]
 8008c52:	1b3a      	subs	r2, r7, r4
 8008c54:	3a15      	subs	r2, #21
 8008c56:	f022 0203 	bic.w	r2, r2, #3
 8008c5a:	3204      	adds	r2, #4
 8008c5c:	f104 0115 	add.w	r1, r4, #21
 8008c60:	428f      	cmp	r7, r1
 8008c62:	bf38      	it	cc
 8008c64:	2204      	movcc	r2, #4
 8008c66:	9201      	str	r2, [sp, #4]
 8008c68:	9a02      	ldr	r2, [sp, #8]
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d80c      	bhi.n	8008c8a <__multiply+0x9e>
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	dd03      	ble.n	8008c7c <__multiply+0x90>
 8008c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d05a      	beq.n	8008d32 <__multiply+0x146>
 8008c7c:	6106      	str	r6, [r0, #16]
 8008c7e:	b005      	add	sp, #20
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	f843 2b04 	str.w	r2, [r3], #4
 8008c88:	e7d8      	b.n	8008c3c <__multiply+0x50>
 8008c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c8e:	f1ba 0f00 	cmp.w	sl, #0
 8008c92:	d024      	beq.n	8008cde <__multiply+0xf2>
 8008c94:	f104 0e14 	add.w	lr, r4, #20
 8008c98:	46a9      	mov	r9, r5
 8008c9a:	f04f 0c00 	mov.w	ip, #0
 8008c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8008ca6:	fa1f fb82 	uxth.w	fp, r2
 8008caa:	b289      	uxth	r1, r1
 8008cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8008cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8008cb8:	4461      	add	r1, ip
 8008cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008cc6:	b289      	uxth	r1, r1
 8008cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ccc:	4577      	cmp	r7, lr
 8008cce:	f849 1b04 	str.w	r1, [r9], #4
 8008cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cd6:	d8e2      	bhi.n	8008c9e <__multiply+0xb2>
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	f845 c002 	str.w	ip, [r5, r2]
 8008cde:	9a03      	ldr	r2, [sp, #12]
 8008ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	f1b9 0f00 	cmp.w	r9, #0
 8008cea:	d020      	beq.n	8008d2e <__multiply+0x142>
 8008cec:	6829      	ldr	r1, [r5, #0]
 8008cee:	f104 0c14 	add.w	ip, r4, #20
 8008cf2:	46ae      	mov	lr, r5
 8008cf4:	f04f 0a00 	mov.w	sl, #0
 8008cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8008cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d00:	fb09 220b 	mla	r2, r9, fp, r2
 8008d04:	4492      	add	sl, r2
 8008d06:	b289      	uxth	r1, r1
 8008d08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d14:	f8be 1000 	ldrh.w	r1, [lr]
 8008d18:	0c12      	lsrs	r2, r2, #16
 8008d1a:	fb09 1102 	mla	r1, r9, r2, r1
 8008d1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d22:	4567      	cmp	r7, ip
 8008d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d28:	d8e6      	bhi.n	8008cf8 <__multiply+0x10c>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	50a9      	str	r1, [r5, r2]
 8008d2e:	3504      	adds	r5, #4
 8008d30:	e79a      	b.n	8008c68 <__multiply+0x7c>
 8008d32:	3e01      	subs	r6, #1
 8008d34:	e79c      	b.n	8008c70 <__multiply+0x84>
 8008d36:	bf00      	nop
 8008d38:	0800a158 	.word	0x0800a158
 8008d3c:	0800a248 	.word	0x0800a248

08008d40 <__pow5mult>:
 8008d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	4615      	mov	r5, r2
 8008d46:	f012 0203 	ands.w	r2, r2, #3
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	d007      	beq.n	8008d60 <__pow5mult+0x20>
 8008d50:	4c25      	ldr	r4, [pc, #148]	; (8008de8 <__pow5mult+0xa8>)
 8008d52:	3a01      	subs	r2, #1
 8008d54:	2300      	movs	r3, #0
 8008d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d5a:	f7ff fe51 	bl	8008a00 <__multadd>
 8008d5e:	4607      	mov	r7, r0
 8008d60:	10ad      	asrs	r5, r5, #2
 8008d62:	d03d      	beq.n	8008de0 <__pow5mult+0xa0>
 8008d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d66:	b97c      	cbnz	r4, 8008d88 <__pow5mult+0x48>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f7ff fdcd 	bl	8008908 <malloc>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6270      	str	r0, [r6, #36]	; 0x24
 8008d72:	b928      	cbnz	r0, 8008d80 <__pow5mult+0x40>
 8008d74:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <__pow5mult+0xac>)
 8008d76:	481e      	ldr	r0, [pc, #120]	; (8008df0 <__pow5mult+0xb0>)
 8008d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d7c:	f000 fd82 	bl	8009884 <__assert_func>
 8008d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d84:	6004      	str	r4, [r0, #0]
 8008d86:	60c4      	str	r4, [r0, #12]
 8008d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d90:	b94c      	cbnz	r4, 8008da6 <__pow5mult+0x66>
 8008d92:	f240 2171 	movw	r1, #625	; 0x271
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ff12 	bl	8008bc0 <__i2b>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008da2:	4604      	mov	r4, r0
 8008da4:	6003      	str	r3, [r0, #0]
 8008da6:	f04f 0900 	mov.w	r9, #0
 8008daa:	07eb      	lsls	r3, r5, #31
 8008dac:	d50a      	bpl.n	8008dc4 <__pow5mult+0x84>
 8008dae:	4639      	mov	r1, r7
 8008db0:	4622      	mov	r2, r4
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7ff ff1a 	bl	8008bec <__multiply>
 8008db8:	4639      	mov	r1, r7
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f7ff fdfd 	bl	80089bc <_Bfree>
 8008dc2:	4647      	mov	r7, r8
 8008dc4:	106d      	asrs	r5, r5, #1
 8008dc6:	d00b      	beq.n	8008de0 <__pow5mult+0xa0>
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	b938      	cbnz	r0, 8008ddc <__pow5mult+0x9c>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff ff0b 	bl	8008bec <__multiply>
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	f8c0 9000 	str.w	r9, [r0]
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e7e4      	b.n	8008daa <__pow5mult+0x6a>
 8008de0:	4638      	mov	r0, r7
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	bf00      	nop
 8008de8:	0800a398 	.word	0x0800a398
 8008dec:	0800a0e6 	.word	0x0800a0e6
 8008df0:	0800a248 	.word	0x0800a248

08008df4 <__lshift>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	6849      	ldr	r1, [r1, #4]
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	4607      	mov	r7, r0
 8008e06:	4691      	mov	r9, r2
 8008e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e0c:	f108 0601 	add.w	r6, r8, #1
 8008e10:	42b3      	cmp	r3, r6
 8008e12:	db0b      	blt.n	8008e2c <__lshift+0x38>
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff fd91 	bl	800893c <_Balloc>
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b948      	cbnz	r0, 8008e32 <__lshift+0x3e>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <__lshift+0xd8>)
 8008e22:	482b      	ldr	r0, [pc, #172]	; (8008ed0 <__lshift+0xdc>)
 8008e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e28:	f000 fd2c 	bl	8009884 <__assert_func>
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	e7ee      	b.n	8008e10 <__lshift+0x1c>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f100 0114 	add.w	r1, r0, #20
 8008e38:	f100 0210 	add.w	r2, r0, #16
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	4553      	cmp	r3, sl
 8008e40:	db37      	blt.n	8008eb2 <__lshift+0xbe>
 8008e42:	6920      	ldr	r0, [r4, #16]
 8008e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e48:	f104 0314 	add.w	r3, r4, #20
 8008e4c:	f019 091f 	ands.w	r9, r9, #31
 8008e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e58:	d02f      	beq.n	8008eba <__lshift+0xc6>
 8008e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e5e:	468a      	mov	sl, r1
 8008e60:	f04f 0c00 	mov.w	ip, #0
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	fa02 f209 	lsl.w	r2, r2, r9
 8008e6a:	ea42 020c 	orr.w	r2, r2, ip
 8008e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8008e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e76:	4298      	cmp	r0, r3
 8008e78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e7c:	d8f2      	bhi.n	8008e64 <__lshift+0x70>
 8008e7e:	1b03      	subs	r3, r0, r4
 8008e80:	3b15      	subs	r3, #21
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	3304      	adds	r3, #4
 8008e88:	f104 0215 	add.w	r2, r4, #21
 8008e8c:	4290      	cmp	r0, r2
 8008e8e:	bf38      	it	cc
 8008e90:	2304      	movcc	r3, #4
 8008e92:	f841 c003 	str.w	ip, [r1, r3]
 8008e96:	f1bc 0f00 	cmp.w	ip, #0
 8008e9a:	d001      	beq.n	8008ea0 <__lshift+0xac>
 8008e9c:	f108 0602 	add.w	r6, r8, #2
 8008ea0:	3e01      	subs	r6, #1
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	612e      	str	r6, [r5, #16]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	f7ff fd88 	bl	80089bc <_Bfree>
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	e7c1      	b.n	8008e3e <__lshift+0x4a>
 8008eba:	3904      	subs	r1, #4
 8008ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ec4:	4298      	cmp	r0, r3
 8008ec6:	d8f9      	bhi.n	8008ebc <__lshift+0xc8>
 8008ec8:	e7ea      	b.n	8008ea0 <__lshift+0xac>
 8008eca:	bf00      	nop
 8008ecc:	0800a158 	.word	0x0800a158
 8008ed0:	0800a248 	.word	0x0800a248

08008ed4 <__mcmp>:
 8008ed4:	b530      	push	{r4, r5, lr}
 8008ed6:	6902      	ldr	r2, [r0, #16]
 8008ed8:	690c      	ldr	r4, [r1, #16]
 8008eda:	1b12      	subs	r2, r2, r4
 8008edc:	d10e      	bne.n	8008efc <__mcmp+0x28>
 8008ede:	f100 0314 	add.w	r3, r0, #20
 8008ee2:	3114      	adds	r1, #20
 8008ee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008eec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ef4:	42a5      	cmp	r5, r4
 8008ef6:	d003      	beq.n	8008f00 <__mcmp+0x2c>
 8008ef8:	d305      	bcc.n	8008f06 <__mcmp+0x32>
 8008efa:	2201      	movs	r2, #1
 8008efc:	4610      	mov	r0, r2
 8008efe:	bd30      	pop	{r4, r5, pc}
 8008f00:	4283      	cmp	r3, r0
 8008f02:	d3f3      	bcc.n	8008eec <__mcmp+0x18>
 8008f04:	e7fa      	b.n	8008efc <__mcmp+0x28>
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f0a:	e7f7      	b.n	8008efc <__mcmp+0x28>

08008f0c <__mdiff>:
 8008f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	4606      	mov	r6, r0
 8008f14:	4611      	mov	r1, r2
 8008f16:	4620      	mov	r0, r4
 8008f18:	4690      	mov	r8, r2
 8008f1a:	f7ff ffdb 	bl	8008ed4 <__mcmp>
 8008f1e:	1e05      	subs	r5, r0, #0
 8008f20:	d110      	bne.n	8008f44 <__mdiff+0x38>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fd09 	bl	800893c <_Balloc>
 8008f2a:	b930      	cbnz	r0, 8008f3a <__mdiff+0x2e>
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	; (8009018 <__mdiff+0x10c>)
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f240 2132 	movw	r1, #562	; 0x232
 8008f34:	4839      	ldr	r0, [pc, #228]	; (800901c <__mdiff+0x110>)
 8008f36:	f000 fca5 	bl	8009884 <__assert_func>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f44:	bfa4      	itt	ge
 8008f46:	4643      	movge	r3, r8
 8008f48:	46a0      	movge	r8, r4
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f50:	bfa6      	itte	ge
 8008f52:	461c      	movge	r4, r3
 8008f54:	2500      	movge	r5, #0
 8008f56:	2501      	movlt	r5, #1
 8008f58:	f7ff fcf0 	bl	800893c <_Balloc>
 8008f5c:	b920      	cbnz	r0, 8008f68 <__mdiff+0x5c>
 8008f5e:	4b2e      	ldr	r3, [pc, #184]	; (8009018 <__mdiff+0x10c>)
 8008f60:	4602      	mov	r2, r0
 8008f62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f66:	e7e5      	b.n	8008f34 <__mdiff+0x28>
 8008f68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f6c:	6926      	ldr	r6, [r4, #16]
 8008f6e:	60c5      	str	r5, [r0, #12]
 8008f70:	f104 0914 	add.w	r9, r4, #20
 8008f74:	f108 0514 	add.w	r5, r8, #20
 8008f78:	f100 0e14 	add.w	lr, r0, #20
 8008f7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f84:	f108 0210 	add.w	r2, r8, #16
 8008f88:	46f2      	mov	sl, lr
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f94:	fa1f f883 	uxth.w	r8, r3
 8008f98:	fa11 f18b 	uxtah	r1, r1, fp
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	eba1 0808 	sub.w	r8, r1, r8
 8008fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008faa:	fa1f f888 	uxth.w	r8, r8
 8008fae:	1419      	asrs	r1, r3, #16
 8008fb0:	454e      	cmp	r6, r9
 8008fb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8008fba:	d8e7      	bhi.n	8008f8c <__mdiff+0x80>
 8008fbc:	1b33      	subs	r3, r6, r4
 8008fbe:	3b15      	subs	r3, #21
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	3415      	adds	r4, #21
 8008fc8:	42a6      	cmp	r6, r4
 8008fca:	bf38      	it	cc
 8008fcc:	2304      	movcc	r3, #4
 8008fce:	441d      	add	r5, r3
 8008fd0:	4473      	add	r3, lr
 8008fd2:	469e      	mov	lr, r3
 8008fd4:	462e      	mov	r6, r5
 8008fd6:	4566      	cmp	r6, ip
 8008fd8:	d30e      	bcc.n	8008ff8 <__mdiff+0xec>
 8008fda:	f10c 0203 	add.w	r2, ip, #3
 8008fde:	1b52      	subs	r2, r2, r5
 8008fe0:	f022 0203 	bic.w	r2, r2, #3
 8008fe4:	3d03      	subs	r5, #3
 8008fe6:	45ac      	cmp	ip, r5
 8008fe8:	bf38      	it	cc
 8008fea:	2200      	movcc	r2, #0
 8008fec:	441a      	add	r2, r3
 8008fee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ff2:	b17b      	cbz	r3, 8009014 <__mdiff+0x108>
 8008ff4:	6107      	str	r7, [r0, #16]
 8008ff6:	e7a3      	b.n	8008f40 <__mdiff+0x34>
 8008ff8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ffc:	fa11 f288 	uxtah	r2, r1, r8
 8009000:	1414      	asrs	r4, r2, #16
 8009002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009006:	b292      	uxth	r2, r2
 8009008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800900c:	f84e 2b04 	str.w	r2, [lr], #4
 8009010:	1421      	asrs	r1, r4, #16
 8009012:	e7e0      	b.n	8008fd6 <__mdiff+0xca>
 8009014:	3f01      	subs	r7, #1
 8009016:	e7ea      	b.n	8008fee <__mdiff+0xe2>
 8009018:	0800a158 	.word	0x0800a158
 800901c:	0800a248 	.word	0x0800a248

08009020 <__ulp>:
 8009020:	b082      	sub	sp, #8
 8009022:	ed8d 0b00 	vstr	d0, [sp]
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	4912      	ldr	r1, [pc, #72]	; (8009074 <__ulp+0x54>)
 800902a:	4019      	ands	r1, r3
 800902c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009030:	2900      	cmp	r1, #0
 8009032:	dd05      	ble.n	8009040 <__ulp+0x20>
 8009034:	2200      	movs	r2, #0
 8009036:	460b      	mov	r3, r1
 8009038:	ec43 2b10 	vmov	d0, r2, r3
 800903c:	b002      	add	sp, #8
 800903e:	4770      	bx	lr
 8009040:	4249      	negs	r1, r1
 8009042:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009046:	ea4f 5021 	mov.w	r0, r1, asr #20
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	da04      	bge.n	800905e <__ulp+0x3e>
 8009054:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009058:	fa41 f300 	asr.w	r3, r1, r0
 800905c:	e7ec      	b.n	8009038 <__ulp+0x18>
 800905e:	f1a0 0114 	sub.w	r1, r0, #20
 8009062:	291e      	cmp	r1, #30
 8009064:	bfda      	itte	le
 8009066:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800906a:	fa20 f101 	lsrle.w	r1, r0, r1
 800906e:	2101      	movgt	r1, #1
 8009070:	460a      	mov	r2, r1
 8009072:	e7e1      	b.n	8009038 <__ulp+0x18>
 8009074:	7ff00000 	.word	0x7ff00000

08009078 <__b2d>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	6905      	ldr	r5, [r0, #16]
 800907c:	f100 0714 	add.w	r7, r0, #20
 8009080:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009084:	1f2e      	subs	r6, r5, #4
 8009086:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff fd48 	bl	8008b20 <__hi0bits>
 8009090:	f1c0 0320 	rsb	r3, r0, #32
 8009094:	280a      	cmp	r0, #10
 8009096:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009114 <__b2d+0x9c>
 800909a:	600b      	str	r3, [r1, #0]
 800909c:	dc14      	bgt.n	80090c8 <__b2d+0x50>
 800909e:	f1c0 0e0b 	rsb	lr, r0, #11
 80090a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80090a6:	42b7      	cmp	r7, r6
 80090a8:	ea41 030c 	orr.w	r3, r1, ip
 80090ac:	bf34      	ite	cc
 80090ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090b2:	2100      	movcs	r1, #0
 80090b4:	3015      	adds	r0, #21
 80090b6:	fa04 f000 	lsl.w	r0, r4, r0
 80090ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80090be:	ea40 0201 	orr.w	r2, r0, r1
 80090c2:	ec43 2b10 	vmov	d0, r2, r3
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	42b7      	cmp	r7, r6
 80090ca:	bf3a      	itte	cc
 80090cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80090d4:	2100      	movcs	r1, #0
 80090d6:	380b      	subs	r0, #11
 80090d8:	d017      	beq.n	800910a <__b2d+0x92>
 80090da:	f1c0 0c20 	rsb	ip, r0, #32
 80090de:	fa04 f500 	lsl.w	r5, r4, r0
 80090e2:	42be      	cmp	r6, r7
 80090e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80090e8:	ea45 0504 	orr.w	r5, r5, r4
 80090ec:	bf8c      	ite	hi
 80090ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090f2:	2400      	movls	r4, #0
 80090f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80090f8:	fa01 f000 	lsl.w	r0, r1, r0
 80090fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8009100:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009104:	ea40 0204 	orr.w	r2, r0, r4
 8009108:	e7db      	b.n	80090c2 <__b2d+0x4a>
 800910a:	ea44 030c 	orr.w	r3, r4, ip
 800910e:	460a      	mov	r2, r1
 8009110:	e7d7      	b.n	80090c2 <__b2d+0x4a>
 8009112:	bf00      	nop
 8009114:	3ff00000 	.word	0x3ff00000

08009118 <__d2b>:
 8009118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800911c:	4689      	mov	r9, r1
 800911e:	2101      	movs	r1, #1
 8009120:	ec57 6b10 	vmov	r6, r7, d0
 8009124:	4690      	mov	r8, r2
 8009126:	f7ff fc09 	bl	800893c <_Balloc>
 800912a:	4604      	mov	r4, r0
 800912c:	b930      	cbnz	r0, 800913c <__d2b+0x24>
 800912e:	4602      	mov	r2, r0
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <__d2b+0xb0>)
 8009132:	4826      	ldr	r0, [pc, #152]	; (80091cc <__d2b+0xb4>)
 8009134:	f240 310a 	movw	r1, #778	; 0x30a
 8009138:	f000 fba4 	bl	8009884 <__assert_func>
 800913c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009144:	bb35      	cbnz	r5, 8009194 <__d2b+0x7c>
 8009146:	2e00      	cmp	r6, #0
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	d028      	beq.n	800919e <__d2b+0x86>
 800914c:	4668      	mov	r0, sp
 800914e:	9600      	str	r6, [sp, #0]
 8009150:	f7ff fd06 	bl	8008b60 <__lo0bits>
 8009154:	9900      	ldr	r1, [sp, #0]
 8009156:	b300      	cbz	r0, 800919a <__d2b+0x82>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	f1c0 0320 	rsb	r3, r0, #32
 800915e:	fa02 f303 	lsl.w	r3, r2, r3
 8009162:	430b      	orrs	r3, r1
 8009164:	40c2      	lsrs	r2, r0
 8009166:	6163      	str	r3, [r4, #20]
 8009168:	9201      	str	r2, [sp, #4]
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	61a3      	str	r3, [r4, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bf14      	ite	ne
 8009172:	2202      	movne	r2, #2
 8009174:	2201      	moveq	r2, #1
 8009176:	6122      	str	r2, [r4, #16]
 8009178:	b1d5      	cbz	r5, 80091b0 <__d2b+0x98>
 800917a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800917e:	4405      	add	r5, r0
 8009180:	f8c9 5000 	str.w	r5, [r9]
 8009184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009188:	f8c8 0000 	str.w	r0, [r8]
 800918c:	4620      	mov	r0, r4
 800918e:	b003      	add	sp, #12
 8009190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009198:	e7d5      	b.n	8009146 <__d2b+0x2e>
 800919a:	6161      	str	r1, [r4, #20]
 800919c:	e7e5      	b.n	800916a <__d2b+0x52>
 800919e:	a801      	add	r0, sp, #4
 80091a0:	f7ff fcde 	bl	8008b60 <__lo0bits>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	6163      	str	r3, [r4, #20]
 80091a8:	2201      	movs	r2, #1
 80091aa:	6122      	str	r2, [r4, #16]
 80091ac:	3020      	adds	r0, #32
 80091ae:	e7e3      	b.n	8009178 <__d2b+0x60>
 80091b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091b8:	f8c9 0000 	str.w	r0, [r9]
 80091bc:	6918      	ldr	r0, [r3, #16]
 80091be:	f7ff fcaf 	bl	8008b20 <__hi0bits>
 80091c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091c6:	e7df      	b.n	8009188 <__d2b+0x70>
 80091c8:	0800a158 	.word	0x0800a158
 80091cc:	0800a248 	.word	0x0800a248

080091d0 <__ratio>:
 80091d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4688      	mov	r8, r1
 80091d6:	4669      	mov	r1, sp
 80091d8:	4681      	mov	r9, r0
 80091da:	f7ff ff4d 	bl	8009078 <__b2d>
 80091de:	a901      	add	r1, sp, #4
 80091e0:	4640      	mov	r0, r8
 80091e2:	ec55 4b10 	vmov	r4, r5, d0
 80091e6:	f7ff ff47 	bl	8009078 <__b2d>
 80091ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80091f2:	eba3 0c02 	sub.w	ip, r3, r2
 80091f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009200:	ec51 0b10 	vmov	r0, r1, d0
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfd6      	itet	le
 8009208:	460a      	movle	r2, r1
 800920a:	462a      	movgt	r2, r5
 800920c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009210:	468b      	mov	fp, r1
 8009212:	462f      	mov	r7, r5
 8009214:	bfd4      	ite	le
 8009216:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800921a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800921e:	4620      	mov	r0, r4
 8009220:	ee10 2a10 	vmov	r2, s0
 8009224:	465b      	mov	r3, fp
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 fb20 	bl	800086c <__aeabi_ddiv>
 800922c:	ec41 0b10 	vmov	d0, r0, r1
 8009230:	b003      	add	sp, #12
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009236 <__copybits>:
 8009236:	3901      	subs	r1, #1
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	1149      	asrs	r1, r1, #5
 800923c:	6914      	ldr	r4, [r2, #16]
 800923e:	3101      	adds	r1, #1
 8009240:	f102 0314 	add.w	r3, r2, #20
 8009244:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009248:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800924c:	1f05      	subs	r5, r0, #4
 800924e:	42a3      	cmp	r3, r4
 8009250:	d30c      	bcc.n	800926c <__copybits+0x36>
 8009252:	1aa3      	subs	r3, r4, r2
 8009254:	3b11      	subs	r3, #17
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	3211      	adds	r2, #17
 800925c:	42a2      	cmp	r2, r4
 800925e:	bf88      	it	hi
 8009260:	2300      	movhi	r3, #0
 8009262:	4418      	add	r0, r3
 8009264:	2300      	movs	r3, #0
 8009266:	4288      	cmp	r0, r1
 8009268:	d305      	bcc.n	8009276 <__copybits+0x40>
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009270:	f845 6f04 	str.w	r6, [r5, #4]!
 8009274:	e7eb      	b.n	800924e <__copybits+0x18>
 8009276:	f840 3b04 	str.w	r3, [r0], #4
 800927a:	e7f4      	b.n	8009266 <__copybits+0x30>

0800927c <__any_on>:
 800927c:	f100 0214 	add.w	r2, r0, #20
 8009280:	6900      	ldr	r0, [r0, #16]
 8009282:	114b      	asrs	r3, r1, #5
 8009284:	4298      	cmp	r0, r3
 8009286:	b510      	push	{r4, lr}
 8009288:	db11      	blt.n	80092ae <__any_on+0x32>
 800928a:	dd0a      	ble.n	80092a2 <__any_on+0x26>
 800928c:	f011 011f 	ands.w	r1, r1, #31
 8009290:	d007      	beq.n	80092a2 <__any_on+0x26>
 8009292:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009296:	fa24 f001 	lsr.w	r0, r4, r1
 800929a:	fa00 f101 	lsl.w	r1, r0, r1
 800929e:	428c      	cmp	r4, r1
 80092a0:	d10b      	bne.n	80092ba <__any_on+0x3e>
 80092a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d803      	bhi.n	80092b2 <__any_on+0x36>
 80092aa:	2000      	movs	r0, #0
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	4603      	mov	r3, r0
 80092b0:	e7f7      	b.n	80092a2 <__any_on+0x26>
 80092b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d0f5      	beq.n	80092a6 <__any_on+0x2a>
 80092ba:	2001      	movs	r0, #1
 80092bc:	e7f6      	b.n	80092ac <__any_on+0x30>

080092be <_calloc_r>:
 80092be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092c0:	fba1 2402 	umull	r2, r4, r1, r2
 80092c4:	b94c      	cbnz	r4, 80092da <_calloc_r+0x1c>
 80092c6:	4611      	mov	r1, r2
 80092c8:	9201      	str	r2, [sp, #4]
 80092ca:	f000 f87b 	bl	80093c4 <_malloc_r>
 80092ce:	9a01      	ldr	r2, [sp, #4]
 80092d0:	4605      	mov	r5, r0
 80092d2:	b930      	cbnz	r0, 80092e2 <_calloc_r+0x24>
 80092d4:	4628      	mov	r0, r5
 80092d6:	b003      	add	sp, #12
 80092d8:	bd30      	pop	{r4, r5, pc}
 80092da:	220c      	movs	r2, #12
 80092dc:	6002      	str	r2, [r0, #0]
 80092de:	2500      	movs	r5, #0
 80092e0:	e7f8      	b.n	80092d4 <_calloc_r+0x16>
 80092e2:	4621      	mov	r1, r4
 80092e4:	f7fc f8f0 	bl	80054c8 <memset>
 80092e8:	e7f4      	b.n	80092d4 <_calloc_r+0x16>
	...

080092ec <_free_r>:
 80092ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d044      	beq.n	800937c <_free_r+0x90>
 80092f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f6:	9001      	str	r0, [sp, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f1a1 0404 	sub.w	r4, r1, #4
 80092fe:	bfb8      	it	lt
 8009300:	18e4      	addlt	r4, r4, r3
 8009302:	f000 fb4d 	bl	80099a0 <__malloc_lock>
 8009306:	4a1e      	ldr	r2, [pc, #120]	; (8009380 <_free_r+0x94>)
 8009308:	9801      	ldr	r0, [sp, #4]
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	b933      	cbnz	r3, 800931c <_free_r+0x30>
 800930e:	6063      	str	r3, [r4, #4]
 8009310:	6014      	str	r4, [r2, #0]
 8009312:	b003      	add	sp, #12
 8009314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009318:	f000 bb48 	b.w	80099ac <__malloc_unlock>
 800931c:	42a3      	cmp	r3, r4
 800931e:	d908      	bls.n	8009332 <_free_r+0x46>
 8009320:	6825      	ldr	r5, [r4, #0]
 8009322:	1961      	adds	r1, r4, r5
 8009324:	428b      	cmp	r3, r1
 8009326:	bf01      	itttt	eq
 8009328:	6819      	ldreq	r1, [r3, #0]
 800932a:	685b      	ldreq	r3, [r3, #4]
 800932c:	1949      	addeq	r1, r1, r5
 800932e:	6021      	streq	r1, [r4, #0]
 8009330:	e7ed      	b.n	800930e <_free_r+0x22>
 8009332:	461a      	mov	r2, r3
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	b10b      	cbz	r3, 800933c <_free_r+0x50>
 8009338:	42a3      	cmp	r3, r4
 800933a:	d9fa      	bls.n	8009332 <_free_r+0x46>
 800933c:	6811      	ldr	r1, [r2, #0]
 800933e:	1855      	adds	r5, r2, r1
 8009340:	42a5      	cmp	r5, r4
 8009342:	d10b      	bne.n	800935c <_free_r+0x70>
 8009344:	6824      	ldr	r4, [r4, #0]
 8009346:	4421      	add	r1, r4
 8009348:	1854      	adds	r4, r2, r1
 800934a:	42a3      	cmp	r3, r4
 800934c:	6011      	str	r1, [r2, #0]
 800934e:	d1e0      	bne.n	8009312 <_free_r+0x26>
 8009350:	681c      	ldr	r4, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	6053      	str	r3, [r2, #4]
 8009356:	4421      	add	r1, r4
 8009358:	6011      	str	r1, [r2, #0]
 800935a:	e7da      	b.n	8009312 <_free_r+0x26>
 800935c:	d902      	bls.n	8009364 <_free_r+0x78>
 800935e:	230c      	movs	r3, #12
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	e7d6      	b.n	8009312 <_free_r+0x26>
 8009364:	6825      	ldr	r5, [r4, #0]
 8009366:	1961      	adds	r1, r4, r5
 8009368:	428b      	cmp	r3, r1
 800936a:	bf04      	itt	eq
 800936c:	6819      	ldreq	r1, [r3, #0]
 800936e:	685b      	ldreq	r3, [r3, #4]
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	bf04      	itt	eq
 8009374:	1949      	addeq	r1, r1, r5
 8009376:	6021      	streq	r1, [r4, #0]
 8009378:	6054      	str	r4, [r2, #4]
 800937a:	e7ca      	b.n	8009312 <_free_r+0x26>
 800937c:	b003      	add	sp, #12
 800937e:	bd30      	pop	{r4, r5, pc}
 8009380:	2000030c 	.word	0x2000030c

08009384 <sbrk_aligned>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4e0e      	ldr	r6, [pc, #56]	; (80093c0 <sbrk_aligned+0x3c>)
 8009388:	460c      	mov	r4, r1
 800938a:	6831      	ldr	r1, [r6, #0]
 800938c:	4605      	mov	r5, r0
 800938e:	b911      	cbnz	r1, 8009396 <sbrk_aligned+0x12>
 8009390:	f000 f9f2 	bl	8009778 <_sbrk_r>
 8009394:	6030      	str	r0, [r6, #0]
 8009396:	4621      	mov	r1, r4
 8009398:	4628      	mov	r0, r5
 800939a:	f000 f9ed 	bl	8009778 <_sbrk_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d00a      	beq.n	80093b8 <sbrk_aligned+0x34>
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d007      	beq.n	80093bc <sbrk_aligned+0x38>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 f9e2 	bl	8009778 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d101      	bne.n	80093bc <sbrk_aligned+0x38>
 80093b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093bc:	4620      	mov	r0, r4
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	20000310 	.word	0x20000310

080093c4 <_malloc_r>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	1ccd      	adds	r5, r1, #3
 80093ca:	f025 0503 	bic.w	r5, r5, #3
 80093ce:	3508      	adds	r5, #8
 80093d0:	2d0c      	cmp	r5, #12
 80093d2:	bf38      	it	cc
 80093d4:	250c      	movcc	r5, #12
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	4607      	mov	r7, r0
 80093da:	db01      	blt.n	80093e0 <_malloc_r+0x1c>
 80093dc:	42a9      	cmp	r1, r5
 80093de:	d905      	bls.n	80093ec <_malloc_r+0x28>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	2600      	movs	r6, #0
 80093e6:	4630      	mov	r0, r6
 80093e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ec:	4e2e      	ldr	r6, [pc, #184]	; (80094a8 <_malloc_r+0xe4>)
 80093ee:	f000 fad7 	bl	80099a0 <__malloc_lock>
 80093f2:	6833      	ldr	r3, [r6, #0]
 80093f4:	461c      	mov	r4, r3
 80093f6:	bb34      	cbnz	r4, 8009446 <_malloc_r+0x82>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4638      	mov	r0, r7
 80093fc:	f7ff ffc2 	bl	8009384 <sbrk_aligned>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	4604      	mov	r4, r0
 8009404:	d14d      	bne.n	80094a2 <_malloc_r+0xde>
 8009406:	6834      	ldr	r4, [r6, #0]
 8009408:	4626      	mov	r6, r4
 800940a:	2e00      	cmp	r6, #0
 800940c:	d140      	bne.n	8009490 <_malloc_r+0xcc>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	4631      	mov	r1, r6
 8009412:	4638      	mov	r0, r7
 8009414:	eb04 0803 	add.w	r8, r4, r3
 8009418:	f000 f9ae 	bl	8009778 <_sbrk_r>
 800941c:	4580      	cmp	r8, r0
 800941e:	d13a      	bne.n	8009496 <_malloc_r+0xd2>
 8009420:	6821      	ldr	r1, [r4, #0]
 8009422:	3503      	adds	r5, #3
 8009424:	1a6d      	subs	r5, r5, r1
 8009426:	f025 0503 	bic.w	r5, r5, #3
 800942a:	3508      	adds	r5, #8
 800942c:	2d0c      	cmp	r5, #12
 800942e:	bf38      	it	cc
 8009430:	250c      	movcc	r5, #12
 8009432:	4629      	mov	r1, r5
 8009434:	4638      	mov	r0, r7
 8009436:	f7ff ffa5 	bl	8009384 <sbrk_aligned>
 800943a:	3001      	adds	r0, #1
 800943c:	d02b      	beq.n	8009496 <_malloc_r+0xd2>
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	442b      	add	r3, r5
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	e00e      	b.n	8009464 <_malloc_r+0xa0>
 8009446:	6822      	ldr	r2, [r4, #0]
 8009448:	1b52      	subs	r2, r2, r5
 800944a:	d41e      	bmi.n	800948a <_malloc_r+0xc6>
 800944c:	2a0b      	cmp	r2, #11
 800944e:	d916      	bls.n	800947e <_malloc_r+0xba>
 8009450:	1961      	adds	r1, r4, r5
 8009452:	42a3      	cmp	r3, r4
 8009454:	6025      	str	r5, [r4, #0]
 8009456:	bf18      	it	ne
 8009458:	6059      	strne	r1, [r3, #4]
 800945a:	6863      	ldr	r3, [r4, #4]
 800945c:	bf08      	it	eq
 800945e:	6031      	streq	r1, [r6, #0]
 8009460:	5162      	str	r2, [r4, r5]
 8009462:	604b      	str	r3, [r1, #4]
 8009464:	4638      	mov	r0, r7
 8009466:	f104 060b 	add.w	r6, r4, #11
 800946a:	f000 fa9f 	bl	80099ac <__malloc_unlock>
 800946e:	f026 0607 	bic.w	r6, r6, #7
 8009472:	1d23      	adds	r3, r4, #4
 8009474:	1af2      	subs	r2, r6, r3
 8009476:	d0b6      	beq.n	80093e6 <_malloc_r+0x22>
 8009478:	1b9b      	subs	r3, r3, r6
 800947a:	50a3      	str	r3, [r4, r2]
 800947c:	e7b3      	b.n	80093e6 <_malloc_r+0x22>
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	42a3      	cmp	r3, r4
 8009482:	bf0c      	ite	eq
 8009484:	6032      	streq	r2, [r6, #0]
 8009486:	605a      	strne	r2, [r3, #4]
 8009488:	e7ec      	b.n	8009464 <_malloc_r+0xa0>
 800948a:	4623      	mov	r3, r4
 800948c:	6864      	ldr	r4, [r4, #4]
 800948e:	e7b2      	b.n	80093f6 <_malloc_r+0x32>
 8009490:	4634      	mov	r4, r6
 8009492:	6876      	ldr	r6, [r6, #4]
 8009494:	e7b9      	b.n	800940a <_malloc_r+0x46>
 8009496:	230c      	movs	r3, #12
 8009498:	603b      	str	r3, [r7, #0]
 800949a:	4638      	mov	r0, r7
 800949c:	f000 fa86 	bl	80099ac <__malloc_unlock>
 80094a0:	e7a1      	b.n	80093e6 <_malloc_r+0x22>
 80094a2:	6025      	str	r5, [r4, #0]
 80094a4:	e7de      	b.n	8009464 <_malloc_r+0xa0>
 80094a6:	bf00      	nop
 80094a8:	2000030c 	.word	0x2000030c

080094ac <__ssputs_r>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	688e      	ldr	r6, [r1, #8]
 80094b2:	429e      	cmp	r6, r3
 80094b4:	4682      	mov	sl, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4690      	mov	r8, r2
 80094ba:	461f      	mov	r7, r3
 80094bc:	d838      	bhi.n	8009530 <__ssputs_r+0x84>
 80094be:	898a      	ldrh	r2, [r1, #12]
 80094c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c4:	d032      	beq.n	800952c <__ssputs_r+0x80>
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	6909      	ldr	r1, [r1, #16]
 80094ca:	eba5 0901 	sub.w	r9, r5, r1
 80094ce:	6965      	ldr	r5, [r4, #20]
 80094d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d8:	3301      	adds	r3, #1
 80094da:	444b      	add	r3, r9
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	429d      	cmp	r5, r3
 80094e0:	bf38      	it	cc
 80094e2:	461d      	movcc	r5, r3
 80094e4:	0553      	lsls	r3, r2, #21
 80094e6:	d531      	bpl.n	800954c <__ssputs_r+0xa0>
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7ff ff6b 	bl	80093c4 <_malloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	b950      	cbnz	r0, 8009508 <__ssputs_r+0x5c>
 80094f2:	230c      	movs	r3, #12
 80094f4:	f8ca 3000 	str.w	r3, [sl]
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	6921      	ldr	r1, [r4, #16]
 800950a:	464a      	mov	r2, r9
 800950c:	f7fb ffce 	bl	80054ac <memcpy>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	6126      	str	r6, [r4, #16]
 800951e:	6165      	str	r5, [r4, #20]
 8009520:	444e      	add	r6, r9
 8009522:	eba5 0509 	sub.w	r5, r5, r9
 8009526:	6026      	str	r6, [r4, #0]
 8009528:	60a5      	str	r5, [r4, #8]
 800952a:	463e      	mov	r6, r7
 800952c:	42be      	cmp	r6, r7
 800952e:	d900      	bls.n	8009532 <__ssputs_r+0x86>
 8009530:	463e      	mov	r6, r7
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	4632      	mov	r2, r6
 8009536:	4641      	mov	r1, r8
 8009538:	f000 fa18 	bl	800996c <memmove>
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	1b9b      	subs	r3, r3, r6
 8009540:	60a3      	str	r3, [r4, #8]
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	4433      	add	r3, r6
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	2000      	movs	r0, #0
 800954a:	e7db      	b.n	8009504 <__ssputs_r+0x58>
 800954c:	462a      	mov	r2, r5
 800954e:	f000 fa33 	bl	80099b8 <_realloc_r>
 8009552:	4606      	mov	r6, r0
 8009554:	2800      	cmp	r0, #0
 8009556:	d1e1      	bne.n	800951c <__ssputs_r+0x70>
 8009558:	6921      	ldr	r1, [r4, #16]
 800955a:	4650      	mov	r0, sl
 800955c:	f7ff fec6 	bl	80092ec <_free_r>
 8009560:	e7c7      	b.n	80094f2 <__ssputs_r+0x46>
	...

08009564 <_svfiprintf_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	4698      	mov	r8, r3
 800956a:	898b      	ldrh	r3, [r1, #12]
 800956c:	061b      	lsls	r3, r3, #24
 800956e:	b09d      	sub	sp, #116	; 0x74
 8009570:	4607      	mov	r7, r0
 8009572:	460d      	mov	r5, r1
 8009574:	4614      	mov	r4, r2
 8009576:	d50e      	bpl.n	8009596 <_svfiprintf_r+0x32>
 8009578:	690b      	ldr	r3, [r1, #16]
 800957a:	b963      	cbnz	r3, 8009596 <_svfiprintf_r+0x32>
 800957c:	2140      	movs	r1, #64	; 0x40
 800957e:	f7ff ff21 	bl	80093c4 <_malloc_r>
 8009582:	6028      	str	r0, [r5, #0]
 8009584:	6128      	str	r0, [r5, #16]
 8009586:	b920      	cbnz	r0, 8009592 <_svfiprintf_r+0x2e>
 8009588:	230c      	movs	r3, #12
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009590:	e0d1      	b.n	8009736 <_svfiprintf_r+0x1d2>
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	616b      	str	r3, [r5, #20]
 8009596:	2300      	movs	r3, #0
 8009598:	9309      	str	r3, [sp, #36]	; 0x24
 800959a:	2320      	movs	r3, #32
 800959c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a4:	2330      	movs	r3, #48	; 0x30
 80095a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009750 <_svfiprintf_r+0x1ec>
 80095aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ae:	f04f 0901 	mov.w	r9, #1
 80095b2:	4623      	mov	r3, r4
 80095b4:	469a      	mov	sl, r3
 80095b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ba:	b10a      	cbz	r2, 80095c0 <_svfiprintf_r+0x5c>
 80095bc:	2a25      	cmp	r2, #37	; 0x25
 80095be:	d1f9      	bne.n	80095b4 <_svfiprintf_r+0x50>
 80095c0:	ebba 0b04 	subs.w	fp, sl, r4
 80095c4:	d00b      	beq.n	80095de <_svfiprintf_r+0x7a>
 80095c6:	465b      	mov	r3, fp
 80095c8:	4622      	mov	r2, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	4638      	mov	r0, r7
 80095ce:	f7ff ff6d 	bl	80094ac <__ssputs_r>
 80095d2:	3001      	adds	r0, #1
 80095d4:	f000 80aa 	beq.w	800972c <_svfiprintf_r+0x1c8>
 80095d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095da:	445a      	add	r2, fp
 80095dc:	9209      	str	r2, [sp, #36]	; 0x24
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 80a2 	beq.w	800972c <_svfiprintf_r+0x1c8>
 80095e8:	2300      	movs	r3, #0
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f2:	f10a 0a01 	add.w	sl, sl, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009600:	4654      	mov	r4, sl
 8009602:	2205      	movs	r2, #5
 8009604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009608:	4851      	ldr	r0, [pc, #324]	; (8009750 <_svfiprintf_r+0x1ec>)
 800960a:	f7f6 fdf9 	bl	8000200 <memchr>
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	b9d8      	cbnz	r0, 800964a <_svfiprintf_r+0xe6>
 8009612:	06d0      	lsls	r0, r2, #27
 8009614:	bf44      	itt	mi
 8009616:	2320      	movmi	r3, #32
 8009618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961c:	0711      	lsls	r1, r2, #28
 800961e:	bf44      	itt	mi
 8009620:	232b      	movmi	r3, #43	; 0x2b
 8009622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b2a      	cmp	r3, #42	; 0x2a
 800962c:	d015      	beq.n	800965a <_svfiprintf_r+0xf6>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	4654      	mov	r4, sl
 8009632:	2000      	movs	r0, #0
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	4621      	mov	r1, r4
 800963a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963e:	3b30      	subs	r3, #48	; 0x30
 8009640:	2b09      	cmp	r3, #9
 8009642:	d94e      	bls.n	80096e2 <_svfiprintf_r+0x17e>
 8009644:	b1b0      	cbz	r0, 8009674 <_svfiprintf_r+0x110>
 8009646:	9207      	str	r2, [sp, #28]
 8009648:	e014      	b.n	8009674 <_svfiprintf_r+0x110>
 800964a:	eba0 0308 	sub.w	r3, r0, r8
 800964e:	fa09 f303 	lsl.w	r3, r9, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	46a2      	mov	sl, r4
 8009658:	e7d2      	b.n	8009600 <_svfiprintf_r+0x9c>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9103      	str	r1, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbb      	ittet	lt
 8009666:	425b      	neglt	r3, r3
 8009668:	f042 0202 	orrlt.w	r2, r2, #2
 800966c:	9307      	strge	r3, [sp, #28]
 800966e:	9307      	strlt	r3, [sp, #28]
 8009670:	bfb8      	it	lt
 8009672:	9204      	strlt	r2, [sp, #16]
 8009674:	7823      	ldrb	r3, [r4, #0]
 8009676:	2b2e      	cmp	r3, #46	; 0x2e
 8009678:	d10c      	bne.n	8009694 <_svfiprintf_r+0x130>
 800967a:	7863      	ldrb	r3, [r4, #1]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d135      	bne.n	80096ec <_svfiprintf_r+0x188>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9203      	str	r2, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfb8      	it	lt
 800968c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009690:	3402      	adds	r4, #2
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009760 <_svfiprintf_r+0x1fc>
 8009698:	7821      	ldrb	r1, [r4, #0]
 800969a:	2203      	movs	r2, #3
 800969c:	4650      	mov	r0, sl
 800969e:	f7f6 fdaf 	bl	8000200 <memchr>
 80096a2:	b140      	cbz	r0, 80096b6 <_svfiprintf_r+0x152>
 80096a4:	2340      	movs	r3, #64	; 0x40
 80096a6:	eba0 000a 	sub.w	r0, r0, sl
 80096aa:	fa03 f000 	lsl.w	r0, r3, r0
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	4303      	orrs	r3, r0
 80096b2:	3401      	adds	r4, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	4826      	ldr	r0, [pc, #152]	; (8009754 <_svfiprintf_r+0x1f0>)
 80096bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c0:	2206      	movs	r2, #6
 80096c2:	f7f6 fd9d 	bl	8000200 <memchr>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d038      	beq.n	800973c <_svfiprintf_r+0x1d8>
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <_svfiprintf_r+0x1f4>)
 80096cc:	bb1b      	cbnz	r3, 8009716 <_svfiprintf_r+0x1b2>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	3308      	adds	r3, #8
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	4433      	add	r3, r6
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	e767      	b.n	80095b2 <_svfiprintf_r+0x4e>
 80096e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e6:	460c      	mov	r4, r1
 80096e8:	2001      	movs	r0, #1
 80096ea:	e7a5      	b.n	8009638 <_svfiprintf_r+0xd4>
 80096ec:	2300      	movs	r3, #0
 80096ee:	3401      	adds	r4, #1
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0c0a 	mov.w	ip, #10
 80096f8:	4620      	mov	r0, r4
 80096fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fe:	3a30      	subs	r2, #48	; 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d903      	bls.n	800970c <_svfiprintf_r+0x1a8>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c5      	beq.n	8009694 <_svfiprintf_r+0x130>
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	e7c3      	b.n	8009694 <_svfiprintf_r+0x130>
 800970c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009710:	4604      	mov	r4, r0
 8009712:	2301      	movs	r3, #1
 8009714:	e7f0      	b.n	80096f8 <_svfiprintf_r+0x194>
 8009716:	ab03      	add	r3, sp, #12
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	462a      	mov	r2, r5
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <_svfiprintf_r+0x1f8>)
 800971e:	a904      	add	r1, sp, #16
 8009720:	4638      	mov	r0, r7
 8009722:	f7fb ff79 	bl	8005618 <_printf_float>
 8009726:	1c42      	adds	r2, r0, #1
 8009728:	4606      	mov	r6, r0
 800972a:	d1d6      	bne.n	80096da <_svfiprintf_r+0x176>
 800972c:	89ab      	ldrh	r3, [r5, #12]
 800972e:	065b      	lsls	r3, r3, #25
 8009730:	f53f af2c 	bmi.w	800958c <_svfiprintf_r+0x28>
 8009734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009736:	b01d      	add	sp, #116	; 0x74
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b06      	ldr	r3, [pc, #24]	; (800975c <_svfiprintf_r+0x1f8>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4638      	mov	r0, r7
 8009748:	f7fc fa0a 	bl	8005b60 <_printf_i>
 800974c:	e7eb      	b.n	8009726 <_svfiprintf_r+0x1c2>
 800974e:	bf00      	nop
 8009750:	0800a3a4 	.word	0x0800a3a4
 8009754:	0800a3ae 	.word	0x0800a3ae
 8009758:	08005619 	.word	0x08005619
 800975c:	080094ad 	.word	0x080094ad
 8009760:	0800a3aa 	.word	0x0800a3aa
 8009764:	00000000 	.word	0x00000000

08009768 <nan>:
 8009768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009770 <nan+0x8>
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	00000000 	.word	0x00000000
 8009774:	7ff80000 	.word	0x7ff80000

08009778 <_sbrk_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_sbrk_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f8 f8a6 	bl	80018d4 <_sbrk>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_sbrk_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_sbrk_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20000314 	.word	0x20000314

08009798 <__sread>:
 8009798:	b510      	push	{r4, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a0:	f000 fa92 	bl	8009cc8 <_read_r>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	bfab      	itete	ge
 80097a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097aa:	89a3      	ldrhlt	r3, [r4, #12]
 80097ac:	181b      	addge	r3, r3, r0
 80097ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097b2:	bfac      	ite	ge
 80097b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80097b6:	81a3      	strhlt	r3, [r4, #12]
 80097b8:	bd10      	pop	{r4, pc}

080097ba <__swrite>:
 80097ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097be:	461f      	mov	r7, r3
 80097c0:	898b      	ldrh	r3, [r1, #12]
 80097c2:	05db      	lsls	r3, r3, #23
 80097c4:	4605      	mov	r5, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	4616      	mov	r6, r2
 80097ca:	d505      	bpl.n	80097d8 <__swrite+0x1e>
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	2302      	movs	r3, #2
 80097d2:	2200      	movs	r2, #0
 80097d4:	f000 f8b8 	bl	8009948 <_lseek_r>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	f000 b837 	b.w	8009860 <_write_r>

080097f2 <__sseek>:
 80097f2:	b510      	push	{r4, lr}
 80097f4:	460c      	mov	r4, r1
 80097f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fa:	f000 f8a5 	bl	8009948 <_lseek_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	bf15      	itete	ne
 8009804:	6560      	strne	r0, [r4, #84]	; 0x54
 8009806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800980a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800980e:	81a3      	strheq	r3, [r4, #12]
 8009810:	bf18      	it	ne
 8009812:	81a3      	strhne	r3, [r4, #12]
 8009814:	bd10      	pop	{r4, pc}

08009816 <__sclose>:
 8009816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981a:	f000 b851 	b.w	80098c0 <_close_r>

0800981e <strncmp>:
 800981e:	b510      	push	{r4, lr}
 8009820:	b17a      	cbz	r2, 8009842 <strncmp+0x24>
 8009822:	4603      	mov	r3, r0
 8009824:	3901      	subs	r1, #1
 8009826:	1884      	adds	r4, r0, r2
 8009828:	f813 0b01 	ldrb.w	r0, [r3], #1
 800982c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009830:	4290      	cmp	r0, r2
 8009832:	d101      	bne.n	8009838 <strncmp+0x1a>
 8009834:	42a3      	cmp	r3, r4
 8009836:	d101      	bne.n	800983c <strncmp+0x1e>
 8009838:	1a80      	subs	r0, r0, r2
 800983a:	bd10      	pop	{r4, pc}
 800983c:	2800      	cmp	r0, #0
 800983e:	d1f3      	bne.n	8009828 <strncmp+0xa>
 8009840:	e7fa      	b.n	8009838 <strncmp+0x1a>
 8009842:	4610      	mov	r0, r2
 8009844:	e7f9      	b.n	800983a <strncmp+0x1c>

08009846 <__ascii_wctomb>:
 8009846:	b149      	cbz	r1, 800985c <__ascii_wctomb+0x16>
 8009848:	2aff      	cmp	r2, #255	; 0xff
 800984a:	bf85      	ittet	hi
 800984c:	238a      	movhi	r3, #138	; 0x8a
 800984e:	6003      	strhi	r3, [r0, #0]
 8009850:	700a      	strbls	r2, [r1, #0]
 8009852:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009856:	bf98      	it	ls
 8009858:	2001      	movls	r0, #1
 800985a:	4770      	bx	lr
 800985c:	4608      	mov	r0, r1
 800985e:	4770      	bx	lr

08009860 <_write_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	; (8009880 <_write_r+0x20>)
 8009864:	4604      	mov	r4, r0
 8009866:	4608      	mov	r0, r1
 8009868:	4611      	mov	r1, r2
 800986a:	2200      	movs	r2, #0
 800986c:	602a      	str	r2, [r5, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f7f7 ffdf 	bl	8001832 <_write>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d102      	bne.n	800987e <_write_r+0x1e>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	b103      	cbz	r3, 800987e <_write_r+0x1e>
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	20000314 	.word	0x20000314

08009884 <__assert_func>:
 8009884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009886:	4614      	mov	r4, r2
 8009888:	461a      	mov	r2, r3
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <__assert_func+0x2c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4605      	mov	r5, r0
 8009890:	68d8      	ldr	r0, [r3, #12]
 8009892:	b14c      	cbz	r4, 80098a8 <__assert_func+0x24>
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <__assert_func+0x30>)
 8009896:	9100      	str	r1, [sp, #0]
 8009898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800989c:	4906      	ldr	r1, [pc, #24]	; (80098b8 <__assert_func+0x34>)
 800989e:	462b      	mov	r3, r5
 80098a0:	f000 f81e 	bl	80098e0 <fiprintf>
 80098a4:	f000 fa22 	bl	8009cec <abort>
 80098a8:	4b04      	ldr	r3, [pc, #16]	; (80098bc <__assert_func+0x38>)
 80098aa:	461c      	mov	r4, r3
 80098ac:	e7f3      	b.n	8009896 <__assert_func+0x12>
 80098ae:	bf00      	nop
 80098b0:	20000010 	.word	0x20000010
 80098b4:	0800a3b5 	.word	0x0800a3b5
 80098b8:	0800a3c2 	.word	0x0800a3c2
 80098bc:	0800a3f0 	.word	0x0800a3f0

080098c0 <_close_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d06      	ldr	r5, [pc, #24]	; (80098dc <_close_r+0x1c>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7f7 ffcd 	bl	800186a <_close>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_close_r+0x1a>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_close_r+0x1a>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	20000314 	.word	0x20000314

080098e0 <fiprintf>:
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b503      	push	{r0, r1, lr}
 80098e4:	4601      	mov	r1, r0
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <fiprintf+0x20>)
 80098ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	f000 f8b9 	bl	8009a68 <_vfiprintf_r>
 80098f6:	b002      	add	sp, #8
 80098f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098fc:	b003      	add	sp, #12
 80098fe:	4770      	bx	lr
 8009900:	20000010 	.word	0x20000010

08009904 <_fstat_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d07      	ldr	r5, [pc, #28]	; (8009924 <_fstat_r+0x20>)
 8009908:	2300      	movs	r3, #0
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	4611      	mov	r1, r2
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	f7f7 ffb6 	bl	8001882 <_fstat>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d102      	bne.n	8009920 <_fstat_r+0x1c>
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	b103      	cbz	r3, 8009920 <_fstat_r+0x1c>
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	bd38      	pop	{r3, r4, r5, pc}
 8009922:	bf00      	nop
 8009924:	20000314 	.word	0x20000314

08009928 <_isatty_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d06      	ldr	r5, [pc, #24]	; (8009944 <_isatty_r+0x1c>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f7f7 ffb5 	bl	80018a2 <_isatty>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_isatty_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_isatty_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20000314 	.word	0x20000314

08009948 <_lseek_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_lseek_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f7 ffae 	bl	80018b8 <_lseek>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_lseek_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_lseek_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20000314 	.word	0x20000314

0800996c <memmove>:
 800996c:	4288      	cmp	r0, r1
 800996e:	b510      	push	{r4, lr}
 8009970:	eb01 0402 	add.w	r4, r1, r2
 8009974:	d902      	bls.n	800997c <memmove+0x10>
 8009976:	4284      	cmp	r4, r0
 8009978:	4623      	mov	r3, r4
 800997a:	d807      	bhi.n	800998c <memmove+0x20>
 800997c:	1e43      	subs	r3, r0, #1
 800997e:	42a1      	cmp	r1, r4
 8009980:	d008      	beq.n	8009994 <memmove+0x28>
 8009982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800998a:	e7f8      	b.n	800997e <memmove+0x12>
 800998c:	4402      	add	r2, r0
 800998e:	4601      	mov	r1, r0
 8009990:	428a      	cmp	r2, r1
 8009992:	d100      	bne.n	8009996 <memmove+0x2a>
 8009994:	bd10      	pop	{r4, pc}
 8009996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800999a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800999e:	e7f7      	b.n	8009990 <memmove+0x24>

080099a0 <__malloc_lock>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__malloc_lock+0x8>)
 80099a2:	f7fe bf4a 	b.w	800883a <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	20000308 	.word	0x20000308

080099ac <__malloc_unlock>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__malloc_unlock+0x8>)
 80099ae:	f7fe bf45 	b.w	800883c <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	20000308 	.word	0x20000308

080099b8 <_realloc_r>:
 80099b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099bc:	4680      	mov	r8, r0
 80099be:	4614      	mov	r4, r2
 80099c0:	460e      	mov	r6, r1
 80099c2:	b921      	cbnz	r1, 80099ce <_realloc_r+0x16>
 80099c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	4611      	mov	r1, r2
 80099ca:	f7ff bcfb 	b.w	80093c4 <_malloc_r>
 80099ce:	b92a      	cbnz	r2, 80099dc <_realloc_r+0x24>
 80099d0:	f7ff fc8c 	bl	80092ec <_free_r>
 80099d4:	4625      	mov	r5, r4
 80099d6:	4628      	mov	r0, r5
 80099d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099dc:	f000 f98d 	bl	8009cfa <_malloc_usable_size_r>
 80099e0:	4284      	cmp	r4, r0
 80099e2:	4607      	mov	r7, r0
 80099e4:	d802      	bhi.n	80099ec <_realloc_r+0x34>
 80099e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099ea:	d812      	bhi.n	8009a12 <_realloc_r+0x5a>
 80099ec:	4621      	mov	r1, r4
 80099ee:	4640      	mov	r0, r8
 80099f0:	f7ff fce8 	bl	80093c4 <_malloc_r>
 80099f4:	4605      	mov	r5, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d0ed      	beq.n	80099d6 <_realloc_r+0x1e>
 80099fa:	42bc      	cmp	r4, r7
 80099fc:	4622      	mov	r2, r4
 80099fe:	4631      	mov	r1, r6
 8009a00:	bf28      	it	cs
 8009a02:	463a      	movcs	r2, r7
 8009a04:	f7fb fd52 	bl	80054ac <memcpy>
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7ff fc6e 	bl	80092ec <_free_r>
 8009a10:	e7e1      	b.n	80099d6 <_realloc_r+0x1e>
 8009a12:	4635      	mov	r5, r6
 8009a14:	e7df      	b.n	80099d6 <_realloc_r+0x1e>

08009a16 <__sfputc_r>:
 8009a16:	6893      	ldr	r3, [r2, #8]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	b410      	push	{r4}
 8009a1e:	6093      	str	r3, [r2, #8]
 8009a20:	da08      	bge.n	8009a34 <__sfputc_r+0x1e>
 8009a22:	6994      	ldr	r4, [r2, #24]
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	db01      	blt.n	8009a2c <__sfputc_r+0x16>
 8009a28:	290a      	cmp	r1, #10
 8009a2a:	d103      	bne.n	8009a34 <__sfputc_r+0x1e>
 8009a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a30:	f7fd ba9e 	b.w	8006f70 <__swbuf_r>
 8009a34:	6813      	ldr	r3, [r2, #0]
 8009a36:	1c58      	adds	r0, r3, #1
 8009a38:	6010      	str	r0, [r2, #0]
 8009a3a:	7019      	strb	r1, [r3, #0]
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <__sfputs_r>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	18d5      	adds	r5, r2, r3
 8009a4e:	42ac      	cmp	r4, r5
 8009a50:	d101      	bne.n	8009a56 <__sfputs_r+0x12>
 8009a52:	2000      	movs	r0, #0
 8009a54:	e007      	b.n	8009a66 <__sfputs_r+0x22>
 8009a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5a:	463a      	mov	r2, r7
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff ffda 	bl	8009a16 <__sfputc_r>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	d1f3      	bne.n	8009a4e <__sfputs_r+0xa>
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a68 <_vfiprintf_r>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	b09d      	sub	sp, #116	; 0x74
 8009a70:	4614      	mov	r4, r2
 8009a72:	4698      	mov	r8, r3
 8009a74:	4606      	mov	r6, r0
 8009a76:	b118      	cbz	r0, 8009a80 <_vfiprintf_r+0x18>
 8009a78:	6983      	ldr	r3, [r0, #24]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <_vfiprintf_r+0x18>
 8009a7c:	f7fe facc 	bl	8008018 <__sinit>
 8009a80:	4b89      	ldr	r3, [pc, #548]	; (8009ca8 <_vfiprintf_r+0x240>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	d11b      	bne.n	8009abe <_vfiprintf_r+0x56>
 8009a86:	6875      	ldr	r5, [r6, #4]
 8009a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a8a:	07d9      	lsls	r1, r3, #31
 8009a8c:	d405      	bmi.n	8009a9a <_vfiprintf_r+0x32>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	059a      	lsls	r2, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_vfiprintf_r+0x32>
 8009a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a96:	f7fe fed0 	bl	800883a <__retarget_lock_acquire_recursive>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	071b      	lsls	r3, r3, #28
 8009a9e:	d501      	bpl.n	8009aa4 <_vfiprintf_r+0x3c>
 8009aa0:	692b      	ldr	r3, [r5, #16]
 8009aa2:	b9eb      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x78>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7fd fab4 	bl	8007014 <__swsetup_r>
 8009aac:	b1c0      	cbz	r0, 8009ae0 <_vfiprintf_r+0x78>
 8009aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab0:	07dc      	lsls	r4, r3, #31
 8009ab2:	d50e      	bpl.n	8009ad2 <_vfiprintf_r+0x6a>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ab8:	b01d      	add	sp, #116	; 0x74
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	4b7b      	ldr	r3, [pc, #492]	; (8009cac <_vfiprintf_r+0x244>)
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	d101      	bne.n	8009ac8 <_vfiprintf_r+0x60>
 8009ac4:	68b5      	ldr	r5, [r6, #8]
 8009ac6:	e7df      	b.n	8009a88 <_vfiprintf_r+0x20>
 8009ac8:	4b79      	ldr	r3, [pc, #484]	; (8009cb0 <_vfiprintf_r+0x248>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	bf08      	it	eq
 8009ace:	68f5      	ldreq	r5, [r6, #12]
 8009ad0:	e7da      	b.n	8009a88 <_vfiprintf_r+0x20>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	0598      	lsls	r0, r3, #22
 8009ad6:	d4ed      	bmi.n	8009ab4 <_vfiprintf_r+0x4c>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ada:	f7fe feaf 	bl	800883c <__retarget_lock_release_recursive>
 8009ade:	e7e9      	b.n	8009ab4 <_vfiprintf_r+0x4c>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aee:	2330      	movs	r3, #48	; 0x30
 8009af0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cb4 <_vfiprintf_r+0x24c>
 8009af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009af8:	f04f 0901 	mov.w	r9, #1
 8009afc:	4623      	mov	r3, r4
 8009afe:	469a      	mov	sl, r3
 8009b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b04:	b10a      	cbz	r2, 8009b0a <_vfiprintf_r+0xa2>
 8009b06:	2a25      	cmp	r2, #37	; 0x25
 8009b08:	d1f9      	bne.n	8009afe <_vfiprintf_r+0x96>
 8009b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b0e:	d00b      	beq.n	8009b28 <_vfiprintf_r+0xc0>
 8009b10:	465b      	mov	r3, fp
 8009b12:	4622      	mov	r2, r4
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ff94 	bl	8009a44 <__sfputs_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f000 80aa 	beq.w	8009c76 <_vfiprintf_r+0x20e>
 8009b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b24:	445a      	add	r2, fp
 8009b26:	9209      	str	r2, [sp, #36]	; 0x24
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80a2 	beq.w	8009c76 <_vfiprintf_r+0x20e>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b3c:	f10a 0a01 	add.w	sl, sl, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b48:	931a      	str	r3, [sp, #104]	; 0x68
 8009b4a:	4654      	mov	r4, sl
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4858      	ldr	r0, [pc, #352]	; (8009cb4 <_vfiprintf_r+0x24c>)
 8009b54:	f7f6 fb54 	bl	8000200 <memchr>
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	b9d8      	cbnz	r0, 8009b94 <_vfiprintf_r+0x12c>
 8009b5c:	06d1      	lsls	r1, r2, #27
 8009b5e:	bf44      	itt	mi
 8009b60:	2320      	movmi	r3, #32
 8009b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b66:	0713      	lsls	r3, r2, #28
 8009b68:	bf44      	itt	mi
 8009b6a:	232b      	movmi	r3, #43	; 0x2b
 8009b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b2a      	cmp	r3, #42	; 0x2a
 8009b76:	d015      	beq.n	8009ba4 <_vfiprintf_r+0x13c>
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	4654      	mov	r4, sl
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f04f 0c0a 	mov.w	ip, #10
 8009b82:	4621      	mov	r1, r4
 8009b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b88:	3b30      	subs	r3, #48	; 0x30
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d94e      	bls.n	8009c2c <_vfiprintf_r+0x1c4>
 8009b8e:	b1b0      	cbz	r0, 8009bbe <_vfiprintf_r+0x156>
 8009b90:	9207      	str	r2, [sp, #28]
 8009b92:	e014      	b.n	8009bbe <_vfiprintf_r+0x156>
 8009b94:	eba0 0308 	sub.w	r3, r0, r8
 8009b98:	fa09 f303 	lsl.w	r3, r9, r3
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	46a2      	mov	sl, r4
 8009ba2:	e7d2      	b.n	8009b4a <_vfiprintf_r+0xe2>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	1d19      	adds	r1, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	9103      	str	r1, [sp, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfbb      	ittet	lt
 8009bb0:	425b      	neglt	r3, r3
 8009bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb6:	9307      	strge	r3, [sp, #28]
 8009bb8:	9307      	strlt	r3, [sp, #28]
 8009bba:	bfb8      	it	lt
 8009bbc:	9204      	strlt	r2, [sp, #16]
 8009bbe:	7823      	ldrb	r3, [r4, #0]
 8009bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bc2:	d10c      	bne.n	8009bde <_vfiprintf_r+0x176>
 8009bc4:	7863      	ldrb	r3, [r4, #1]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d135      	bne.n	8009c36 <_vfiprintf_r+0x1ce>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	9203      	str	r2, [sp, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfb8      	it	lt
 8009bd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009bda:	3402      	adds	r4, #2
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cc4 <_vfiprintf_r+0x25c>
 8009be2:	7821      	ldrb	r1, [r4, #0]
 8009be4:	2203      	movs	r2, #3
 8009be6:	4650      	mov	r0, sl
 8009be8:	f7f6 fb0a 	bl	8000200 <memchr>
 8009bec:	b140      	cbz	r0, 8009c00 <_vfiprintf_r+0x198>
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	eba0 000a 	sub.w	r0, r0, sl
 8009bf4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bf8:	9b04      	ldr	r3, [sp, #16]
 8009bfa:	4303      	orrs	r3, r0
 8009bfc:	3401      	adds	r4, #1
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c04:	482c      	ldr	r0, [pc, #176]	; (8009cb8 <_vfiprintf_r+0x250>)
 8009c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c0a:	2206      	movs	r2, #6
 8009c0c:	f7f6 faf8 	bl	8000200 <memchr>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d03f      	beq.n	8009c94 <_vfiprintf_r+0x22c>
 8009c14:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <_vfiprintf_r+0x254>)
 8009c16:	bb1b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x1f8>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	3307      	adds	r3, #7
 8009c1c:	f023 0307 	bic.w	r3, r3, #7
 8009c20:	3308      	adds	r3, #8
 8009c22:	9303      	str	r3, [sp, #12]
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	443b      	add	r3, r7
 8009c28:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2a:	e767      	b.n	8009afc <_vfiprintf_r+0x94>
 8009c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c30:	460c      	mov	r4, r1
 8009c32:	2001      	movs	r0, #1
 8009c34:	e7a5      	b.n	8009b82 <_vfiprintf_r+0x11a>
 8009c36:	2300      	movs	r3, #0
 8009c38:	3401      	adds	r4, #1
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f04f 0c0a 	mov.w	ip, #10
 8009c42:	4620      	mov	r0, r4
 8009c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c48:	3a30      	subs	r2, #48	; 0x30
 8009c4a:	2a09      	cmp	r2, #9
 8009c4c:	d903      	bls.n	8009c56 <_vfiprintf_r+0x1ee>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0c5      	beq.n	8009bde <_vfiprintf_r+0x176>
 8009c52:	9105      	str	r1, [sp, #20]
 8009c54:	e7c3      	b.n	8009bde <_vfiprintf_r+0x176>
 8009c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e7f0      	b.n	8009c42 <_vfiprintf_r+0x1da>
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4b16      	ldr	r3, [pc, #88]	; (8009cc0 <_vfiprintf_r+0x258>)
 8009c68:	a904      	add	r1, sp, #16
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7fb fcd4 	bl	8005618 <_printf_float>
 8009c70:	4607      	mov	r7, r0
 8009c72:	1c78      	adds	r0, r7, #1
 8009c74:	d1d6      	bne.n	8009c24 <_vfiprintf_r+0x1bc>
 8009c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c78:	07d9      	lsls	r1, r3, #31
 8009c7a:	d405      	bmi.n	8009c88 <_vfiprintf_r+0x220>
 8009c7c:	89ab      	ldrh	r3, [r5, #12]
 8009c7e:	059a      	lsls	r2, r3, #22
 8009c80:	d402      	bmi.n	8009c88 <_vfiprintf_r+0x220>
 8009c82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c84:	f7fe fdda 	bl	800883c <__retarget_lock_release_recursive>
 8009c88:	89ab      	ldrh	r3, [r5, #12]
 8009c8a:	065b      	lsls	r3, r3, #25
 8009c8c:	f53f af12 	bmi.w	8009ab4 <_vfiprintf_r+0x4c>
 8009c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c92:	e711      	b.n	8009ab8 <_vfiprintf_r+0x50>
 8009c94:	ab03      	add	r3, sp, #12
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	462a      	mov	r2, r5
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <_vfiprintf_r+0x258>)
 8009c9c:	a904      	add	r1, sp, #16
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7fb ff5e 	bl	8005b60 <_printf_i>
 8009ca4:	e7e4      	b.n	8009c70 <_vfiprintf_r+0x208>
 8009ca6:	bf00      	nop
 8009ca8:	0800a18c 	.word	0x0800a18c
 8009cac:	0800a1ac 	.word	0x0800a1ac
 8009cb0:	0800a16c 	.word	0x0800a16c
 8009cb4:	0800a3a4 	.word	0x0800a3a4
 8009cb8:	0800a3ae 	.word	0x0800a3ae
 8009cbc:	08005619 	.word	0x08005619
 8009cc0:	08009a45 	.word	0x08009a45
 8009cc4:	0800a3aa 	.word	0x0800a3aa

08009cc8 <_read_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_read_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f7 fd8e 	bl	80017f8 <_read>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_read_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_read_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000314 	.word	0x20000314

08009cec <abort>:
 8009cec:	b508      	push	{r3, lr}
 8009cee:	2006      	movs	r0, #6
 8009cf0:	f000 f834 	bl	8009d5c <raise>
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	f7f7 fd75 	bl	80017e4 <_exit>

08009cfa <_malloc_usable_size_r>:
 8009cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfe:	1f18      	subs	r0, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfbc      	itt	lt
 8009d04:	580b      	ldrlt	r3, [r1, r0]
 8009d06:	18c0      	addlt	r0, r0, r3
 8009d08:	4770      	bx	lr

08009d0a <_raise_r>:
 8009d0a:	291f      	cmp	r1, #31
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4604      	mov	r4, r0
 8009d10:	460d      	mov	r5, r1
 8009d12:	d904      	bls.n	8009d1e <_raise_r+0x14>
 8009d14:	2316      	movs	r3, #22
 8009d16:	6003      	str	r3, [r0, #0]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d20:	b112      	cbz	r2, 8009d28 <_raise_r+0x1e>
 8009d22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d26:	b94b      	cbnz	r3, 8009d3c <_raise_r+0x32>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 f831 	bl	8009d90 <_getpid_r>
 8009d2e:	462a      	mov	r2, r5
 8009d30:	4601      	mov	r1, r0
 8009d32:	4620      	mov	r0, r4
 8009d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d38:	f000 b818 	b.w	8009d6c <_kill_r>
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d00a      	beq.n	8009d56 <_raise_r+0x4c>
 8009d40:	1c59      	adds	r1, r3, #1
 8009d42:	d103      	bne.n	8009d4c <_raise_r+0x42>
 8009d44:	2316      	movs	r3, #22
 8009d46:	6003      	str	r3, [r0, #0]
 8009d48:	2001      	movs	r0, #1
 8009d4a:	e7e7      	b.n	8009d1c <_raise_r+0x12>
 8009d4c:	2400      	movs	r4, #0
 8009d4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d52:	4628      	mov	r0, r5
 8009d54:	4798      	blx	r3
 8009d56:	2000      	movs	r0, #0
 8009d58:	e7e0      	b.n	8009d1c <_raise_r+0x12>
	...

08009d5c <raise>:
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <raise+0xc>)
 8009d5e:	4601      	mov	r1, r0
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	f7ff bfd2 	b.w	8009d0a <_raise_r>
 8009d66:	bf00      	nop
 8009d68:	20000010 	.word	0x20000010

08009d6c <_kill_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d07      	ldr	r5, [pc, #28]	; (8009d8c <_kill_r+0x20>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	f7f7 fd23 	bl	80017c4 <_kill>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	d102      	bne.n	8009d88 <_kill_r+0x1c>
 8009d82:	682b      	ldr	r3, [r5, #0]
 8009d84:	b103      	cbz	r3, 8009d88 <_kill_r+0x1c>
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	bd38      	pop	{r3, r4, r5, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000314 	.word	0x20000314

08009d90 <_getpid_r>:
 8009d90:	f7f7 bd10 	b.w	80017b4 <_getpid>

08009d94 <_init>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	bf00      	nop
 8009d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9a:	bc08      	pop	{r3}
 8009d9c:	469e      	mov	lr, r3
 8009d9e:	4770      	bx	lr

08009da0 <_fini>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr
